-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\FIFOIRQCtrl\axi_lite_fifo_irq_ctrl_pcore.vhd
-- Created: 2015-05-14 08:08:22
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.7
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_fifo_irq_ctrl_pcore
-- Source Path: axi_lite_fifo_irq_ctrl_pcore
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_fifo_irq_ctrl_pcore IS
  generic(
        base_addr      : in integer := 1137049600 -- X"43c60000"
  );
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        FIFO_OF                           :   IN    std_logic;  -- ufix1
        FIFO_UF                           :   IN    std_logic;  -- ufix1
        FIFO_DATA_OCC_CNT                 :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        DATA_PATH_RST                     :   IN    std_logic;  -- ufix1
        AXIS_TVALID                       :   IN    std_logic;  -- ufix1
        DATA_CLK                          :   IN    std_logic;  -- ufix1
        ENABLE                            :   IN    std_logic;
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        EXT_IRQ                           :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END axi_lite_fifo_irq_ctrl_pcore;


ARCHITECTURE rtl OF axi_lite_fifo_irq_ctrl_pcore IS

  -- Component Declarations
  COMPONENT axi_lite_fifo_irq_ctrl_pcore_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_rd_STATUS                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_rd_ISR                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_rd_IER                    :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_rd_OFCNT                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_rd_UFCNT                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_rd_FIFO_OCC_CNT            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_rd_FIFO_SAMP_CNT           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_wr_CTRL                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_wr_ISR                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_wr_IER                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT axi_lite_fifo_irq_ctrl_pcore_dut
    generic(
          base_addr      : in integer := 1137049600 -- X"43c60000"
    );
    PORT( axi_clk                         :   IN    std_logic;  -- ufix1
          FIFO_OF                         :   IN    std_logic;  -- ufix1
          FIFO_UF                         :   IN    std_logic;  -- ufix1
          wr_CTRL                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          wr_ISR                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          wr_IER                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          FIFO_DATA_OCC_CNT               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          DATA_PATH_RST                   :   IN    std_logic;  -- ufix1
          AXIS_TVALID                     :   IN    std_logic;  -- ufix1
          DATA_CLK                        :   IN    std_logic;  -- ufix1
          ENABLE                          :   IN    std_logic;
          AXI_AWADDR                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_AWVALID                     :   IN    std_logic;  -- ufix1
          AXI_WVALID                      :   IN    std_logic;  -- ufix1
          AXI_WDATA                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_RST                         :   IN    std_logic;  -- ufix1
          rd_STATUS                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_ISR                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_IER                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_OFCNT                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_UFCNT                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          EXT_IRQ                         :   OUT   std_logic;  -- ufix1
          rd_FIFO_OCC_CNT                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_FIFO_SAMP_CNT                :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

   -- Component Configuration Statements
  FOR ALL : axi_lite_fifo_irq_ctrl_pcore_axi_lite
    USE ENTITY work.axi_lite_fifo_irq_ctrl_pcore_axi_lite(rtl);

  FOR ALL : axi_lite_fifo_irq_ctrl_pcore_dut
    USE ENTITY work.axi_lite_fifo_irq_ctrl_pcore_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL rd_STATUS_sig                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_ISR_sig                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_IER_sig                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_OFCNT_sig                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_UFCNT_sig                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_FIFO_OCC_CNT_sig              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_FIFO_SAMP_CNT_sig             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_wr_CTRL                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_wr_ISR                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_wr_IER                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL EXT_IRQ_sig                      : std_logic;  -- ufix1
  SIGNAL AXI4_Lite_AWADDR_tmp             : std_logic_vector(15 downto 0);
  SIGNAL AXI4_Lite_RST                    : std_logic;  -- ufix1

BEGIN
  
  AXI4_Lite_AWADDR_tmp <= AXI4_Lite_AWADDR(15 downto 0);
  
  u_axi_lite_fifo_irq_ctrl_pcore_axi_lite_inst : axi_lite_fifo_irq_ctrl_pcore_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR_tmp,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_rd_STATUS => rd_STATUS_sig,  -- ufix32
              read_rd_ISR => rd_ISR_sig,  -- ufix32
              read_rd_IER => rd_IER_sig,  -- ufix32
              read_rd_OFCNT => rd_OFCNT_sig,  -- ufix32
              read_rd_UFCNT => rd_UFCNT_sig,  -- ufix32
              read_rd_FIFO_OCC_CNT => rd_FIFO_OCC_CNT_sig,  -- ufix32
              read_rd_FIFO_SAMP_CNT => rd_FIFO_SAMP_CNT_sig,  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_wr_CTRL => write_wr_CTRL,  -- ufix32
              write_wr_ISR => write_wr_ISR,  -- ufix32
              write_wr_IER => write_wr_IER,  -- sfix32
              reset_internal => reset_internal  -- ufix1
              );

  u_axi_lite_fifo_irq_ctrl_pcore_dut_inst : axi_lite_fifo_irq_ctrl_pcore_dut
    generic map(
       base_addr => base_addr
    )
    PORT MAP( axi_clk => AXI4_Lite_ACLK,  -- ufix1
              FIFO_OF => FIFO_OF,  -- ufix1
              FIFO_UF => FIFO_UF,  -- ufix1
              wr_CTRL => write_wr_CTRL,  -- ufix32
              wr_ISR => write_wr_ISR,  -- ufix32
              wr_IER => write_wr_IER,  -- sfix32
              FIFO_DATA_OCC_CNT => FIFO_DATA_OCC_CNT,  -- ufix5
              DATA_PATH_RST => DATA_PATH_RST,  -- ufix1
              AXIS_TVALID => AXIS_TVALID,  -- ufix1
              DATA_CLK => DATA_CLK,  -- ufix1
              ENABLE => ENABLE,
              AXI_AWADDR => AXI4_Lite_AWADDR,  -- ufix32
              AXI_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI_RST => AXI4_Lite_RST,  -- ufix1
              rd_STATUS => rd_STATUS_sig,  -- ufix32
              rd_ISR => rd_ISR_sig,  -- ufix32
              rd_IER => rd_IER_sig,  -- ufix32
              rd_OFCNT => rd_OFCNT_sig,  -- ufix32
              rd_UFCNT => rd_UFCNT_sig,  -- ufix32
              EXT_IRQ => EXT_IRQ_sig,  -- ufix1
              rd_FIFO_OCC_CNT => rd_FIFO_OCC_CNT_sig,  -- ufix32
              rd_FIFO_SAMP_CNT => rd_FIFO_SAMP_CNT_sig  -- ufix32
              );

  AXI4_Lite_RST <= not(AXI4_Lite_ARESETN);
  
  reset_cm <=  NOT IPCORE_RESETN;

  reset <= reset_cm OR reset_internal;

  EXT_IRQ <= EXT_IRQ_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

