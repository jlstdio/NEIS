-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\filterbank_antselect_io\axi_lite_filterbank_antselect_ip.vhd
-- Created: 2016-05-02 18:40:52
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_filterbank_antselect_ip
-- Source Path: axi_lite_filterbank_antselect_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_filterbank_antselect_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        TX_BANDSEL                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        RX1_BANDSEL                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        RX2_BANDSEL                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        RX1B_BANDSEL                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        RX1C_BANDSEL                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        RX2B_BANDSEL                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        RX2C_BANDSEL                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        TX_ENABLE1A                       :   OUT   std_logic;  -- ufix1
        TX_ENABLE2A                       :   OUT   std_logic;  -- ufix1
        TX_ENABLE1B                       :   OUT   std_logic;  -- ufix1
        TX_ENABLE2B                       :   OUT   std_logic;  -- ufix1
        VCTXRX1_V1                        :   OUT   std_logic;  -- ufix1
        VCTXRX1_V2                        :   OUT   std_logic;  -- ufix1
        VCTXRX2_V1                        :   OUT   std_logic;  -- ufix1
        VCTXRX2_V2                        :   OUT   std_logic;  -- ufix1
        VCRX1_V1                          :   OUT   std_logic;  -- ufix1
        VCRX1_V2                          :   OUT   std_logic;  -- ufix1
        VCRX2_V1                          :   OUT   std_logic;  -- ufix1
        VCRX2_V2                          :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END axi_lite_filterbank_antselect_ip;


ARCHITECTURE rtl OF axi_lite_filterbank_antselect_ip IS

  -- Component Declarations
  COMPONENT axi_lite_filterbank_antselect_ip_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_rd_TX_BANDSEL              :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          read_rd_RX1_BANDSEL             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          read_rd_RX2_BANDSEL             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          read_rd_RX1B_BANDSEL            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_rd_RX1C_BANDSEL            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_rd_RX2B_BANDSEL            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_rd_RX2C_BANDSEL            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_rd_TX_ENABLE1A             :   IN    std_logic;  -- ufix1
          read_rd_TX_ENABLE2A             :   IN    std_logic;  -- ufix1
          read_rd_TX_ENABLE1B             :   IN    std_logic;  -- ufix1
          read_rd_TX_ENABLE2B             :   IN    std_logic;  -- ufix1
          read_rd_VCTXRX1_V1              :   IN    std_logic;  -- ufix1
          read_rd_VCTXRX1_V2              :   IN    std_logic;  -- ufix1
          read_rd_VCTXRX2_V1              :   IN    std_logic;  -- ufix1
          read_rd_VCTXRX2_V2              :   IN    std_logic;  -- ufix1
          read_rd_VCRX1_V1                :   IN    std_logic;  -- ufix1
          read_rd_VCRX1_V2                :   IN    std_logic;  -- ufix1
          read_rd_VCRX2_V1                :   IN    std_logic;  -- ufix1
          read_rd_VCRX2_V2                :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_wr_TX_BANDSEL             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          write_wr_RX1_BANDSEL            :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          write_wr_RX2_BANDSEL            :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          write_wr_RX1B_BANDSEL           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          write_wr_RX1C_BANDSEL           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          write_wr_RX2B_BANDSEL           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          write_wr_RX2C_BANDSEL           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          write_wr_TX_ENABLE1A            :   OUT   std_logic;  -- ufix1
          write_wr_TX_ENABLE2A            :   OUT   std_logic;  -- ufix1
          write_wr_TX_ENABLE1B            :   OUT   std_logic;  -- ufix1
          write_wr_TX_ENABLE2B            :   OUT   std_logic;  -- ufix1
          write_wr_VCTXRX1_V1             :   OUT   std_logic;  -- ufix1
          write_wr_VCTXRX1_V2             :   OUT   std_logic;  -- ufix1
          write_wr_VCTXRX2_V1             :   OUT   std_logic;  -- ufix1
          write_wr_VCTXRX2_V2             :   OUT   std_logic;  -- ufix1
          write_wr_VCRX1_V1               :   OUT   std_logic;  -- ufix1
          write_wr_VCRX1_V2               :   OUT   std_logic;  -- ufix1
          write_wr_VCRX2_V1               :   OUT   std_logic;  -- ufix1
          write_wr_VCRX2_V2               :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT axi_lite_filterbank_antselect_ip_dut
    PORT( wr_TX_BANDSEL                   :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          wr_RX1_BANDSEL                  :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          wr_RX2_BANDSEL                  :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          wr_RX1B_BANDSEL                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          wr_RX1C_BANDSEL                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          wr_RX2B_BANDSEL                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          wr_RX2C_BANDSEL                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          wr_TX_ENABLE1A                  :   IN    std_logic;  -- ufix1
          wr_TX_ENABLE2A                  :   IN    std_logic;  -- ufix1
          wr_TX_ENABLE1B                  :   IN    std_logic;  -- ufix1
          wr_TX_ENABLE2B                  :   IN    std_logic;  -- ufix1
          wr_VCTXRX1_V1                   :   IN    std_logic;  -- ufix1
          wr_VCTXRX1_V2                   :   IN    std_logic;  -- ufix1
          wr_VCTXRX2_V1                   :   IN    std_logic;  -- ufix1
          wr_VCTXRX2_V2                   :   IN    std_logic;  -- ufix1
          wr_VCRX1_V1                     :   IN    std_logic;  -- ufix1
          wr_VCRX1_V2                     :   IN    std_logic;  -- ufix1
          wr_VCRX2_V1                     :   IN    std_logic;  -- ufix1
          wr_VCRX2_V2                     :   IN    std_logic;  -- ufix1
          TX_BANDSEL                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          RX1_BANDSEL                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          RX2_BANDSEL                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          RX1B_BANDSEL                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          RX1C_BANDSEL                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          RX2B_BANDSEL                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          RX2C_BANDSEL                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          TX_ENABLE1A                     :   OUT   std_logic;  -- ufix1
          TX_ENABLE2A                     :   OUT   std_logic;  -- ufix1
          TX_ENABLE1B                     :   OUT   std_logic;  -- ufix1
          TX_ENABLE2B                     :   OUT   std_logic;  -- ufix1
          VCTXRX1_V1                      :   OUT   std_logic;  -- ufix1
          VCTXRX1_V2                      :   OUT   std_logic;  -- ufix1
          VCTXRX2_V1                      :   OUT   std_logic;  -- ufix1
          VCTXRX2_V2                      :   OUT   std_logic;  -- ufix1
          VCRX1_V1                        :   OUT   std_logic;  -- ufix1
          VCRX1_V2                        :   OUT   std_logic;  -- ufix1
          VCRX2_V1                        :   OUT   std_logic;  -- ufix1
          VCRX2_V2                        :   OUT   std_logic;  -- ufix1
          rd_TX_BANDSEL                   :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_RX1_BANDSEL                  :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_RX2_BANDSEL                  :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_RX1B_BANDSEL                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_RX1C_BANDSEL                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_RX2B_BANDSEL                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_RX2C_BANDSEL                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_TX_ENABLE1A                  :   OUT   std_logic;  -- ufix1
          rd_TX_ENABLE2A                  :   OUT   std_logic;  -- ufix1
          rd_TX_ENABLE1B                  :   OUT   std_logic;  -- ufix1
          rd_TX_ENABLE2B                  :   OUT   std_logic;  -- ufix1
          rd_VCTXRX1_V1                   :   OUT   std_logic;  -- ufix1
          rd_VCTXRX1_V2                   :   OUT   std_logic;  -- ufix1
          rd_VCTXRX2_V1                   :   OUT   std_logic;  -- ufix1
          rd_VCTXRX2_V2                   :   OUT   std_logic;  -- ufix1
          rd_VCRX1_V1                     :   OUT   std_logic;  -- ufix1
          rd_VCRX1_V2                     :   OUT   std_logic;  -- ufix1
          rd_VCRX2_V1                     :   OUT   std_logic;  -- ufix1
          rd_VCRX2_V2                     :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi_lite_filterbank_antselect_ip_axi_lite
    USE ENTITY work.axi_lite_filterbank_antselect_ip_axi_lite(rtl);

  FOR ALL : axi_lite_filterbank_antselect_ip_dut
    USE ENTITY work.axi_lite_filterbank_antselect_ip_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL rd_TX_BANDSEL_sig                : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_RX1_BANDSEL_sig               : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_RX2_BANDSEL_sig               : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_RX1B_BANDSEL_sig              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_RX1C_BANDSEL_sig              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_RX2B_BANDSEL_sig              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_RX2C_BANDSEL_sig              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_TX_ENABLE1A_sig               : std_logic;  -- ufix1
  SIGNAL rd_TX_ENABLE2A_sig               : std_logic;  -- ufix1
  SIGNAL rd_TX_ENABLE1B_sig               : std_logic;  -- ufix1
  SIGNAL rd_TX_ENABLE2B_sig               : std_logic;  -- ufix1
  SIGNAL rd_VCTXRX1_V1_sig                : std_logic;  -- ufix1
  SIGNAL rd_VCTXRX1_V2_sig                : std_logic;  -- ufix1
  SIGNAL rd_VCTXRX2_V1_sig                : std_logic;  -- ufix1
  SIGNAL rd_VCTXRX2_V2_sig                : std_logic;  -- ufix1
  SIGNAL rd_VCRX1_V1_sig                  : std_logic;  -- ufix1
  SIGNAL rd_VCRX1_V2_sig                  : std_logic;  -- ufix1
  SIGNAL rd_VCRX2_V1_sig                  : std_logic;  -- ufix1
  SIGNAL rd_VCRX2_V2_sig                  : std_logic;  -- ufix1
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_wr_TX_BANDSEL              : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL write_wr_RX1_BANDSEL             : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL write_wr_RX2_BANDSEL             : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL write_wr_RX1B_BANDSEL            : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_wr_RX1C_BANDSEL            : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_wr_RX2B_BANDSEL            : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_wr_RX2C_BANDSEL            : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_wr_TX_ENABLE1A             : std_logic;  -- ufix1
  SIGNAL write_wr_TX_ENABLE2A             : std_logic;  -- ufix1
  SIGNAL write_wr_TX_ENABLE1B             : std_logic;  -- ufix1
  SIGNAL write_wr_TX_ENABLE2B             : std_logic;  -- ufix1
  SIGNAL write_wr_VCTXRX1_V1              : std_logic;  -- ufix1
  SIGNAL write_wr_VCTXRX1_V2              : std_logic;  -- ufix1
  SIGNAL write_wr_VCTXRX2_V1              : std_logic;  -- ufix1
  SIGNAL write_wr_VCTXRX2_V2              : std_logic;  -- ufix1
  SIGNAL write_wr_VCRX1_V1                : std_logic;  -- ufix1
  SIGNAL write_wr_VCRX1_V2                : std_logic;  -- ufix1
  SIGNAL write_wr_VCRX2_V1                : std_logic;  -- ufix1
  SIGNAL write_wr_VCRX2_V2                : std_logic;  -- ufix1
  SIGNAL TX_BANDSEL_sig                   : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL RX1_BANDSEL_sig                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL RX2_BANDSEL_sig                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL RX1B_BANDSEL_sig                 : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL RX1C_BANDSEL_sig                 : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL RX2B_BANDSEL_sig                 : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL RX2C_BANDSEL_sig                 : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL TX_ENABLE1A_sig                  : std_logic;  -- ufix1
  SIGNAL TX_ENABLE2A_sig                  : std_logic;  -- ufix1
  SIGNAL TX_ENABLE1B_sig                  : std_logic;  -- ufix1
  SIGNAL TX_ENABLE2B_sig                  : std_logic;  -- ufix1
  SIGNAL VCTXRX1_V1_sig                   : std_logic;  -- ufix1
  SIGNAL VCTXRX1_V2_sig                   : std_logic;  -- ufix1
  SIGNAL VCTXRX2_V1_sig                   : std_logic;  -- ufix1
  SIGNAL VCTXRX2_V2_sig                   : std_logic;  -- ufix1
  SIGNAL VCRX1_V1_sig                     : std_logic;  -- ufix1
  SIGNAL VCRX1_V2_sig                     : std_logic;  -- ufix1
  SIGNAL VCRX2_V1_sig                     : std_logic;  -- ufix1
  SIGNAL VCRX2_V2_sig                     : std_logic;  -- ufix1

BEGIN
  u_axi_lite_filterbank_antselect_ip_axi_lite_inst : axi_lite_filterbank_antselect_ip_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_rd_TX_BANDSEL => rd_TX_BANDSEL_sig,  -- ufix3
              read_rd_RX1_BANDSEL => rd_RX1_BANDSEL_sig,  -- ufix3
              read_rd_RX2_BANDSEL => rd_RX2_BANDSEL_sig,  -- ufix3
              read_rd_RX1B_BANDSEL => rd_RX1B_BANDSEL_sig,  -- ufix2
              read_rd_RX1C_BANDSEL => rd_RX1C_BANDSEL_sig,  -- ufix2
              read_rd_RX2B_BANDSEL => rd_RX2B_BANDSEL_sig,  -- ufix2
              read_rd_RX2C_BANDSEL => rd_RX2C_BANDSEL_sig,  -- ufix2
              read_rd_TX_ENABLE1A => rd_TX_ENABLE1A_sig,  -- ufix1
              read_rd_TX_ENABLE2A => rd_TX_ENABLE2A_sig,  -- ufix1
              read_rd_TX_ENABLE1B => rd_TX_ENABLE1B_sig,  -- ufix1
              read_rd_TX_ENABLE2B => rd_TX_ENABLE2B_sig,  -- ufix1
              read_rd_VCTXRX1_V1 => rd_VCTXRX1_V1_sig,  -- ufix1
              read_rd_VCTXRX1_V2 => rd_VCTXRX1_V2_sig,  -- ufix1
              read_rd_VCTXRX2_V1 => rd_VCTXRX2_V1_sig,  -- ufix1
              read_rd_VCTXRX2_V2 => rd_VCTXRX2_V2_sig,  -- ufix1
              read_rd_VCRX1_V1 => rd_VCRX1_V1_sig,  -- ufix1
              read_rd_VCRX1_V2 => rd_VCRX1_V2_sig,  -- ufix1
              read_rd_VCRX2_V1 => rd_VCRX2_V1_sig,  -- ufix1
              read_rd_VCRX2_V2 => rd_VCRX2_V2_sig,  -- ufix1
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_wr_TX_BANDSEL => write_wr_TX_BANDSEL,  -- ufix3
              write_wr_RX1_BANDSEL => write_wr_RX1_BANDSEL,  -- ufix3
              write_wr_RX2_BANDSEL => write_wr_RX2_BANDSEL,  -- ufix3
              write_wr_RX1B_BANDSEL => write_wr_RX1B_BANDSEL,  -- ufix2
              write_wr_RX1C_BANDSEL => write_wr_RX1C_BANDSEL,  -- ufix2
              write_wr_RX2B_BANDSEL => write_wr_RX2B_BANDSEL,  -- ufix2
              write_wr_RX2C_BANDSEL => write_wr_RX2C_BANDSEL,  -- ufix2
              write_wr_TX_ENABLE1A => write_wr_TX_ENABLE1A,  -- ufix1
              write_wr_TX_ENABLE2A => write_wr_TX_ENABLE2A,  -- ufix1
              write_wr_TX_ENABLE1B => write_wr_TX_ENABLE1B,  -- ufix1
              write_wr_TX_ENABLE2B => write_wr_TX_ENABLE2B,  -- ufix1
              write_wr_VCTXRX1_V1 => write_wr_VCTXRX1_V1,  -- ufix1
              write_wr_VCTXRX1_V2 => write_wr_VCTXRX1_V2,  -- ufix1
              write_wr_VCTXRX2_V1 => write_wr_VCTXRX2_V1,  -- ufix1
              write_wr_VCTXRX2_V2 => write_wr_VCTXRX2_V2,  -- ufix1
              write_wr_VCRX1_V1 => write_wr_VCRX1_V1,  -- ufix1
              write_wr_VCRX1_V2 => write_wr_VCRX1_V2,  -- ufix1
              write_wr_VCRX2_V1 => write_wr_VCRX2_V1,  -- ufix1
              write_wr_VCRX2_V2 => write_wr_VCRX2_V2,  -- ufix1
              reset_internal => reset_internal  -- ufix1
              );

  u_axi_lite_filterbank_antselect_ip_dut_inst : axi_lite_filterbank_antselect_ip_dut
    PORT MAP( wr_TX_BANDSEL => write_wr_TX_BANDSEL,  -- ufix3
              wr_RX1_BANDSEL => write_wr_RX1_BANDSEL,  -- ufix3
              wr_RX2_BANDSEL => write_wr_RX2_BANDSEL,  -- ufix3
              wr_RX1B_BANDSEL => write_wr_RX1B_BANDSEL,  -- ufix2
              wr_RX1C_BANDSEL => write_wr_RX1C_BANDSEL,  -- ufix2
              wr_RX2B_BANDSEL => write_wr_RX2B_BANDSEL,  -- ufix2
              wr_RX2C_BANDSEL => write_wr_RX2C_BANDSEL,  -- ufix2
              wr_TX_ENABLE1A => write_wr_TX_ENABLE1A,  -- ufix1
              wr_TX_ENABLE2A => write_wr_TX_ENABLE2A,  -- ufix1
              wr_TX_ENABLE1B => write_wr_TX_ENABLE1B,  -- ufix1
              wr_TX_ENABLE2B => write_wr_TX_ENABLE2B,  -- ufix1
              wr_VCTXRX1_V1 => write_wr_VCTXRX1_V1,  -- ufix1
              wr_VCTXRX1_V2 => write_wr_VCTXRX1_V2,  -- ufix1
              wr_VCTXRX2_V1 => write_wr_VCTXRX2_V1,  -- ufix1
              wr_VCTXRX2_V2 => write_wr_VCTXRX2_V2,  -- ufix1
              wr_VCRX1_V1 => write_wr_VCRX1_V1,  -- ufix1
              wr_VCRX1_V2 => write_wr_VCRX1_V2,  -- ufix1
              wr_VCRX2_V1 => write_wr_VCRX2_V1,  -- ufix1
              wr_VCRX2_V2 => write_wr_VCRX2_V2,  -- ufix1
              TX_BANDSEL => TX_BANDSEL_sig,  -- ufix3
              RX1_BANDSEL => RX1_BANDSEL_sig,  -- ufix3
              RX2_BANDSEL => RX2_BANDSEL_sig,  -- ufix3
              RX1B_BANDSEL => RX1B_BANDSEL_sig,  -- ufix2
              RX1C_BANDSEL => RX1C_BANDSEL_sig,  -- ufix2
              RX2B_BANDSEL => RX2B_BANDSEL_sig,  -- ufix2
              RX2C_BANDSEL => RX2C_BANDSEL_sig,  -- ufix2
              TX_ENABLE1A => TX_ENABLE1A_sig,  -- ufix1
              TX_ENABLE2A => TX_ENABLE2A_sig,  -- ufix1
              TX_ENABLE1B => TX_ENABLE1B_sig,  -- ufix1
              TX_ENABLE2B => TX_ENABLE2B_sig,  -- ufix1
              VCTXRX1_V1 => VCTXRX1_V1_sig,  -- ufix1
              VCTXRX1_V2 => VCTXRX1_V2_sig,  -- ufix1
              VCTXRX2_V1 => VCTXRX2_V1_sig,  -- ufix1
              VCTXRX2_V2 => VCTXRX2_V2_sig,  -- ufix1
              VCRX1_V1 => VCRX1_V1_sig,  -- ufix1
              VCRX1_V2 => VCRX1_V2_sig,  -- ufix1
              VCRX2_V1 => VCRX2_V1_sig,  -- ufix1
              VCRX2_V2 => VCRX2_V2_sig,  -- ufix1
              rd_TX_BANDSEL => rd_TX_BANDSEL_sig,  -- ufix3
              rd_RX1_BANDSEL => rd_RX1_BANDSEL_sig,  -- ufix3
              rd_RX2_BANDSEL => rd_RX2_BANDSEL_sig,  -- ufix3
              rd_RX1B_BANDSEL => rd_RX1B_BANDSEL_sig,  -- ufix2
              rd_RX1C_BANDSEL => rd_RX1C_BANDSEL_sig,  -- ufix2
              rd_RX2B_BANDSEL => rd_RX2B_BANDSEL_sig,  -- ufix2
              rd_RX2C_BANDSEL => rd_RX2C_BANDSEL_sig,  -- ufix2
              rd_TX_ENABLE1A => rd_TX_ENABLE1A_sig,  -- ufix1
              rd_TX_ENABLE2A => rd_TX_ENABLE2A_sig,  -- ufix1
              rd_TX_ENABLE1B => rd_TX_ENABLE1B_sig,  -- ufix1
              rd_TX_ENABLE2B => rd_TX_ENABLE2B_sig,  -- ufix1
              rd_VCTXRX1_V1 => rd_VCTXRX1_V1_sig,  -- ufix1
              rd_VCTXRX1_V2 => rd_VCTXRX1_V2_sig,  -- ufix1
              rd_VCTXRX2_V1 => rd_VCTXRX2_V1_sig,  -- ufix1
              rd_VCTXRX2_V2 => rd_VCTXRX2_V2_sig,  -- ufix1
              rd_VCRX1_V1 => rd_VCRX1_V1_sig,  -- ufix1
              rd_VCRX1_V2 => rd_VCRX1_V2_sig,  -- ufix1
              rd_VCRX2_V1 => rd_VCRX2_V1_sig,  -- ufix1
              rd_VCRX2_V2 => rd_VCRX2_V2_sig  -- ufix1
              );

  reset_cm <=  NOT IPCORE_RESETN;

  reset <= reset_cm OR reset_internal;

  TX_BANDSEL <= TX_BANDSEL_sig;

  RX1_BANDSEL <= RX1_BANDSEL_sig;

  RX2_BANDSEL <= RX2_BANDSEL_sig;

  RX1B_BANDSEL <= RX1B_BANDSEL_sig;

  RX1C_BANDSEL <= RX1C_BANDSEL_sig;

  RX2B_BANDSEL <= RX2B_BANDSEL_sig;

  RX2C_BANDSEL <= RX2C_BANDSEL_sig;

  TX_ENABLE1A <= TX_ENABLE1A_sig;

  TX_ENABLE2A <= TX_ENABLE2A_sig;

  TX_ENABLE1B <= TX_ENABLE1B_sig;

  TX_ENABLE2B <= TX_ENABLE2B_sig;

  VCTXRX1_V1 <= VCTXRX1_V1_sig;

  VCTXRX1_V2 <= VCTXRX1_V2_sig;

  VCTXRX2_V1 <= VCTXRX2_V1_sig;

  VCTXRX2_V2 <= VCTXRX2_V2_sig;

  VCRX1_V1 <= VCRX1_V1_sig;

  VCRX1_V2 <= VCRX1_V2_sig;

  VCRX2_V1 <= VCRX2_V1_sig;

  VCRX2_V2 <= VCRX2_V2_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

