-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\axi_lite_system_config\axi_lite_system_config_pcore_addr_decoder.vhd
-- Created: 2014-03-09 13:27:11
-- 
-- Generated by MATLAB 8.3 and HDL Coder 3.4
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_system_config_pcore_addr_decoder
-- Source Path: axi_lite_system_config_pcore/axi_lite_system_config_pcore_axi_lite/axi_lite_system_config_pcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_system_config_pcore_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_rd_ver_reg                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_hwinfo1_reg               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_hwinfo2_reg               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_hwinfo3_reg               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_hwinfo4_reg               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_hwinfo5_reg               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_hwinfo6_reg               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_hwinfo7_reg               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_hwinfo8_reg               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_rxstrmenb_reg             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_rx_data_src_path          :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        read_rd_txstrmenb_reg             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_tx_data_src_path          :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_wr_sysrst_reg               :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        write_wr_rxstrmenb_reg            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_rst_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_rx_data_src_path         :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        write_wr_txstrmenb_reg            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_tx_data_src_path         :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
        );
END axi_lite_system_config_pcore_addr_decoder;


ARCHITECTURE rtl OF axi_lite_system_config_pcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_rd_ver_reg            : std_logic;  -- ufix1
  SIGNAL const_z                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_ver_reg_unsigned         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_hwinfo1_reg        : std_logic;  -- ufix1
  SIGNAL read_reg_rd_ver_reg              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_ver_reg             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_hwinfo1_reg_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_rd_hwinfo2_reg        : std_logic;  -- ufix1
  SIGNAL read_reg_rd_hwinfo1_reg          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_hwinfo1_reg         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_hwinfo2_reg_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_rd_hwinfo3_reg        : std_logic;  -- ufix1
  SIGNAL read_reg_rd_hwinfo2_reg          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_hwinfo2_reg         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_hwinfo3_reg_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_rd_hwinfo4_reg        : std_logic;  -- ufix1
  SIGNAL read_reg_rd_hwinfo3_reg          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_hwinfo3_reg         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_hwinfo4_reg_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_rd_hwinfo5_reg        : std_logic;  -- ufix1
  SIGNAL read_reg_rd_hwinfo4_reg          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_hwinfo4_reg         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_hwinfo5_reg_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_rd_hwinfo6_reg        : std_logic;  -- ufix1
  SIGNAL read_reg_rd_hwinfo5_reg          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_hwinfo5_reg         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_hwinfo6_reg_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_rd_hwinfo7_reg        : std_logic;  -- ufix1
  SIGNAL read_reg_rd_hwinfo6_reg          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_hwinfo6_reg         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_hwinfo7_reg_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_rd_hwinfo8_reg        : std_logic;  -- ufix1
  SIGNAL read_reg_rd_hwinfo7_reg          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_hwinfo7_reg         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_hwinfo8_reg_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_rd_rxstrmenb_reg      : std_logic;  -- ufix1
  SIGNAL read_reg_rd_hwinfo8_reg          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_hwinfo8_reg         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_rxstrmenb_reg_unsigned   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_rx_data_src_path_unsigned : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL decode_sel_rd_txstrmenb_reg      : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_rx_data_src_path   : std_logic;  -- ufix1
  SIGNAL read_reg_rd_rxstrmenb_reg        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_rxstrmenb_reg       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_rx_data_src_path     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL data_in_rd_rx_data_src_path      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_rx_data_src_path    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_txstrmenb_reg_unsigned   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_tx_data_src_path_unsigned : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL decode_sel_rd_tx_data_src_path   : std_logic;  -- ufix1
  SIGNAL read_reg_rd_txstrmenb_reg        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_txstrmenb_reg       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_tx_data_src_path     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL data_in_rd_tx_data_src_path      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_tx_data_src_path    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL data_in_wr_sysrst_reg            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL decode_sel_wr_sysrst_reg         : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_sysrst_reg            : std_logic;  -- ufix1
  SIGNAL write_reg_wr_sysrst_reg          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL decode_sel_wr_rxstrmenb_reg      : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_rxstrmenb_reg         : std_logic;  -- ufix1
  SIGNAL write_reg_wr_rxstrmenb_reg       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_wr_rst_reg            : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_rst_reg               : std_logic;  -- ufix1
  SIGNAL write_reg_wr_rst_reg             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_wr_rx_data_src_path      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL decode_sel_wr_rx_data_src_path   : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_rx_data_src_path      : std_logic;  -- ufix1
  SIGNAL write_reg_wr_rx_data_src_path    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL decode_sel_wr_txstrmenb_reg      : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_txstrmenb_reg         : std_logic;  -- ufix1
  SIGNAL write_reg_wr_txstrmenb_reg       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_wr_tx_data_src_path      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL decode_sel_wr_tx_data_src_path   : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_tx_data_src_path      : std_logic;  -- ufix1
  SIGNAL write_reg_wr_tx_data_src_path    : unsigned(2 DOWNTO 0);  -- ufix3

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_rd_ver_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000000#, 14) ELSE
      '0';

  const_z <= (OTHERS => '0');


  read_rd_ver_reg_unsigned <= unsigned(read_rd_ver_reg);

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_rd_hwinfo1_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000001#, 14) ELSE
      '0';

  reg_rd_ver_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_ver_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_ver_reg <= read_rd_ver_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_ver_reg_process;


  
  decode_rd_rd_ver_reg <= const_z WHEN decode_sel_rd_ver_reg = '0' ELSE
      read_reg_rd_ver_reg;

  read_rd_hwinfo1_reg_unsigned <= unsigned(read_rd_hwinfo1_reg);

  
  decode_sel_rd_hwinfo2_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000010#, 14) ELSE
      '0';

  reg_rd_hwinfo1_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_hwinfo1_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_hwinfo1_reg <= read_rd_hwinfo1_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_hwinfo1_reg_process;


  
  decode_rd_rd_hwinfo1_reg <= decode_rd_rd_ver_reg WHEN decode_sel_rd_hwinfo1_reg = '0' ELSE
      read_reg_rd_hwinfo1_reg;

  read_rd_hwinfo2_reg_unsigned <= unsigned(read_rd_hwinfo2_reg);

  
  decode_sel_rd_hwinfo3_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000011#, 14) ELSE
      '0';

  reg_rd_hwinfo2_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_hwinfo2_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_hwinfo2_reg <= read_rd_hwinfo2_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_hwinfo2_reg_process;


  
  decode_rd_rd_hwinfo2_reg <= decode_rd_rd_hwinfo1_reg WHEN decode_sel_rd_hwinfo2_reg = '0' ELSE
      read_reg_rd_hwinfo2_reg;

  read_rd_hwinfo3_reg_unsigned <= unsigned(read_rd_hwinfo3_reg);

  
  decode_sel_rd_hwinfo4_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000100#, 14) ELSE
      '0';

  reg_rd_hwinfo3_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_hwinfo3_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_hwinfo3_reg <= read_rd_hwinfo3_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_hwinfo3_reg_process;


  
  decode_rd_rd_hwinfo3_reg <= decode_rd_rd_hwinfo2_reg WHEN decode_sel_rd_hwinfo3_reg = '0' ELSE
      read_reg_rd_hwinfo3_reg;

  read_rd_hwinfo4_reg_unsigned <= unsigned(read_rd_hwinfo4_reg);

  
  decode_sel_rd_hwinfo5_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000101#, 14) ELSE
      '0';

  reg_rd_hwinfo4_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_hwinfo4_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_hwinfo4_reg <= read_rd_hwinfo4_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_hwinfo4_reg_process;


  
  decode_rd_rd_hwinfo4_reg <= decode_rd_rd_hwinfo3_reg WHEN decode_sel_rd_hwinfo4_reg = '0' ELSE
      read_reg_rd_hwinfo4_reg;

  read_rd_hwinfo5_reg_unsigned <= unsigned(read_rd_hwinfo5_reg);

  
  decode_sel_rd_hwinfo6_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000110#, 14) ELSE
      '0';

  reg_rd_hwinfo5_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_hwinfo5_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_hwinfo5_reg <= read_rd_hwinfo5_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_hwinfo5_reg_process;


  
  decode_rd_rd_hwinfo5_reg <= decode_rd_rd_hwinfo4_reg WHEN decode_sel_rd_hwinfo5_reg = '0' ELSE
      read_reg_rd_hwinfo5_reg;

  read_rd_hwinfo6_reg_unsigned <= unsigned(read_rd_hwinfo6_reg);

  
  decode_sel_rd_hwinfo7_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000111#, 14) ELSE
      '0';

  reg_rd_hwinfo6_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_hwinfo6_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_hwinfo6_reg <= read_rd_hwinfo6_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_hwinfo6_reg_process;


  
  decode_rd_rd_hwinfo6_reg <= decode_rd_rd_hwinfo5_reg WHEN decode_sel_rd_hwinfo6_reg = '0' ELSE
      read_reg_rd_hwinfo6_reg;

  read_rd_hwinfo7_reg_unsigned <= unsigned(read_rd_hwinfo7_reg);

  
  decode_sel_rd_hwinfo8_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001001000#, 14) ELSE
      '0';

  reg_rd_hwinfo7_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_hwinfo7_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_hwinfo7_reg <= read_rd_hwinfo7_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_hwinfo7_reg_process;


  
  decode_rd_rd_hwinfo7_reg <= decode_rd_rd_hwinfo6_reg WHEN decode_sel_rd_hwinfo7_reg = '0' ELSE
      read_reg_rd_hwinfo7_reg;

  read_rd_hwinfo8_reg_unsigned <= unsigned(read_rd_hwinfo8_reg);

  
  decode_sel_rd_rxstrmenb_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001001011#, 14) ELSE
      '0';

  reg_rd_hwinfo8_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_hwinfo8_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_hwinfo8_reg <= read_rd_hwinfo8_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_hwinfo8_reg_process;


  
  decode_rd_rd_hwinfo8_reg <= decode_rd_rd_hwinfo7_reg WHEN decode_sel_rd_hwinfo8_reg = '0' ELSE
      read_reg_rd_hwinfo8_reg;

  read_rd_rxstrmenb_reg_unsigned <= unsigned(read_rd_rxstrmenb_reg);

  read_rd_rx_data_src_path_unsigned <= unsigned(read_rd_rx_data_src_path);

  
  decode_sel_rd_txstrmenb_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001010000#, 14) ELSE
      '0';

  
  decode_sel_rd_rx_data_src_path <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001001110#, 14) ELSE
      '0';

  reg_rd_rxstrmenb_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_rxstrmenb_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_rxstrmenb_reg <= read_rd_rxstrmenb_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_rxstrmenb_reg_process;


  
  decode_rd_rd_rxstrmenb_reg <= decode_rd_rd_hwinfo8_reg WHEN decode_sel_rd_rxstrmenb_reg = '0' ELSE
      read_reg_rd_rxstrmenb_reg;

  reg_rd_rx_data_src_path_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_rx_data_src_path <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_rx_data_src_path <= read_rd_rx_data_src_path_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_rx_data_src_path_process;


  data_in_rd_rx_data_src_path <= resize(read_reg_rd_rx_data_src_path, 32);

  
  decode_rd_rd_rx_data_src_path <= decode_rd_rd_rxstrmenb_reg WHEN decode_sel_rd_rx_data_src_path = '0' ELSE
      data_in_rd_rx_data_src_path;

  read_rd_txstrmenb_reg_unsigned <= unsigned(read_rd_txstrmenb_reg);

  read_rd_tx_data_src_path_unsigned <= unsigned(read_rd_tx_data_src_path);

  
  decode_sel_rd_tx_data_src_path <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001010010#, 14) ELSE
      '0';

  reg_rd_txstrmenb_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_txstrmenb_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_txstrmenb_reg <= read_rd_txstrmenb_reg_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_txstrmenb_reg_process;


  
  decode_rd_rd_txstrmenb_reg <= decode_rd_rd_rx_data_src_path WHEN decode_sel_rd_txstrmenb_reg = '0' ELSE
      read_reg_rd_txstrmenb_reg;

  reg_rd_tx_data_src_path_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_tx_data_src_path <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_tx_data_src_path <= read_rd_tx_data_src_path_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_tx_data_src_path_process;


  data_in_rd_tx_data_src_path <= resize(read_reg_rd_tx_data_src_path, 32);

  
  decode_rd_rd_tx_data_src_path <= decode_rd_rd_txstrmenb_reg WHEN decode_sel_rd_tx_data_src_path = '0' ELSE
      data_in_rd_tx_data_src_path;

  data_read <= std_logic_vector(decode_rd_rd_tx_data_src_path);

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000000000001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  data_in_wr_sysrst_reg <= data_write_unsigned(7 DOWNTO 0);

  
  decode_sel_wr_sysrst_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001001001#, 14) ELSE
      '0';

  reg_enb_wr_sysrst_reg <= decode_sel_wr_sysrst_reg AND wr_enb;

  reg_wr_sysrst_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_wr_sysrst_reg <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_sysrst_reg = '1' THEN
        write_reg_wr_sysrst_reg <= data_in_wr_sysrst_reg;
      END IF;
    END IF;
  END PROCESS reg_wr_sysrst_reg_process;


  write_wr_sysrst_reg <= std_logic_vector(write_reg_wr_sysrst_reg);

  
  decode_sel_wr_rxstrmenb_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001001010#, 14) ELSE
      '0';

  reg_enb_wr_rxstrmenb_reg <= decode_sel_wr_rxstrmenb_reg AND wr_enb;

  reg_wr_rxstrmenb_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_wr_rxstrmenb_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_rxstrmenb_reg = '1' THEN
        write_reg_wr_rxstrmenb_reg <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_wr_rxstrmenb_reg_process;


  write_wr_rxstrmenb_reg <= std_logic_vector(write_reg_wr_rxstrmenb_reg);

  
  decode_sel_wr_rst_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001001100#, 14) ELSE
      '0';

  reg_enb_wr_rst_reg <= decode_sel_wr_rst_reg AND wr_enb;

  reg_wr_rst_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_wr_rst_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_rst_reg = '1' THEN
        write_reg_wr_rst_reg <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_wr_rst_reg_process;


  write_wr_rst_reg <= std_logic_vector(write_reg_wr_rst_reg);

  data_in_wr_rx_data_src_path <= data_write_unsigned(2 DOWNTO 0);

  
  decode_sel_wr_rx_data_src_path <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001001101#, 14) ELSE
      '0';

  reg_enb_wr_rx_data_src_path <= decode_sel_wr_rx_data_src_path AND wr_enb;

  reg_wr_rx_data_src_path_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_wr_rx_data_src_path <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_rx_data_src_path = '1' THEN
        write_reg_wr_rx_data_src_path <= data_in_wr_rx_data_src_path;
      END IF;
    END IF;
  END PROCESS reg_wr_rx_data_src_path_process;


  write_wr_rx_data_src_path <= std_logic_vector(write_reg_wr_rx_data_src_path);

  
  decode_sel_wr_txstrmenb_reg <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001001111#, 14) ELSE
      '0';

  reg_enb_wr_txstrmenb_reg <= decode_sel_wr_txstrmenb_reg AND wr_enb;

  reg_wr_txstrmenb_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_wr_txstrmenb_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_txstrmenb_reg = '1' THEN
        write_reg_wr_txstrmenb_reg <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_wr_txstrmenb_reg_process;


  write_wr_txstrmenb_reg <= std_logic_vector(write_reg_wr_txstrmenb_reg);

  data_in_wr_tx_data_src_path <= data_write_unsigned(2 DOWNTO 0);

  
  decode_sel_wr_tx_data_src_path <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001010001#, 14) ELSE
      '0';

  reg_enb_wr_tx_data_src_path <= decode_sel_wr_tx_data_src_path AND wr_enb;

  reg_wr_tx_data_src_path_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_wr_tx_data_src_path <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_tx_data_src_path = '1' THEN
        write_reg_wr_tx_data_src_path <= data_in_wr_tx_data_src_path;
      END IF;
    END IF;
  END PROCESS reg_wr_tx_data_src_path_process;


  write_wr_tx_data_src_path <= std_logic_vector(write_reg_wr_tx_data_src_path);

END rtl;

