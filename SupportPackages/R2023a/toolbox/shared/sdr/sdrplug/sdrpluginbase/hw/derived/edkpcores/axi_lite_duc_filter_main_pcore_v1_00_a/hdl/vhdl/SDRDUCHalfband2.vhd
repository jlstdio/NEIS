-- -------------------------------------------------------------
--
-- Module: SDRDUCHalfband2
-- Generated by MATLAB(R) 8.2 and the Filter Design HDL Coder 2.9.4.
-- Generated on: 2013-11-18 08:45:52
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- ResetType: Synchronous
-- FIRAdderStyle: tree
-- MultiplierInputPipeline: 2
-- MultiplierOutputPipeline: 2
-- OptimizeForHDL: on
-- EDAScriptGeneration: off
-- AddPipelineRegisters: on
-- Name: SDRDUCHalfband2
-- InputComplex: on
-- GenerateHDLTestBench: off

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Multipliers           : 7
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure      : Direct-Form FIR Polyphase Interpolator
-- Interpolation Factor  : 2
-- Polyphase Length      : 14
-- Filter Length         : 27
-- Stable                : Yes
-- Linear Phase          : Yes (Type 1)
--
-- Arithmetic            : fixed
-- Numerator             : s16,15 -> [-1 1)
-- Input                 : s18,16 -> [-2 2)
-- Filter Internals      : Specify Precision
--   Output              : s18,16 -> [-2 2)
--   Product             : s33,31 -> [-2 2)
--   Accumulator         : s34,31 -> [-4 4)
--   Round Mode          : nearest
--   Overflow Mode       : wrap
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY SDRDUCHalfband2 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in_re                    :   IN    std_logic_vector(17 DOWNTO 0); -- sfix18_En16
         filter_in_im                    :   IN    std_logic_vector(17 DOWNTO 0); -- sfix18_En16
         filter_out_re                   :   OUT   std_logic_vector(17 DOWNTO 0); -- sfix18_En16
         filter_out_im                   :   OUT   std_logic_vector(17 DOWNTO 0); -- sfix18_En16
         ce_out                          :   OUT   std_logic  
         );

END SDRDUCHalfband2;


----------------------------------------------------------------
--Module Architecture: SDRDUCHalfband2
----------------------------------------------------------------
ARCHITECTURE rtl OF SDRDUCHalfband2 IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(17 DOWNTO 0); -- sfix18_En16
  TYPE sumdelay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(33 DOWNTO 0); -- sfix34_En31
  -- Constants
  CONSTANT coeffphase1_1                  : signed(15 DOWNTO 0) := to_signed(19, 16); -- sfix16_En15
  CONSTANT coeffphase1_2                  : signed(15 DOWNTO 0) := to_signed(-110, 16); -- sfix16_En15
  CONSTANT coeffphase1_3                  : signed(15 DOWNTO 0) := to_signed(391, 16); -- sfix16_En15
  CONSTANT coeffphase1_4                  : signed(15 DOWNTO 0) := to_signed(-1064, 16); -- sfix16_En15
  CONSTANT coeffphase1_5                  : signed(15 DOWNTO 0) := to_signed(2504, 16); -- sfix16_En15
  CONSTANT coeffphase1_6                  : signed(15 DOWNTO 0) := to_signed(-5805, 16); -- sfix16_En15
  CONSTANT coeffphase1_7                  : signed(15 DOWNTO 0) := to_signed(20448, 16); -- sfix16_En15
  CONSTANT coeffphase1_8                  : signed(15 DOWNTO 0) := to_signed(20448, 16); -- sfix16_En15
  CONSTANT coeffphase1_9                  : signed(15 DOWNTO 0) := to_signed(-5805, 16); -- sfix16_En15
  CONSTANT coeffphase1_10                 : signed(15 DOWNTO 0) := to_signed(2504, 16); -- sfix16_En15
  CONSTANT coeffphase1_11                 : signed(15 DOWNTO 0) := to_signed(-1064, 16); -- sfix16_En15
  CONSTANT coeffphase1_12                 : signed(15 DOWNTO 0) := to_signed(391, 16); -- sfix16_En15
  CONSTANT coeffphase1_13                 : signed(15 DOWNTO 0) := to_signed(-110, 16); -- sfix16_En15
  CONSTANT coeffphase1_14                 : signed(15 DOWNTO 0) := to_signed(19, 16); -- sfix16_En15
  CONSTANT coeffphase2_1                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_2                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_3                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_4                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_5                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_6                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_7                  : signed(15 DOWNTO 0) := to_signed(32764, 16); -- sfix16_En15
  CONSTANT coeffphase2_8                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_9                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_10                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_11                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_12                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_13                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15
  CONSTANT coeffphase2_14                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15

  -- Signals
  SIGNAL cur_count                        : unsigned(1 DOWNTO 0); -- ufix2
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL delay_pipeline_re                : delay_pipeline_type(0 TO 13); -- sfix18_En16
  SIGNAL delay_pipeline_im                : delay_pipeline_type(0 TO 13); -- sfix18_En16
  SIGNAL product_re                       : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_im                       : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux                      : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_13_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_13_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_13_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_13_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_pipe                 : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_pipe_1               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_re_pipe_re               : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_re_pipe_im               : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_re_pipe_1_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_re_pipe_1_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_1_re                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_1_im                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_1                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_12_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_12_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_12_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_12_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_1_pipe               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_1_pipe_1             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_1_re_pipe_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_1_re_pipe_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_1_re_pipe_1_re           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_1_re_pipe_1_im           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_2_re                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_2_im                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_2                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_11_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_11_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_11_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_11_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_2_pipe               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_2_pipe_1             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_2_re_pipe_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_2_re_pipe_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_2_re_pipe_1_re           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_2_re_pipe_1_im           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_3_re                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_3_im                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_3                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_10_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_10_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_10_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_10_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_3_pipe               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_3_pipe_1             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_3_re_pipe_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_3_re_pipe_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_3_re_pipe_1_re           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_3_re_pipe_1_im           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_4_re                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_4_im                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_4                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_9_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_9_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_9_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_9_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_4_pipe               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_4_pipe_1             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_4_re_pipe_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_4_re_pipe_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_4_re_pipe_1_re           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_4_re_pipe_1_im           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_5_re                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_5_im                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_5                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_8_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_8_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_8_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_8_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_5_pipe               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_5_pipe_1             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_5_re_pipe_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_5_re_pipe_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_5_re_pipe_1_re           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_5_re_pipe_1_im           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_6_re                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_6_im                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_6                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_7_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_7_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_7_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_7_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_6_pipe               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_6_pipe_1             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_6_re_pipe_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_6_re_pipe_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_6_re_pipe_1_re           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_6_re_pipe_1_im           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_7_re                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_7_im                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_7                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_6_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_6_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_6_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_6_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_7_pipe               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_7_pipe_1             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_7_re_pipe_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_7_re_pipe_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_7_re_pipe_1_re           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_7_re_pipe_1_im           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_8_re                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_8_im                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_8                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_5_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_5_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_5_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_5_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_8_pipe               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_8_pipe_1             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_8_re_pipe_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_8_re_pipe_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_8_re_pipe_1_re           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_8_re_pipe_1_im           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_9_re                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_9_im                     : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_9                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_4_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_4_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_4_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_4_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_9_pipe               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_9_pipe_1             : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_9_re_pipe_re             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_9_re_pipe_im             : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_9_re_pipe_1_re           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_9_re_pipe_1_im           : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_10_re                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_10_im                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_10                   : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_3_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_3_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_3_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_3_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_10_pipe              : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_10_pipe_1            : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_10_re_pipe_re            : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_10_re_pipe_im            : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_10_re_pipe_1_re          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_10_re_pipe_1_im          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_11_re                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_11_im                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_11                   : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_2_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_2_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_2_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_2_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_11_pipe              : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_11_pipe_1            : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_11_re_pipe_re            : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_11_re_pipe_im            : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_11_re_pipe_1_re          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_11_re_pipe_1_im          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_12_re                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_12_im                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_12                   : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_1_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_1_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_1_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_1_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_12_pipe              : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_12_pipe_1            : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_12_re_pipe_re            : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_12_re_pipe_im            : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_12_re_pipe_1_re          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_12_re_pipe_1_im          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_13_re                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_13_im                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product_mux_13                   : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL delay_pipeline_re_0_under_pipe_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_0_under_pipe_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_0_under_pipe_1_re : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL delay_pipeline_re_0_under_pipe_1_im : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product_mux_13_pipe              : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_mux_13_pipe_1            : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product_13_re_pipe_re            : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_13_re_pipe_im            : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_13_re_pipe_1_re          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL product_13_re_pipe_1_im          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sumvector1_re                    : sumdelay_pipeline_type(0 TO 6); -- sfix34_En31
  SIGNAL sumvector1_im                    : sumdelay_pipeline_type(0 TO 6); -- sfix34_En31
  SIGNAL sumdelay_pipeline1_re            : sumdelay_pipeline_type(0 TO 6); -- sfix34_En31
  SIGNAL sumdelay_pipeline1_im            : sumdelay_pipeline_type(0 TO 6); -- sfix34_En31
  SIGNAL sumvector2_re                    : sumdelay_pipeline_type(0 TO 3); -- sfix34_En31
  SIGNAL sumvector2_im                    : sumdelay_pipeline_type(0 TO 3); -- sfix34_En31
  SIGNAL add_temp                         : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL add_temp_1                       : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL add_temp_2                       : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL add_temp_3                       : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL add_temp_4                       : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL add_temp_5                       : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL sumdelay_pipeline2_re            : sumdelay_pipeline_type(0 TO 3); -- sfix34_En31
  SIGNAL sumdelay_pipeline2_im            : sumdelay_pipeline_type(0 TO 3); -- sfix34_En31
  SIGNAL sumvector3_re                    : sumdelay_pipeline_type(0 TO 1); -- sfix34_En31
  SIGNAL sumvector3_im                    : sumdelay_pipeline_type(0 TO 1); -- sfix34_En31
  SIGNAL add_temp_6                       : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL add_temp_7                       : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL add_temp_8                       : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL add_temp_9                       : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL sumdelay_pipeline3_re            : sumdelay_pipeline_type(0 TO 1); -- sfix34_En31
  SIGNAL sumdelay_pipeline3_im            : sumdelay_pipeline_type(0 TO 1); -- sfix34_En31
  SIGNAL sum4_re                          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum4_im                          : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL add_temp_10                      : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL add_temp_11                      : signed(34 DOWNTO 0); -- sfix35_En31
  SIGNAL output_typeconvert_re            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL output_typeconvert_im            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL output_register_re               : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL output_register_im               : signed(17 DOWNTO 0); -- sfix18_En16


BEGIN

  -- Block Statements
  ce_output : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        cur_count <= to_unsigned(0, 2);
      ELSIF clk_enable = '1' THEN
        IF cur_count = to_unsigned(1, 2) THEN
          cur_count <= to_unsigned(0, 2);
        ELSE
          cur_count <= cur_count + 1;
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_1 <= '1' WHEN cur_count = to_unsigned(1, 2) AND clk_enable = '1' ELSE '0';

  --   ---------------- Delay Registers ----------------

  Delay_Pipeline_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re(0 TO 13) <= (OTHERS => (OTHERS => '0'));
      delay_pipeline_im(0 TO 13) <= (OTHERS => (OTHERS => '0'));
      ELSIF phase_1 = '1' THEN
        delay_pipeline_re(0) <= signed(filter_in_re);
        delay_pipeline_re(1 TO 13) <= delay_pipeline_re(0 TO 12);
        delay_pipeline_im(0) <= signed(filter_in_im);
        delay_pipeline_im(1 TO 13) <= delay_pipeline_im(0 TO 12);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  product_mux <= coeffphase1_14 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                      coeffphase2_14;
  temp_process1 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_13_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_13_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_13_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_13_under_pipe_1_im <= (OTHERS => '0');
        product_mux_pipe <= (OTHERS => '0');
        product_mux_pipe_1 <= (OTHERS => '0');
        product_re_pipe_re <= (OTHERS => '0');
        product_re_pipe_im <= (OTHERS => '0');
        product_re_pipe_1_re <= (OTHERS => '0');
        product_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_13_under_pipe_re <= delay_pipeline_re(13);
        delay_pipeline_re_13_under_pipe_im <= delay_pipeline_im(13);
        delay_pipeline_re_13_under_pipe_1_re <= delay_pipeline_re_13_under_pipe_re;
        delay_pipeline_re_13_under_pipe_1_im <= delay_pipeline_re_13_under_pipe_im;
        product_mux_pipe <= product_mux;
        product_mux_pipe_1 <= product_mux_pipe;

        product_re_pipe_re <= delay_pipeline_re_13_under_pipe_1_re * product_mux_pipe_1;
        product_re_pipe_im <= delay_pipeline_re_13_under_pipe_1_im * product_mux_pipe_1;

        product_re_pipe_1_re <= product_re_pipe_re;
        product_re_pipe_1_im <= product_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process1;

  product_re <= product_re_pipe_1_re(32 DOWNTO 0);
  product_im <= product_re_pipe_1_im(32 DOWNTO 0);

  product_mux_1 <= coeffphase1_13 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                        coeffphase2_13;
  temp_process2 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_12_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_12_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_12_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_12_under_pipe_1_im <= (OTHERS => '0');
        product_mux_1_pipe <= (OTHERS => '0');
        product_mux_1_pipe_1 <= (OTHERS => '0');
        product_1_re_pipe_re <= (OTHERS => '0');
        product_1_re_pipe_im <= (OTHERS => '0');
        product_1_re_pipe_1_re <= (OTHERS => '0');
        product_1_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_12_under_pipe_re <= delay_pipeline_re(12);
        delay_pipeline_re_12_under_pipe_im <= delay_pipeline_im(12);
        delay_pipeline_re_12_under_pipe_1_re <= delay_pipeline_re_12_under_pipe_re;
        delay_pipeline_re_12_under_pipe_1_im <= delay_pipeline_re_12_under_pipe_im;
        product_mux_1_pipe <= product_mux_1;
        product_mux_1_pipe_1 <= product_mux_1_pipe;

        product_1_re_pipe_re <= delay_pipeline_re_12_under_pipe_1_re * product_mux_1_pipe_1;
        product_1_re_pipe_im <= delay_pipeline_re_12_under_pipe_1_im * product_mux_1_pipe_1;

        product_1_re_pipe_1_re <= product_1_re_pipe_re;
        product_1_re_pipe_1_im <= product_1_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process2;

  product_1_re <= product_1_re_pipe_1_re(32 DOWNTO 0);
  product_1_im <= product_1_re_pipe_1_im(32 DOWNTO 0);

  product_mux_2 <= coeffphase1_12 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                        coeffphase2_12;
  temp_process3 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_11_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_11_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_11_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_11_under_pipe_1_im <= (OTHERS => '0');
        product_mux_2_pipe <= (OTHERS => '0');
        product_mux_2_pipe_1 <= (OTHERS => '0');
        product_2_re_pipe_re <= (OTHERS => '0');
        product_2_re_pipe_im <= (OTHERS => '0');
        product_2_re_pipe_1_re <= (OTHERS => '0');
        product_2_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_11_under_pipe_re <= delay_pipeline_re(11);
        delay_pipeline_re_11_under_pipe_im <= delay_pipeline_im(11);
        delay_pipeline_re_11_under_pipe_1_re <= delay_pipeline_re_11_under_pipe_re;
        delay_pipeline_re_11_under_pipe_1_im <= delay_pipeline_re_11_under_pipe_im;
        product_mux_2_pipe <= product_mux_2;
        product_mux_2_pipe_1 <= product_mux_2_pipe;

        product_2_re_pipe_re <= delay_pipeline_re_11_under_pipe_1_re * product_mux_2_pipe_1;
        product_2_re_pipe_im <= delay_pipeline_re_11_under_pipe_1_im * product_mux_2_pipe_1;

        product_2_re_pipe_1_re <= product_2_re_pipe_re;
        product_2_re_pipe_1_im <= product_2_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process3;

  product_2_re <= product_2_re_pipe_1_re(32 DOWNTO 0);
  product_2_im <= product_2_re_pipe_1_im(32 DOWNTO 0);

  product_mux_3 <= coeffphase1_11 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                        coeffphase2_11;
  temp_process4 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_10_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_10_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_10_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_10_under_pipe_1_im <= (OTHERS => '0');
        product_mux_3_pipe <= (OTHERS => '0');
        product_mux_3_pipe_1 <= (OTHERS => '0');
        product_3_re_pipe_re <= (OTHERS => '0');
        product_3_re_pipe_im <= (OTHERS => '0');
        product_3_re_pipe_1_re <= (OTHERS => '0');
        product_3_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_10_under_pipe_re <= delay_pipeline_re(10);
        delay_pipeline_re_10_under_pipe_im <= delay_pipeline_im(10);
        delay_pipeline_re_10_under_pipe_1_re <= delay_pipeline_re_10_under_pipe_re;
        delay_pipeline_re_10_under_pipe_1_im <= delay_pipeline_re_10_under_pipe_im;
        product_mux_3_pipe <= product_mux_3;
        product_mux_3_pipe_1 <= product_mux_3_pipe;

        product_3_re_pipe_re <= delay_pipeline_re_10_under_pipe_1_re * product_mux_3_pipe_1;
        product_3_re_pipe_im <= delay_pipeline_re_10_under_pipe_1_im * product_mux_3_pipe_1;

        product_3_re_pipe_1_re <= product_3_re_pipe_re;
        product_3_re_pipe_1_im <= product_3_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process4;

  product_3_re <= product_3_re_pipe_1_re(32 DOWNTO 0);
  product_3_im <= product_3_re_pipe_1_im(32 DOWNTO 0);

  product_mux_4 <= coeffphase1_10 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                        coeffphase2_10;
  temp_process5 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_9_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_9_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_9_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_9_under_pipe_1_im <= (OTHERS => '0');
        product_mux_4_pipe <= (OTHERS => '0');
        product_mux_4_pipe_1 <= (OTHERS => '0');
        product_4_re_pipe_re <= (OTHERS => '0');
        product_4_re_pipe_im <= (OTHERS => '0');
        product_4_re_pipe_1_re <= (OTHERS => '0');
        product_4_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_9_under_pipe_re <= delay_pipeline_re(9);
        delay_pipeline_re_9_under_pipe_im <= delay_pipeline_im(9);
        delay_pipeline_re_9_under_pipe_1_re <= delay_pipeline_re_9_under_pipe_re;
        delay_pipeline_re_9_under_pipe_1_im <= delay_pipeline_re_9_under_pipe_im;
        product_mux_4_pipe <= product_mux_4;
        product_mux_4_pipe_1 <= product_mux_4_pipe;

        product_4_re_pipe_re <= delay_pipeline_re_9_under_pipe_1_re * product_mux_4_pipe_1;
        product_4_re_pipe_im <= delay_pipeline_re_9_under_pipe_1_im * product_mux_4_pipe_1;

        product_4_re_pipe_1_re <= product_4_re_pipe_re;
        product_4_re_pipe_1_im <= product_4_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process5;

  product_4_re <= product_4_re_pipe_1_re(32 DOWNTO 0);
  product_4_im <= product_4_re_pipe_1_im(32 DOWNTO 0);

  product_mux_5 <= coeffphase1_9 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                        coeffphase2_9;
  temp_process6 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_8_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_8_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_8_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_8_under_pipe_1_im <= (OTHERS => '0');
        product_mux_5_pipe <= (OTHERS => '0');
        product_mux_5_pipe_1 <= (OTHERS => '0');
        product_5_re_pipe_re <= (OTHERS => '0');
        product_5_re_pipe_im <= (OTHERS => '0');
        product_5_re_pipe_1_re <= (OTHERS => '0');
        product_5_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_8_under_pipe_re <= delay_pipeline_re(8);
        delay_pipeline_re_8_under_pipe_im <= delay_pipeline_im(8);
        delay_pipeline_re_8_under_pipe_1_re <= delay_pipeline_re_8_under_pipe_re;
        delay_pipeline_re_8_under_pipe_1_im <= delay_pipeline_re_8_under_pipe_im;
        product_mux_5_pipe <= product_mux_5;
        product_mux_5_pipe_1 <= product_mux_5_pipe;

        product_5_re_pipe_re <= delay_pipeline_re_8_under_pipe_1_re * product_mux_5_pipe_1;
        product_5_re_pipe_im <= delay_pipeline_re_8_under_pipe_1_im * product_mux_5_pipe_1;

        product_5_re_pipe_1_re <= product_5_re_pipe_re;
        product_5_re_pipe_1_im <= product_5_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process6;

  product_5_re <= product_5_re_pipe_1_re(32 DOWNTO 0);
  product_5_im <= product_5_re_pipe_1_im(32 DOWNTO 0);

  product_mux_6 <= coeffphase1_8 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                        coeffphase2_8;
  temp_process7 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_7_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_7_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_7_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_7_under_pipe_1_im <= (OTHERS => '0');
        product_mux_6_pipe <= (OTHERS => '0');
        product_mux_6_pipe_1 <= (OTHERS => '0');
        product_6_re_pipe_re <= (OTHERS => '0');
        product_6_re_pipe_im <= (OTHERS => '0');
        product_6_re_pipe_1_re <= (OTHERS => '0');
        product_6_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_7_under_pipe_re <= delay_pipeline_re(7);
        delay_pipeline_re_7_under_pipe_im <= delay_pipeline_im(7);
        delay_pipeline_re_7_under_pipe_1_re <= delay_pipeline_re_7_under_pipe_re;
        delay_pipeline_re_7_under_pipe_1_im <= delay_pipeline_re_7_under_pipe_im;
        product_mux_6_pipe <= product_mux_6;
        product_mux_6_pipe_1 <= product_mux_6_pipe;

        product_6_re_pipe_re <= delay_pipeline_re_7_under_pipe_1_re * product_mux_6_pipe_1;
        product_6_re_pipe_im <= delay_pipeline_re_7_under_pipe_1_im * product_mux_6_pipe_1;

        product_6_re_pipe_1_re <= product_6_re_pipe_re;
        product_6_re_pipe_1_im <= product_6_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process7;

  product_6_re <= product_6_re_pipe_1_re(32 DOWNTO 0);
  product_6_im <= product_6_re_pipe_1_im(32 DOWNTO 0);

  product_mux_7 <= coeffphase1_7 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                        coeffphase2_7;
  temp_process8 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_6_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_6_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_6_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_6_under_pipe_1_im <= (OTHERS => '0');
        product_mux_7_pipe <= (OTHERS => '0');
        product_mux_7_pipe_1 <= (OTHERS => '0');
        product_7_re_pipe_re <= (OTHERS => '0');
        product_7_re_pipe_im <= (OTHERS => '0');
        product_7_re_pipe_1_re <= (OTHERS => '0');
        product_7_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_6_under_pipe_re <= delay_pipeline_re(6);
        delay_pipeline_re_6_under_pipe_im <= delay_pipeline_im(6);
        delay_pipeline_re_6_under_pipe_1_re <= delay_pipeline_re_6_under_pipe_re;
        delay_pipeline_re_6_under_pipe_1_im <= delay_pipeline_re_6_under_pipe_im;
        product_mux_7_pipe <= product_mux_7;
        product_mux_7_pipe_1 <= product_mux_7_pipe;

        product_7_re_pipe_re <= delay_pipeline_re_6_under_pipe_1_re * product_mux_7_pipe_1;
        product_7_re_pipe_im <= delay_pipeline_re_6_under_pipe_1_im * product_mux_7_pipe_1;

        product_7_re_pipe_1_re <= product_7_re_pipe_re;
        product_7_re_pipe_1_im <= product_7_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process8;

  product_7_re <= product_7_re_pipe_1_re(32 DOWNTO 0);
  product_7_im <= product_7_re_pipe_1_im(32 DOWNTO 0);

  product_mux_8 <= coeffphase1_6 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                        coeffphase2_6;
  temp_process9 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_5_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_5_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_5_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_5_under_pipe_1_im <= (OTHERS => '0');
        product_mux_8_pipe <= (OTHERS => '0');
        product_mux_8_pipe_1 <= (OTHERS => '0');
        product_8_re_pipe_re <= (OTHERS => '0');
        product_8_re_pipe_im <= (OTHERS => '0');
        product_8_re_pipe_1_re <= (OTHERS => '0');
        product_8_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_5_under_pipe_re <= delay_pipeline_re(5);
        delay_pipeline_re_5_under_pipe_im <= delay_pipeline_im(5);
        delay_pipeline_re_5_under_pipe_1_re <= delay_pipeline_re_5_under_pipe_re;
        delay_pipeline_re_5_under_pipe_1_im <= delay_pipeline_re_5_under_pipe_im;
        product_mux_8_pipe <= product_mux_8;
        product_mux_8_pipe_1 <= product_mux_8_pipe;

        product_8_re_pipe_re <= delay_pipeline_re_5_under_pipe_1_re * product_mux_8_pipe_1;
        product_8_re_pipe_im <= delay_pipeline_re_5_under_pipe_1_im * product_mux_8_pipe_1;

        product_8_re_pipe_1_re <= product_8_re_pipe_re;
        product_8_re_pipe_1_im <= product_8_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process9;

  product_8_re <= product_8_re_pipe_1_re(32 DOWNTO 0);
  product_8_im <= product_8_re_pipe_1_im(32 DOWNTO 0);

  product_mux_9 <= coeffphase1_5 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                        coeffphase2_5;
  temp_process10 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_4_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_4_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_4_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_4_under_pipe_1_im <= (OTHERS => '0');
        product_mux_9_pipe <= (OTHERS => '0');
        product_mux_9_pipe_1 <= (OTHERS => '0');
        product_9_re_pipe_re <= (OTHERS => '0');
        product_9_re_pipe_im <= (OTHERS => '0');
        product_9_re_pipe_1_re <= (OTHERS => '0');
        product_9_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_4_under_pipe_re <= delay_pipeline_re(4);
        delay_pipeline_re_4_under_pipe_im <= delay_pipeline_im(4);
        delay_pipeline_re_4_under_pipe_1_re <= delay_pipeline_re_4_under_pipe_re;
        delay_pipeline_re_4_under_pipe_1_im <= delay_pipeline_re_4_under_pipe_im;
        product_mux_9_pipe <= product_mux_9;
        product_mux_9_pipe_1 <= product_mux_9_pipe;

        product_9_re_pipe_re <= delay_pipeline_re_4_under_pipe_1_re * product_mux_9_pipe_1;
        product_9_re_pipe_im <= delay_pipeline_re_4_under_pipe_1_im * product_mux_9_pipe_1;

        product_9_re_pipe_1_re <= product_9_re_pipe_re;
        product_9_re_pipe_1_im <= product_9_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process10;

  product_9_re <= product_9_re_pipe_1_re(32 DOWNTO 0);
  product_9_im <= product_9_re_pipe_1_im(32 DOWNTO 0);

  product_mux_10 <= coeffphase1_4 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                         coeffphase2_4;
  temp_process11 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_3_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_3_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_3_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_3_under_pipe_1_im <= (OTHERS => '0');
        product_mux_10_pipe <= (OTHERS => '0');
        product_mux_10_pipe_1 <= (OTHERS => '0');
        product_10_re_pipe_re <= (OTHERS => '0');
        product_10_re_pipe_im <= (OTHERS => '0');
        product_10_re_pipe_1_re <= (OTHERS => '0');
        product_10_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_3_under_pipe_re <= delay_pipeline_re(3);
        delay_pipeline_re_3_under_pipe_im <= delay_pipeline_im(3);
        delay_pipeline_re_3_under_pipe_1_re <= delay_pipeline_re_3_under_pipe_re;
        delay_pipeline_re_3_under_pipe_1_im <= delay_pipeline_re_3_under_pipe_im;
        product_mux_10_pipe <= product_mux_10;
        product_mux_10_pipe_1 <= product_mux_10_pipe;

        product_10_re_pipe_re <= delay_pipeline_re_3_under_pipe_1_re * product_mux_10_pipe_1;
        product_10_re_pipe_im <= delay_pipeline_re_3_under_pipe_1_im * product_mux_10_pipe_1;

        product_10_re_pipe_1_re <= product_10_re_pipe_re;
        product_10_re_pipe_1_im <= product_10_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process11;

  product_10_re <= product_10_re_pipe_1_re(32 DOWNTO 0);
  product_10_im <= product_10_re_pipe_1_im(32 DOWNTO 0);

  product_mux_11 <= coeffphase1_3 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                         coeffphase2_3;
  temp_process12 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_2_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_2_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_2_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_2_under_pipe_1_im <= (OTHERS => '0');
        product_mux_11_pipe <= (OTHERS => '0');
        product_mux_11_pipe_1 <= (OTHERS => '0');
        product_11_re_pipe_re <= (OTHERS => '0');
        product_11_re_pipe_im <= (OTHERS => '0');
        product_11_re_pipe_1_re <= (OTHERS => '0');
        product_11_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_2_under_pipe_re <= delay_pipeline_re(2);
        delay_pipeline_re_2_under_pipe_im <= delay_pipeline_im(2);
        delay_pipeline_re_2_under_pipe_1_re <= delay_pipeline_re_2_under_pipe_re;
        delay_pipeline_re_2_under_pipe_1_im <= delay_pipeline_re_2_under_pipe_im;
        product_mux_11_pipe <= product_mux_11;
        product_mux_11_pipe_1 <= product_mux_11_pipe;

        product_11_re_pipe_re <= delay_pipeline_re_2_under_pipe_1_re * product_mux_11_pipe_1;
        product_11_re_pipe_im <= delay_pipeline_re_2_under_pipe_1_im * product_mux_11_pipe_1;

        product_11_re_pipe_1_re <= product_11_re_pipe_re;
        product_11_re_pipe_1_im <= product_11_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process12;

  product_11_re <= product_11_re_pipe_1_re(32 DOWNTO 0);
  product_11_im <= product_11_re_pipe_1_im(32 DOWNTO 0);

  product_mux_12 <= coeffphase1_2 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                         coeffphase2_2;
  temp_process13 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_1_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_1_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_1_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_1_under_pipe_1_im <= (OTHERS => '0');
        product_mux_12_pipe <= (OTHERS => '0');
        product_mux_12_pipe_1 <= (OTHERS => '0');
        product_12_re_pipe_re <= (OTHERS => '0');
        product_12_re_pipe_im <= (OTHERS => '0');
        product_12_re_pipe_1_re <= (OTHERS => '0');
        product_12_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_1_under_pipe_re <= delay_pipeline_re(1);
        delay_pipeline_re_1_under_pipe_im <= delay_pipeline_im(1);
        delay_pipeline_re_1_under_pipe_1_re <= delay_pipeline_re_1_under_pipe_re;
        delay_pipeline_re_1_under_pipe_1_im <= delay_pipeline_re_1_under_pipe_im;
        product_mux_12_pipe <= product_mux_12;
        product_mux_12_pipe_1 <= product_mux_12_pipe;

        product_12_re_pipe_re <= delay_pipeline_re_1_under_pipe_1_re * product_mux_12_pipe_1;
        product_12_re_pipe_im <= delay_pipeline_re_1_under_pipe_1_im * product_mux_12_pipe_1;

        product_12_re_pipe_1_re <= product_12_re_pipe_re;
        product_12_re_pipe_1_im <= product_12_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process13;

  product_12_re <= product_12_re_pipe_1_re(32 DOWNTO 0);
  product_12_im <= product_12_re_pipe_1_im(32 DOWNTO 0);

  product_mux_13 <= coeffphase1_1 WHEN ( cur_count = to_unsigned(0, 2) ) ELSE
                         coeffphase2_1;
  temp_process14 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        delay_pipeline_re_0_under_pipe_re <= (OTHERS => '0');
        delay_pipeline_re_0_under_pipe_im <= (OTHERS => '0');
        delay_pipeline_re_0_under_pipe_1_re <= (OTHERS => '0');
        delay_pipeline_re_0_under_pipe_1_im <= (OTHERS => '0');
        product_mux_13_pipe <= (OTHERS => '0');
        product_mux_13_pipe_1 <= (OTHERS => '0');
        product_13_re_pipe_re <= (OTHERS => '0');
        product_13_re_pipe_im <= (OTHERS => '0');
        product_13_re_pipe_1_re <= (OTHERS => '0');
        product_13_re_pipe_1_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        delay_pipeline_re_0_under_pipe_re <= delay_pipeline_re(0);
        delay_pipeline_re_0_under_pipe_im <= delay_pipeline_im(0);
        delay_pipeline_re_0_under_pipe_1_re <= delay_pipeline_re_0_under_pipe_re;
        delay_pipeline_re_0_under_pipe_1_im <= delay_pipeline_re_0_under_pipe_im;
        product_mux_13_pipe <= product_mux_13;
        product_mux_13_pipe_1 <= product_mux_13_pipe;

        product_13_re_pipe_re <= delay_pipeline_re_0_under_pipe_1_re * product_mux_13_pipe_1;
        product_13_re_pipe_im <= delay_pipeline_re_0_under_pipe_1_im * product_mux_13_pipe_1;

        product_13_re_pipe_1_re <= product_13_re_pipe_re;
        product_13_re_pipe_1_im <= product_13_re_pipe_im;
      END IF;
    END IF;
  END PROCESS temp_process14;

  product_13_re <= product_13_re_pipe_1_re(32 DOWNTO 0);
  product_13_im <= product_13_re_pipe_1_im(32 DOWNTO 0);

  sumvector1_re(0) <= resize(product_re, 34) + resize(product_1_re, 34);

  sumvector1_im(0) <= resize(product_im, 34) + resize(product_1_im, 34);

  sumvector1_re(1) <= resize(product_2_re, 34) + resize(product_3_re, 34);

  sumvector1_im(1) <= resize(product_2_im, 34) + resize(product_3_im, 34);

  sumvector1_re(2) <= resize(product_4_re, 34) + resize(product_5_re, 34);

  sumvector1_im(2) <= resize(product_4_im, 34) + resize(product_5_im, 34);

  sumvector1_re(3) <= resize(product_6_re, 34) + resize(product_7_re, 34);

  sumvector1_im(3) <= resize(product_6_im, 34) + resize(product_7_im, 34);

  sumvector1_re(4) <= resize(product_8_re, 34) + resize(product_9_re, 34);

  sumvector1_im(4) <= resize(product_8_im, 34) + resize(product_9_im, 34);

  sumvector1_re(5) <= resize(product_10_re, 34) + resize(product_11_re, 34);

  sumvector1_im(5) <= resize(product_10_im, 34) + resize(product_11_im, 34);

  sumvector1_re(6) <= resize(product_12_re, 34) + resize(product_13_re, 34);

  sumvector1_im(6) <= resize(product_12_im, 34) + resize(product_13_im, 34);

  sumdelay_pipeline_process1 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        sumdelay_pipeline1_re <= (OTHERS => (OTHERS => '0'));
        sumdelay_pipeline1_im <= (OTHERS => (OTHERS => '0'));
      ELSIF clk_enable = '1' THEN
        sumdelay_pipeline1_re(0 TO 6) <= sumvector1_re(0 TO 6);
        sumdelay_pipeline1_im(0 TO 6) <= sumvector1_im(0 TO 6);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process1;

  add_temp <= resize(sumdelay_pipeline1_re(0), 35) + resize(sumdelay_pipeline1_re(1), 35);
  sumvector2_re(0) <= add_temp(33 DOWNTO 0);

  add_temp_1 <= resize(sumdelay_pipeline1_im(0), 35) + resize(sumdelay_pipeline1_im(1), 35);
  sumvector2_im(0) <= add_temp_1(33 DOWNTO 0);

  add_temp_2 <= resize(sumdelay_pipeline1_re(2), 35) + resize(sumdelay_pipeline1_re(3), 35);
  sumvector2_re(1) <= add_temp_2(33 DOWNTO 0);

  add_temp_3 <= resize(sumdelay_pipeline1_im(2), 35) + resize(sumdelay_pipeline1_im(3), 35);
  sumvector2_im(1) <= add_temp_3(33 DOWNTO 0);

  add_temp_4 <= resize(sumdelay_pipeline1_re(4), 35) + resize(sumdelay_pipeline1_re(5), 35);
  sumvector2_re(2) <= add_temp_4(33 DOWNTO 0);

  add_temp_5 <= resize(sumdelay_pipeline1_im(4), 35) + resize(sumdelay_pipeline1_im(5), 35);
  sumvector2_im(2) <= add_temp_5(33 DOWNTO 0);

  sumvector2_re(3) <= sumdelay_pipeline1_re(6);
  sumvector2_im(3) <= sumdelay_pipeline1_im(6);

  sumdelay_pipeline_process2 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        sumdelay_pipeline2_re <= (OTHERS => (OTHERS => '0'));
        sumdelay_pipeline2_im <= (OTHERS => (OTHERS => '0'));
      ELSIF clk_enable = '1' THEN
        sumdelay_pipeline2_re(0 TO 3) <= sumvector2_re(0 TO 3);
        sumdelay_pipeline2_im(0 TO 3) <= sumvector2_im(0 TO 3);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process2;

  add_temp_6 <= resize(sumdelay_pipeline2_re(0), 35) + resize(sumdelay_pipeline2_re(1), 35);
  sumvector3_re(0) <= add_temp_6(33 DOWNTO 0);

  add_temp_7 <= resize(sumdelay_pipeline2_im(0), 35) + resize(sumdelay_pipeline2_im(1), 35);
  sumvector3_im(0) <= add_temp_7(33 DOWNTO 0);

  add_temp_8 <= resize(sumdelay_pipeline2_re(2), 35) + resize(sumdelay_pipeline2_re(3), 35);
  sumvector3_re(1) <= add_temp_8(33 DOWNTO 0);

  add_temp_9 <= resize(sumdelay_pipeline2_im(2), 35) + resize(sumdelay_pipeline2_im(3), 35);
  sumvector3_im(1) <= add_temp_9(33 DOWNTO 0);

  sumdelay_pipeline_process3 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        sumdelay_pipeline3_re <= (OTHERS => (OTHERS => '0'));
        sumdelay_pipeline3_im <= (OTHERS => (OTHERS => '0'));
      ELSIF clk_enable = '1' THEN
        sumdelay_pipeline3_re(0 TO 1) <= sumvector3_re(0 TO 1);
        sumdelay_pipeline3_im(0 TO 1) <= sumvector3_im(0 TO 1);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process3;

  add_temp_10 <= resize(sumdelay_pipeline3_re(0), 35) + resize(sumdelay_pipeline3_re(1), 35);
  sum4_re <= add_temp_10(33 DOWNTO 0);

  add_temp_11 <= resize(sumdelay_pipeline3_im(0), 35) + resize(sumdelay_pipeline3_im(1), 35);
  sum4_im <= add_temp_11(33 DOWNTO 0);

  output_typeconvert_re <= resize(shift_right(sum4_re(32 DOWNTO 14) + 1, 1), 18);
  output_typeconvert_im <= resize(shift_right(sum4_im(32 DOWNTO 14) + 1, 1), 18);

  Output_Register_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        output_register_re <= (OTHERS => '0');
        output_register_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        output_register_re <= output_typeconvert_re;
        output_register_im <= output_typeconvert_im;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  ce_out <= phase_1;
  filter_out_re <= std_logic_vector(output_register_re);
  filter_out_im <= std_logic_vector(output_register_im);
END rtl;