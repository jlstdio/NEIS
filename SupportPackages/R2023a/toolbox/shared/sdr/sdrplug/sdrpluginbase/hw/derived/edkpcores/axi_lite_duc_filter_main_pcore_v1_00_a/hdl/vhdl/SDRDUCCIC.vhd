-- -------------------------------------------------------------
--
-- Module: SDRDUCCIC
-- Generated by MATLAB(R) 8.2 and the Filter Design HDL Coder 2.9.4.
-- Generated on: 2013-11-01 17:20:23
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- ResetType: Synchronous
-- OptimizeForHDL: on
-- EDAScriptGeneration: off
-- AddPipelineRegisters: on
-- Name: SDRDUCCIC
-- InputComplex: on
-- AddRatePort: on
-- GenerateHDLTestBench: off

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure        : Cascaded Integrator-Comb Interpolator
-- Interpolation Factor    : 128
-- Differential Delay      : 1
-- Number of Sections      : 5
-- Stable                  : Yes
-- Linear Phase            : Yes (Type 2)
--
-- Input                   : s18,16
-- Output                  : s18,16
-- Filter Internals        : Specified Word Lengths and Fraction Lengths
--   Comb Section 1        : s22,16
--   Comb Section 2        : s28,16
--   Comb Section 3        : s34,16
--   Comb Section 4        : s40,16
--   Comb Section 5        : s46,16
--   Integrator Section 1  : s19,16
--   Integrator Section 2  : s20,16
--   Integrator Section 3  : s21,16
--   Integrator Section 4  : s22,16
--   Integrator Section 5  : s22,16
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY SDRDUCCIC IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in_re                    :   IN    std_logic_vector(17 DOWNTO 0); -- sfix18_En16
         filter_in_im                    :   IN    std_logic_vector(17 DOWNTO 0); -- sfix18_En16
         rate                            :   IN    std_logic_vector(7 DOWNTO 0); -- ufix8
         load_rate                       :   IN    std_logic; 
         filter_out_re                   :   OUT   std_logic_vector(17 DOWNTO 0); -- sfix18_En16
         filter_out_im                   :   OUT   std_logic_vector(17 DOWNTO 0); -- sfix18_En16
         ce_out                          :   OUT   std_logic  
         );

END SDRDUCCIC;


----------------------------------------------------------------
--Module Architecture: SDRDUCCIC
----------------------------------------------------------------
ARCHITECTURE rtl OF SDRDUCCIC IS
  -- Local Functions
  -- Type Definitions
  -- Constants
  CONSTANT zeroconst_re                   : signed(21 DOWNTO 0) := to_signed(0, 22); -- sfix22_En16
  CONSTANT zeroconst_im                   : signed(21 DOWNTO 0) := to_signed(0, 22); -- sfix22_En16
  -- Signals
  SIGNAL rate_unsigned                    : unsigned(7 DOWNTO 0); -- ufix8
  SIGNAL cur_count                        : unsigned(7 DOWNTO 0); -- ufix8
  SIGNAL phase_0                          : std_logic; -- boolean
  --   
  SIGNAL input_register_re                : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL input_register_im                : signed(17 DOWNTO 0); -- sfix18_En16
  --   -- Section 1 Signals 
  SIGNAL section_in1_re                   : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL section_in1_im                   : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL section_cast1_re                 : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL section_cast1_im                 : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL diff1_re                         : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL diff1_im                         : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL section_out1_re                  : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL section_out1_im                  : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sub_cast                         : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sub_cast_1                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sub_temp                         : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL sub_cast_2                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sub_cast_3                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sub_temp_1                       : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL cic_pipeline1_re                 : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL cic_pipeline1_im                 : signed(18 DOWNTO 0); -- sfix19_En16
  --   -- Section 2 Signals 
  SIGNAL section_in2_re                   : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL section_in2_im                   : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL section_cast2_re                 : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL section_cast2_im                 : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL diff2_re                         : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL diff2_im                         : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL section_out2_re                  : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL section_out2_im                  : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL sub_cast_4                       : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL sub_cast_5                       : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL sub_temp_2                       : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL sub_cast_6                       : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL sub_cast_7                       : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL sub_temp_3                       : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL cic_pipeline2_re                 : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL cic_pipeline2_im                 : signed(19 DOWNTO 0); -- sfix20_En16
  --   -- Section 3 Signals 
  SIGNAL section_in3_re                   : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL section_in3_im                   : signed(19 DOWNTO 0); -- sfix20_En16
  SIGNAL section_cast3_re                 : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL section_cast3_im                 : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL diff3_re                         : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL diff3_im                         : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL section_out3_re                  : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL section_out3_im                  : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL sub_cast_8                       : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL sub_cast_9                       : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL sub_temp_4                       : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_cast_10                      : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL sub_cast_11                      : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL sub_temp_5                       : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL cic_pipeline3_re                 : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL cic_pipeline3_im                 : signed(20 DOWNTO 0); -- sfix21_En16
  --   -- Section 4 Signals 
  SIGNAL section_in4_re                   : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL section_in4_im                   : signed(20 DOWNTO 0); -- sfix21_En16
  SIGNAL section_cast4_re                 : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_cast4_im                 : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL diff4_re                         : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL diff4_im                         : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_out4_re                  : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_out4_im                  : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_cast_12                      : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_cast_13                      : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_temp_6                       : signed(22 DOWNTO 0); -- sfix23_En16
  SIGNAL sub_cast_14                      : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_cast_15                      : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_temp_7                       : signed(22 DOWNTO 0); -- sfix23_En16
  SIGNAL cic_pipeline4_re                 : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL cic_pipeline4_im                 : signed(21 DOWNTO 0); -- sfix22_En16
  --   -- Section 5 Signals 
  SIGNAL section_in5_re                   : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_in5_im                   : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL diff5_re                         : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL diff5_im                         : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_out5_re                  : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_out5_im                  : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_cast_16                      : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_cast_17                      : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_temp_8                       : signed(22 DOWNTO 0); -- sfix23_En16
  SIGNAL sub_cast_18                      : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_cast_19                      : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sub_temp_9                       : signed(22 DOWNTO 0); -- sfix23_En16
  SIGNAL cic_pipeline5_re                 : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL cic_pipeline5_im                 : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL upsampling_re                    : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL upsampling_im                    : signed(21 DOWNTO 0); -- sfix22_En16
  --   -- Section 6 Signals 
  SIGNAL section_in6_re                   : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_in6_im                   : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sum1_re                          : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL sum1_im                          : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_out6_re                  : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_out6_im                  : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL add_cast                         : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL add_cast_1                       : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL add_temp                         : signed(22 DOWNTO 0); -- sfix23_En16
  SIGNAL add_cast_2                       : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL add_cast_3                       : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL add_temp_1                       : signed(22 DOWNTO 0); -- sfix23_En16
  --   -- Section 7 Signals 
  SIGNAL section_in7_re                   : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_in7_im                   : signed(21 DOWNTO 0); -- sfix22_En16
  SIGNAL section_cast7_re                 : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL section_cast7_im                 : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL sum2_re                          : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL sum2_im                          : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL section_out7_re                  : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL section_out7_im                  : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL add_cast_4                       : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL add_cast_5                       : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL add_temp_2                       : signed(28 DOWNTO 0); -- sfix29_En16
  SIGNAL add_cast_6                       : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL add_cast_7                       : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL add_temp_3                       : signed(28 DOWNTO 0); -- sfix29_En16
  --   -- Section 8 Signals 
  SIGNAL section_in8_re                   : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL section_in8_im                   : signed(27 DOWNTO 0); -- sfix28_En16
  SIGNAL section_cast8_re                 : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL section_cast8_im                 : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL sum3_re                          : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL sum3_im                          : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL section_out8_re                  : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL section_out8_im                  : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL add_cast_8                       : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL add_cast_9                       : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL add_temp_4                       : signed(34 DOWNTO 0); -- sfix35_En16
  SIGNAL add_cast_10                      : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL add_cast_11                      : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL add_temp_5                       : signed(34 DOWNTO 0); -- sfix35_En16
  --   -- Section 9 Signals 
  SIGNAL section_in9_re                   : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL section_in9_im                   : signed(33 DOWNTO 0); -- sfix34_En16
  SIGNAL section_cast9_re                 : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL section_cast9_im                 : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL sum4_re                          : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL sum4_im                          : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL section_out9_re                  : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL section_out9_im                  : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL add_cast_12                      : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL add_cast_13                      : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL add_temp_6                       : signed(40 DOWNTO 0); -- sfix41_En16
  SIGNAL add_cast_14                      : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL add_cast_15                      : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL add_temp_7                       : signed(40 DOWNTO 0); -- sfix41_En16
  --   -- Section 10 Signals 
  SIGNAL section_in10_re                  : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL section_in10_im                  : signed(39 DOWNTO 0); -- sfix40_En16
  SIGNAL section_cast10_re                : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL section_cast10_im                : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL sum5_re                          : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL sum5_im                          : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL section_out10_re                 : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL section_out10_im                 : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL add_cast_16                      : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL add_cast_17                      : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL add_temp_8                       : signed(46 DOWNTO 0); -- sfix47_En16
  SIGNAL add_cast_18                      : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL add_cast_19                      : signed(45 DOWNTO 0); -- sfix46_En16
  SIGNAL add_temp_9                       : signed(46 DOWNTO 0); -- sfix47_En16
  SIGNAL bitgain                          : unsigned(5 DOWNTO 0); -- ufix6
  SIGNAL output_typeconvert_re            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL output_typeconvert_im            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL muxinput_0_re                    : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL muxinput_0_im                    : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL muxinput_5_re                    : signed(17 DOWNTO 0); -- sfix18_En11
  SIGNAL muxinput_5_im                    : signed(17 DOWNTO 0); -- sfix18_En11
  SIGNAL muxinput_8_re                    : signed(17 DOWNTO 0); -- sfix18_En8
  SIGNAL muxinput_8_im                    : signed(17 DOWNTO 0); -- sfix18_En8
  SIGNAL muxinput_10_re                   : signed(17 DOWNTO 0); -- sfix18_En6
  SIGNAL muxinput_10_im                   : signed(17 DOWNTO 0); -- sfix18_En6
  SIGNAL muxinput_12_re                   : signed(17 DOWNTO 0); -- sfix18_En4
  SIGNAL muxinput_12_im                   : signed(17 DOWNTO 0); -- sfix18_En4
  SIGNAL muxinput_13_re                   : signed(17 DOWNTO 0); -- sfix18_En3
  SIGNAL muxinput_13_im                   : signed(17 DOWNTO 0); -- sfix18_En3
  SIGNAL muxinput_15_re                   : signed(17 DOWNTO 0); -- sfix18_En1
  SIGNAL muxinput_15_im                   : signed(17 DOWNTO 0); -- sfix18_En1
  SIGNAL muxinput_16_re                   : signed(17 DOWNTO 0); -- sfix18
  SIGNAL muxinput_16_im                   : signed(17 DOWNTO 0); -- sfix18
  SIGNAL muxinput_17_re                   : signed(17 DOWNTO 0); -- sfix18_E1
  SIGNAL muxinput_17_im                   : signed(17 DOWNTO 0); -- sfix18_E1
  SIGNAL muxinput_18_re                   : signed(17 DOWNTO 0); -- sfix18_E2
  SIGNAL muxinput_18_im                   : signed(17 DOWNTO 0); -- sfix18_E2
  SIGNAL muxinput_19_re                   : signed(17 DOWNTO 0); -- sfix18_E3
  SIGNAL muxinput_19_im                   : signed(17 DOWNTO 0); -- sfix18_E3
  SIGNAL muxinput_20_re                   : signed(17 DOWNTO 0); -- sfix18_E4
  SIGNAL muxinput_20_im                   : signed(17 DOWNTO 0); -- sfix18_E4
  SIGNAL muxinput_21_re                   : signed(17 DOWNTO 0); -- sfix18_E5
  SIGNAL muxinput_21_im                   : signed(17 DOWNTO 0); -- sfix18_E5
  SIGNAL muxinput_22_re                   : signed(17 DOWNTO 0); -- sfix18_E6
  SIGNAL muxinput_22_im                   : signed(17 DOWNTO 0); -- sfix18_E6
  SIGNAL muxinput_23_re                   : signed(17 DOWNTO 0); -- sfix18_E7
  SIGNAL muxinput_23_im                   : signed(17 DOWNTO 0); -- sfix18_E7
  SIGNAL muxinput_24_re                   : signed(17 DOWNTO 0); -- sfix18_E8
  SIGNAL muxinput_24_im                   : signed(17 DOWNTO 0); -- sfix18_E8
  SIGNAL muxinput_25_re                   : signed(17 DOWNTO 0); -- sfix18_E9
  SIGNAL muxinput_25_im                   : signed(17 DOWNTO 0); -- sfix18_E9
  SIGNAL muxinput_26_re                   : signed(17 DOWNTO 0); -- sfix18_E10
  SIGNAL muxinput_26_im                   : signed(17 DOWNTO 0); -- sfix18_E10
  SIGNAL muxinput_27_re                   : signed(17 DOWNTO 0); -- sfix18_E11
  SIGNAL muxinput_27_im                   : signed(17 DOWNTO 0); -- sfix18_E11
  SIGNAL muxinput_28_re                   : signed(17 DOWNTO 0); -- sfix18_E12
  SIGNAL muxinput_28_im                   : signed(17 DOWNTO 0); -- sfix18_E12
  SIGNAL muxinput_29_re                   : signed(17 DOWNTO 0); -- sfix18_E13
  SIGNAL muxinput_29_im                   : signed(17 DOWNTO 0); -- sfix18_E13
  SIGNAL muxinput_30_re                   : signed(17 DOWNTO 0); -- sfix18_E14
  SIGNAL muxinput_30_im                   : signed(17 DOWNTO 0); -- sfix18_E14
  SIGNAL muxinput_31_re                   : signed(17 DOWNTO 0); -- sfix18_E15
  SIGNAL muxinput_31_im                   : signed(17 DOWNTO 0); -- sfix18_E15
  SIGNAL muxinput_32_re                   : signed(17 DOWNTO 0); -- sfix18_E16
  SIGNAL muxinput_32_im                   : signed(17 DOWNTO 0); -- sfix18_E16
  SIGNAL muxinput_33_re                   : signed(17 DOWNTO 0); -- sfix18_E17
  SIGNAL muxinput_33_im                   : signed(17 DOWNTO 0); -- sfix18_E17
  SIGNAL muxinput_34_re                   : signed(17 DOWNTO 0); -- sfix18_E18
  SIGNAL muxinput_34_im                   : signed(17 DOWNTO 0); -- sfix18_E18
  SIGNAL muxinput_35_re                   : signed(17 DOWNTO 0); -- sfix18_E19
  SIGNAL muxinput_35_im                   : signed(17 DOWNTO 0); -- sfix18_E19
  --   
  SIGNAL output_register_re               : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL output_register_im               : signed(17 DOWNTO 0); -- sfix18_En16


BEGIN

  -- Block Statements
  rate_unsigned <= unsigned(rate);

  ce_output : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        cur_count <= to_unsigned(0, 8);
      ELSIF clk_enable = '1' THEN
        IF load_rate = '1' THEN
          cur_count <= to_unsigned(1, 8);
        ELSIF cur_count = rate_unsigned - 1 THEN
          cur_count <= to_unsigned(0, 8);
        ELSE
          cur_count <= cur_count + 1;
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 8) AND clk_enable = '1' ELSE '0';

  --   ------------------ Input Register ------------------

  input_reg_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        input_register_re <= (OTHERS => '0');
        input_register_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        input_register_re <= signed(filter_in_re);
        input_register_im <= signed(filter_in_im);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  --   ------------------ Section # 1 : Comb ------------------

  section_in1_re <= input_register_re;
  section_in1_im <= input_register_im;

  section_cast1_re <= resize(section_in1_re, 19);
  section_cast1_im <= resize(section_in1_im, 19);

  sub_cast <= section_cast1_re;
  sub_cast_1 <= diff1_re;
  sub_temp <= resize(sub_cast, 20) - resize(sub_cast_1, 20);
  section_out1_re <= sub_temp(18 DOWNTO 0);

  sub_cast_2 <= section_cast1_im;
  sub_cast_3 <= diff1_im;
  sub_temp_1 <= resize(sub_cast_2, 20) - resize(sub_cast_3, 20);
  section_out1_im <= sub_temp_1(18 DOWNTO 0);

  comb_delay_section1 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        diff1_re <= (OTHERS => '0');
        diff1_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        diff1_re <= section_cast1_re;
        diff1_im <= section_cast1_im;
      END IF;
    END IF; 
  END PROCESS comb_delay_section1;

  cic_pipeline_process_section1 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        cic_pipeline1_re <= (OTHERS => '0');
        cic_pipeline1_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        cic_pipeline1_re <= section_out1_re;
        cic_pipeline1_im <= section_out1_im;
      END IF;
    END IF; 
  END PROCESS cic_pipeline_process_section1;

  --   ------------------ Section # 2 : Comb ------------------

  section_in2_re <= cic_pipeline1_re;
  section_in2_im <= cic_pipeline1_im;

  section_cast2_re <= resize(section_in2_re, 20);
  section_cast2_im <= resize(section_in2_im, 20);

  sub_cast_4 <= section_cast2_re;
  sub_cast_5 <= diff2_re;
  sub_temp_2 <= resize(sub_cast_4, 21) - resize(sub_cast_5, 21);
  section_out2_re <= sub_temp_2(19 DOWNTO 0);

  sub_cast_6 <= section_cast2_im;
  sub_cast_7 <= diff2_im;
  sub_temp_3 <= resize(sub_cast_6, 21) - resize(sub_cast_7, 21);
  section_out2_im <= sub_temp_3(19 DOWNTO 0);

  comb_delay_section2 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        diff2_re <= (OTHERS => '0');
        diff2_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        diff2_re <= section_cast2_re;
        diff2_im <= section_cast2_im;
      END IF;
    END IF; 
  END PROCESS comb_delay_section2;

  cic_pipeline_process_section2 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        cic_pipeline2_re <= (OTHERS => '0');
        cic_pipeline2_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        cic_pipeline2_re <= section_out2_re;
        cic_pipeline2_im <= section_out2_im;
      END IF;
    END IF; 
  END PROCESS cic_pipeline_process_section2;

  --   ------------------ Section # 3 : Comb ------------------

  section_in3_re <= cic_pipeline2_re;
  section_in3_im <= cic_pipeline2_im;

  section_cast3_re <= resize(section_in3_re, 21);
  section_cast3_im <= resize(section_in3_im, 21);

  sub_cast_8 <= section_cast3_re;
  sub_cast_9 <= diff3_re;
  sub_temp_4 <= resize(sub_cast_8, 22) - resize(sub_cast_9, 22);
  section_out3_re <= sub_temp_4(20 DOWNTO 0);

  sub_cast_10 <= section_cast3_im;
  sub_cast_11 <= diff3_im;
  sub_temp_5 <= resize(sub_cast_10, 22) - resize(sub_cast_11, 22);
  section_out3_im <= sub_temp_5(20 DOWNTO 0);

  comb_delay_section3 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        diff3_re <= (OTHERS => '0');
        diff3_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        diff3_re <= section_cast3_re;
        diff3_im <= section_cast3_im;
      END IF;
    END IF; 
  END PROCESS comb_delay_section3;

  cic_pipeline_process_section3 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        cic_pipeline3_re <= (OTHERS => '0');
        cic_pipeline3_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        cic_pipeline3_re <= section_out3_re;
        cic_pipeline3_im <= section_out3_im;
      END IF;
    END IF; 
  END PROCESS cic_pipeline_process_section3;

  --   ------------------ Section # 4 : Comb ------------------

  section_in4_re <= cic_pipeline3_re;
  section_in4_im <= cic_pipeline3_im;

  section_cast4_re <= resize(section_in4_re, 22);
  section_cast4_im <= resize(section_in4_im, 22);

  sub_cast_12 <= section_cast4_re;
  sub_cast_13 <= diff4_re;
  sub_temp_6 <= resize(sub_cast_12, 23) - resize(sub_cast_13, 23);
  section_out4_re <= sub_temp_6(21 DOWNTO 0);

  sub_cast_14 <= section_cast4_im;
  sub_cast_15 <= diff4_im;
  sub_temp_7 <= resize(sub_cast_14, 23) - resize(sub_cast_15, 23);
  section_out4_im <= sub_temp_7(21 DOWNTO 0);

  comb_delay_section4 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        diff4_re <= (OTHERS => '0');
        diff4_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        diff4_re <= section_cast4_re;
        diff4_im <= section_cast4_im;
      END IF;
    END IF; 
  END PROCESS comb_delay_section4;

  cic_pipeline_process_section4 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        cic_pipeline4_re <= (OTHERS => '0');
        cic_pipeline4_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        cic_pipeline4_re <= section_out4_re;
        cic_pipeline4_im <= section_out4_im;
      END IF;
    END IF; 
  END PROCESS cic_pipeline_process_section4;

  --   ------------------ Section # 5 : Comb ------------------

  section_in5_re <= cic_pipeline4_re;
  section_in5_im <= cic_pipeline4_im;

  sub_cast_16 <= section_in5_re;
  sub_cast_17 <= diff5_re;
  sub_temp_8 <= resize(sub_cast_16, 23) - resize(sub_cast_17, 23);
  section_out5_re <= sub_temp_8(21 DOWNTO 0);

  sub_cast_18 <= section_in5_im;
  sub_cast_19 <= diff5_im;
  sub_temp_9 <= resize(sub_cast_18, 23) - resize(sub_cast_19, 23);
  section_out5_im <= sub_temp_9(21 DOWNTO 0);

  comb_delay_section5 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        diff5_re <= (OTHERS => '0');
        diff5_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        diff5_re <= section_in5_re;
        diff5_im <= section_in5_im;
      END IF;
    END IF; 
  END PROCESS comb_delay_section5;

  cic_pipeline_process_section5 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        cic_pipeline5_re <= (OTHERS => '0');
        cic_pipeline5_im <= (OTHERS => '0');
      ELSIF phase_0 = '1' THEN
        cic_pipeline5_re <= section_out5_re;
        cic_pipeline5_im <= section_out5_im;
      END IF;
    END IF; 
  END PROCESS cic_pipeline_process_section5;

  upsampling_re <= cic_pipeline5_re WHEN ( phase_0 = '1' ) ELSE
                   zeroconst_re;
  upsampling_im <= cic_pipeline5_im WHEN ( phase_0 = '1' ) ELSE
                   zeroconst_im;
  --   ------------------ Section # 6 : Integrator ------------------

  section_in6_re <= upsampling_re;
  section_in6_im <= upsampling_im;

  add_cast <= section_in6_re;
  add_cast_1 <= section_out6_re;
  add_temp <= resize(add_cast, 23) + resize(add_cast_1, 23);
  sum1_re <= add_temp(21 DOWNTO 0);

  add_cast_2 <= section_in6_im;
  add_cast_3 <= section_out6_im;
  add_temp_1 <= resize(add_cast_2, 23) + resize(add_cast_3, 23);
  sum1_im <= add_temp_1(21 DOWNTO 0);

  integrator_delay_section6 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        section_out6_re <= (OTHERS => '0');
        section_out6_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        section_out6_re <= sum1_re;
        section_out6_im <= sum1_im;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section6;

  --   ------------------ Section # 7 : Integrator ------------------

  section_in7_re <= section_out6_re;
  section_in7_im <= section_out6_im;

  section_cast7_re <= resize(section_in7_re, 28);
  section_cast7_im <= resize(section_in7_im, 28);

  add_cast_4 <= section_cast7_re;
  add_cast_5 <= section_out7_re;
  add_temp_2 <= resize(add_cast_4, 29) + resize(add_cast_5, 29);
  sum2_re <= add_temp_2(27 DOWNTO 0);

  add_cast_6 <= section_cast7_im;
  add_cast_7 <= section_out7_im;
  add_temp_3 <= resize(add_cast_6, 29) + resize(add_cast_7, 29);
  sum2_im <= add_temp_3(27 DOWNTO 0);

  integrator_delay_section7 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        section_out7_re <= (OTHERS => '0');
        section_out7_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        section_out7_re <= sum2_re;
        section_out7_im <= sum2_im;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section7;

  --   ------------------ Section # 8 : Integrator ------------------

  section_in8_re <= section_out7_re;
  section_in8_im <= section_out7_im;

  section_cast8_re <= resize(section_in8_re, 34);
  section_cast8_im <= resize(section_in8_im, 34);

  add_cast_8 <= section_cast8_re;
  add_cast_9 <= section_out8_re;
  add_temp_4 <= resize(add_cast_8, 35) + resize(add_cast_9, 35);
  sum3_re <= add_temp_4(33 DOWNTO 0);

  add_cast_10 <= section_cast8_im;
  add_cast_11 <= section_out8_im;
  add_temp_5 <= resize(add_cast_10, 35) + resize(add_cast_11, 35);
  sum3_im <= add_temp_5(33 DOWNTO 0);

  integrator_delay_section8 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        section_out8_re <= (OTHERS => '0');
        section_out8_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        section_out8_re <= sum3_re;
        section_out8_im <= sum3_im;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section8;

  --   ------------------ Section # 9 : Integrator ------------------

  section_in9_re <= section_out8_re;
  section_in9_im <= section_out8_im;

  section_cast9_re <= resize(section_in9_re, 40);
  section_cast9_im <= resize(section_in9_im, 40);

  add_cast_12 <= section_cast9_re;
  add_cast_13 <= section_out9_re;
  add_temp_6 <= resize(add_cast_12, 41) + resize(add_cast_13, 41);
  sum4_re <= add_temp_6(39 DOWNTO 0);

  add_cast_14 <= section_cast9_im;
  add_cast_15 <= section_out9_im;
  add_temp_7 <= resize(add_cast_14, 41) + resize(add_cast_15, 41);
  sum4_im <= add_temp_7(39 DOWNTO 0);

  integrator_delay_section9 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        section_out9_re <= (OTHERS => '0');
        section_out9_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        section_out9_re <= sum4_re;
        section_out9_im <= sum4_im;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section9;

  --   ------------------ Section # 10 : Integrator ------------------

  section_in10_re <= section_out9_re;
  section_in10_im <= section_out9_im;

  section_cast10_re <= resize(section_in10_re, 46);
  section_cast10_im <= resize(section_in10_im, 46);

  add_cast_16 <= section_cast10_re;
  add_cast_17 <= section_out10_re;
  add_temp_8 <= resize(add_cast_16, 47) + resize(add_cast_17, 47);
  sum5_re <= add_temp_8(45 DOWNTO 0);

  add_cast_18 <= section_cast10_im;
  add_cast_19 <= section_out10_im;
  add_temp_9 <= resize(add_cast_18, 47) + resize(add_cast_19, 47);
  sum5_im <= add_temp_9(45 DOWNTO 0);

  integrator_delay_section10 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        section_out10_re <= (OTHERS => '0');
        section_out10_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        section_out10_re <= sum5_re;
        section_out10_im <= sum5_im;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section10;


  PROCESS(rate_unsigned)
  BEGIN
    CASE rate_unsigned IS
      WHEN "00000001" => bitgain <= "000000";
      WHEN "00000010" => bitgain <= "000100";
      WHEN "00000011" => bitgain <= "000111";
      WHEN "00000100" => bitgain <= "001000";
      WHEN "00000101" => bitgain <= "001010";
      WHEN "00000110" => bitgain <= "001011";
      WHEN "00000111" => bitgain <= "001100";
      WHEN "00001000" => bitgain <= "001100";
      WHEN "00001001" => bitgain <= "001101";
      WHEN "00001010" => bitgain <= "001110";
      WHEN "00001011" => bitgain <= "001110";
      WHEN "00001100" => bitgain <= "001111";
      WHEN "00001101" => bitgain <= "001111";
      WHEN "00001110" => bitgain <= "010000";
      WHEN "00001111" => bitgain <= "010000";
      WHEN "00010000" => bitgain <= "010000";
      WHEN "00010001" => bitgain <= "010001";
      WHEN "00010010" => bitgain <= "010001";
      WHEN "00010011" => bitgain <= "010001";
      WHEN "00010100" => bitgain <= "010010";
      WHEN "00010101" => bitgain <= "010010";
      WHEN "00010110" => bitgain <= "010010";
      WHEN "00010111" => bitgain <= "010011";
      WHEN "00011000" => bitgain <= "010011";
      WHEN "00011001" => bitgain <= "010011";
      WHEN "00011010" => bitgain <= "010011";
      WHEN "00011011" => bitgain <= "010100";
      WHEN "00011100" => bitgain <= "010100";
      WHEN "00011101" => bitgain <= "010100";
      WHEN "00011110" => bitgain <= "010100";
      WHEN "00011111" => bitgain <= "010100";
      WHEN "00100000" => bitgain <= "010100";
      WHEN "00100001" => bitgain <= "010101";
      WHEN "00100010" => bitgain <= "010101";
      WHEN "00100011" => bitgain <= "010101";
      WHEN "00100100" => bitgain <= "010101";
      WHEN "00100101" => bitgain <= "010101";
      WHEN "00100110" => bitgain <= "010101";
      WHEN "00100111" => bitgain <= "010110";
      WHEN "00101000" => bitgain <= "010110";
      WHEN "00101001" => bitgain <= "010110";
      WHEN "00101010" => bitgain <= "010110";
      WHEN "00101011" => bitgain <= "010110";
      WHEN "00101100" => bitgain <= "010110";
      WHEN "00101101" => bitgain <= "010110";
      WHEN "00101110" => bitgain <= "010111";
      WHEN "00101111" => bitgain <= "010111";
      WHEN "00110000" => bitgain <= "010111";
      WHEN "00110001" => bitgain <= "010111";
      WHEN "00110010" => bitgain <= "010111";
      WHEN "00110011" => bitgain <= "010111";
      WHEN "00110100" => bitgain <= "010111";
      WHEN "00110101" => bitgain <= "010111";
      WHEN "00110110" => bitgain <= "011000";
      WHEN "00110111" => bitgain <= "011000";
      WHEN "00111000" => bitgain <= "011000";
      WHEN "00111001" => bitgain <= "011000";
      WHEN "00111010" => bitgain <= "011000";
      WHEN "00111011" => bitgain <= "011000";
      WHEN "00111100" => bitgain <= "011000";
      WHEN "00111101" => bitgain <= "011000";
      WHEN "00111110" => bitgain <= "011000";
      WHEN "00111111" => bitgain <= "011000";
      WHEN "01000000" => bitgain <= "011000";
      WHEN "01000001" => bitgain <= "011001";
      WHEN "01000010" => bitgain <= "011001";
      WHEN "01000011" => bitgain <= "011001";
      WHEN "01000100" => bitgain <= "011001";
      WHEN "01000101" => bitgain <= "011001";
      WHEN "01000110" => bitgain <= "011001";
      WHEN "01000111" => bitgain <= "011001";
      WHEN "01001000" => bitgain <= "011001";
      WHEN "01001001" => bitgain <= "011001";
      WHEN "01001010" => bitgain <= "011001";
      WHEN "01001011" => bitgain <= "011001";
      WHEN "01001100" => bitgain <= "011001";
      WHEN "01001101" => bitgain <= "011010";
      WHEN "01001110" => bitgain <= "011010";
      WHEN "01001111" => bitgain <= "011010";
      WHEN "01010000" => bitgain <= "011010";
      WHEN "01010001" => bitgain <= "011010";
      WHEN "01010010" => bitgain <= "011010";
      WHEN "01010011" => bitgain <= "011010";
      WHEN "01010100" => bitgain <= "011010";
      WHEN "01010101" => bitgain <= "011010";
      WHEN "01010110" => bitgain <= "011010";
      WHEN "01010111" => bitgain <= "011010";
      WHEN "01011000" => bitgain <= "011010";
      WHEN "01011001" => bitgain <= "011010";
      WHEN "01011010" => bitgain <= "011010";
      WHEN "01011011" => bitgain <= "011011";
      WHEN "01011100" => bitgain <= "011011";
      WHEN "01011101" => bitgain <= "011011";
      WHEN "01011110" => bitgain <= "011011";
      WHEN "01011111" => bitgain <= "011011";
      WHEN "01100000" => bitgain <= "011011";
      WHEN "01100001" => bitgain <= "011011";
      WHEN "01100010" => bitgain <= "011011";
      WHEN "01100011" => bitgain <= "011011";
      WHEN "01100100" => bitgain <= "011011";
      WHEN "01100101" => bitgain <= "011011";
      WHEN "01100110" => bitgain <= "011011";
      WHEN "01100111" => bitgain <= "011011";
      WHEN "01101000" => bitgain <= "011011";
      WHEN "01101001" => bitgain <= "011011";
      WHEN "01101010" => bitgain <= "011011";
      WHEN "01101011" => bitgain <= "011011";
      WHEN "01101100" => bitgain <= "011100";
      WHEN "01101101" => bitgain <= "011100";
      WHEN "01101110" => bitgain <= "011100";
      WHEN "01101111" => bitgain <= "011100";
      WHEN "01110000" => bitgain <= "011100";
      WHEN "01110001" => bitgain <= "011100";
      WHEN "01110010" => bitgain <= "011100";
      WHEN "01110011" => bitgain <= "011100";
      WHEN "01110100" => bitgain <= "011100";
      WHEN "01110101" => bitgain <= "011100";
      WHEN "01110110" => bitgain <= "011100";
      WHEN "01110111" => bitgain <= "011100";
      WHEN "01111000" => bitgain <= "011100";
      WHEN "01111001" => bitgain <= "011100";
      WHEN "01111010" => bitgain <= "011100";
      WHEN "01111011" => bitgain <= "011100";
      WHEN "01111100" => bitgain <= "011100";
      WHEN "01111101" => bitgain <= "011100";
      WHEN "01111110" => bitgain <= "011100";
      WHEN "01111111" => bitgain <= "011100";
      WHEN "10000000" => bitgain <= "011100";
      WHEN OTHERS => bitgain <= "011100";
    END CASE;
  END PROCESS;

  output_typeconvert_re <= resize(shift_right(section_out10_re,to_integer(bitgain)),18);
  output_typeconvert_im <= resize(shift_right(section_out10_im,to_integer(bitgain)),18);

  --   ------------------ Output Register ------------------

  output_reg_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        output_register_re <= (OTHERS => '0');
        output_register_im <= (OTHERS => '0');
      ELSIF clk_enable = '1' THEN
        output_register_re <= output_typeconvert_re;
        output_register_im <= output_typeconvert_im;
      END IF;
    END IF; 
  END PROCESS output_reg_process;

  -- Assignment Statements
  ce_out <= phase_0;
  filter_out_re <= std_logic_vector(output_register_re);
  filter_out_im <= std_logic_vector(output_register_im);
END rtl;