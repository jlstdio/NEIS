-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\axi_lite_sdriq_dcoffset\axi_lite_sdriq_dcoffset_pcore_addr_decoder.vhd
-- Created: 2013-08-28 18:09:31
-- 
-- Generated by MATLAB 8.2 and HDL Coder 3.3
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_sdriq_dcoffset_pcore_addr_decoder
-- Source Path: axi_lite_sdriq_dcoffset_pcore/axi_lite_sdriq_dcoffset_pcore_axi_lite/axi_lite_sdriq_dcoffset_pcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_sdriq_dcoffset_pcore_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset_in                          :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_rd_IQbal                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_iqbal_dcoffbypass         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_dcoffset                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_IQbal                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_iqbal_dcoffbypass        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_dcoffset                 :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END axi_lite_sdriq_dcoffset_pcore_addr_decoder;


ARCHITECTURE rtl OF axi_lite_sdriq_dcoffset_pcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_rd_IQbal              : std_logic;  -- ufix1
  SIGNAL const_z                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_IQbal_unsigned           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_rd_iqbal_dcoffbypass_unsigned : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_rd_dcoffset           : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_iqbal_dcoffbypass  : std_logic;  -- ufix1
  SIGNAL read_reg_rd_IQbal                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_IQbal               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_iqbal_dcoffbypass    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_in_rd_iqbal_dcoffbypass     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_iqbal_dcoffbypass   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_dcoffset_unsigned        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_dcoffset             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_dcoffset            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_wr_IQbal              : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_IQbal                 : std_logic;  -- ufix1
  SIGNAL write_reg_wr_IQbal               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_wr_iqbal_dcoffbypass     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_wr_iqbal_dcoffbypass  : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_iqbal_dcoffbypass     : std_logic;  -- ufix1
  SIGNAL write_reg_wr_iqbal_dcoffbypass   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_wr_dcoffset           : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_dcoffset              : std_logic;  -- ufix1
  SIGNAL write_reg_wr_dcoffset            : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_rd_IQbal <= '1' WHEN addr_sel_unsigned = 67 ELSE
      '0';

  const_z <= (OTHERS => 'Z');


  read_rd_IQbal_unsigned <= unsigned(read_rd_IQbal);

  const_1 <= '1';

  enb <= const_1;

  read_rd_iqbal_dcoffbypass_unsigned <= unsigned(read_rd_iqbal_dcoffbypass);

  
  decode_sel_rd_dcoffset <= '1' WHEN addr_sel_unsigned = 69 ELSE
      '0';

  
  decode_sel_rd_iqbal_dcoffbypass <= '1' WHEN addr_sel_unsigned = 68 ELSE
      '0';

  reg_rd_IQbal_process : PROCESS (clk, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      read_reg_rd_IQbal <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_IQbal <= read_rd_IQbal_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_IQbal_process;


  
  decode_rd_rd_IQbal <= const_z WHEN decode_sel_rd_IQbal = '0' ELSE
      read_reg_rd_IQbal;

  reg_rd_iqbal_dcoffbypass_process : PROCESS (clk, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      read_reg_rd_iqbal_dcoffbypass <= to_unsigned(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_iqbal_dcoffbypass <= read_rd_iqbal_dcoffbypass_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_iqbal_dcoffbypass_process;


  data_in_rd_iqbal_dcoffbypass <= resize(read_reg_rd_iqbal_dcoffbypass, 32);

  
  decode_rd_rd_iqbal_dcoffbypass <= decode_rd_rd_IQbal WHEN decode_sel_rd_iqbal_dcoffbypass = '0' ELSE
      data_in_rd_iqbal_dcoffbypass;

  read_rd_dcoffset_unsigned <= unsigned(read_rd_dcoffset);

  reg_rd_dcoffset_process : PROCESS (clk, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      read_reg_rd_dcoffset <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_dcoffset <= read_rd_dcoffset_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_dcoffset_process;


  
  decode_rd_rd_dcoffset <= decode_rd_rd_iqbal_dcoffbypass WHEN decode_sel_rd_dcoffset = '0' ELSE
      read_reg_rd_dcoffset;

  data_read <= std_logic_vector(decode_rd_rd_dcoffset);

  data_write_unsigned <= unsigned(data_write);

  
  decode_sel_wr_IQbal <= '1' WHEN addr_sel_unsigned = 64 ELSE
      '0';

  reg_enb_wr_IQbal <= decode_sel_wr_IQbal AND wr_enb;

  reg_wr_IQbal_process : PROCESS (clk, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      write_reg_wr_IQbal <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_IQbal = '1' THEN
        write_reg_wr_IQbal <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_wr_IQbal_process;


  write_wr_IQbal <= std_logic_vector(write_reg_wr_IQbal);

  data_in_wr_iqbal_dcoffbypass <= data_write_unsigned(1 DOWNTO 0);

  
  decode_sel_wr_iqbal_dcoffbypass <= '1' WHEN addr_sel_unsigned = 65 ELSE
      '0';

  reg_enb_wr_iqbal_dcoffbypass <= decode_sel_wr_iqbal_dcoffbypass AND wr_enb;

  reg_wr_iqbal_dcoffbypass_process : PROCESS (clk, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      write_reg_wr_iqbal_dcoffbypass <= to_unsigned(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_iqbal_dcoffbypass = '1' THEN
        write_reg_wr_iqbal_dcoffbypass <= data_in_wr_iqbal_dcoffbypass;
      END IF;
    END IF;
  END PROCESS reg_wr_iqbal_dcoffbypass_process;


  write_wr_iqbal_dcoffbypass <= std_logic_vector(write_reg_wr_iqbal_dcoffbypass);

  
  decode_sel_wr_dcoffset <= '1' WHEN addr_sel_unsigned = 66 ELSE
      '0';

  reg_enb_wr_dcoffset <= decode_sel_wr_dcoffset AND wr_enb;

  reg_wr_dcoffset_process : PROCESS (clk, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      write_reg_wr_dcoffset <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_dcoffset = '1' THEN
        write_reg_wr_dcoffset <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_wr_dcoffset_process;


  write_wr_dcoffset <= std_logic_vector(write_reg_wr_dcoffset);

END rtl;

