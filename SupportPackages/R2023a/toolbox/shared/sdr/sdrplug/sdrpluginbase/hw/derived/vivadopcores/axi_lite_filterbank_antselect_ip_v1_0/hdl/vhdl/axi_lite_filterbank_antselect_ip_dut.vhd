-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\filterbank_antselect_io\axi_lite_filterbank_antselect_ip_dut.vhd
-- Created: 2016-05-02 18:40:52
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_filterbank_antselect_ip_dut
-- Source Path: axi_lite_filterbank_antselect_ip/axi_lite_filterbank_antselect_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_filterbank_antselect_ip_dut IS
  PORT( wr_TX_BANDSEL                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        wr_RX1_BANDSEL                    :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        wr_RX2_BANDSEL                    :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        wr_RX1B_BANDSEL                   :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        wr_RX1C_BANDSEL                   :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        wr_RX2B_BANDSEL                   :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        wr_RX2C_BANDSEL                   :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        wr_TX_ENABLE1A                    :   IN    std_logic;  -- ufix1
        wr_TX_ENABLE2A                    :   IN    std_logic;  -- ufix1
        wr_TX_ENABLE1B                    :   IN    std_logic;  -- ufix1
        wr_TX_ENABLE2B                    :   IN    std_logic;  -- ufix1
        wr_VCTXRX1_V1                     :   IN    std_logic;  -- ufix1
        wr_VCTXRX1_V2                     :   IN    std_logic;  -- ufix1
        wr_VCTXRX2_V1                     :   IN    std_logic;  -- ufix1
        wr_VCTXRX2_V2                     :   IN    std_logic;  -- ufix1
        wr_VCRX1_V1                       :   IN    std_logic;  -- ufix1
        wr_VCRX1_V2                       :   IN    std_logic;  -- ufix1
        wr_VCRX2_V1                       :   IN    std_logic;  -- ufix1
        wr_VCRX2_V2                       :   IN    std_logic;  -- ufix1
        TX_BANDSEL                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        RX1_BANDSEL                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        RX2_BANDSEL                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        RX1B_BANDSEL                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        RX1C_BANDSEL                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        RX2B_BANDSEL                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        RX2C_BANDSEL                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        TX_ENABLE1A                       :   OUT   std_logic;  -- ufix1
        TX_ENABLE2A                       :   OUT   std_logic;  -- ufix1
        TX_ENABLE1B                       :   OUT   std_logic;  -- ufix1
        TX_ENABLE2B                       :   OUT   std_logic;  -- ufix1
        VCTXRX1_V1                        :   OUT   std_logic;  -- ufix1
        VCTXRX1_V2                        :   OUT   std_logic;  -- ufix1
        VCTXRX2_V1                        :   OUT   std_logic;  -- ufix1
        VCTXRX2_V2                        :   OUT   std_logic;  -- ufix1
        VCRX1_V1                          :   OUT   std_logic;  -- ufix1
        VCRX1_V2                          :   OUT   std_logic;  -- ufix1
        VCRX2_V1                          :   OUT   std_logic;  -- ufix1
        VCRX2_V2                          :   OUT   std_logic;  -- ufix1
        rd_TX_BANDSEL                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        rd_RX1_BANDSEL                    :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        rd_RX2_BANDSEL                    :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        rd_RX1B_BANDSEL                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        rd_RX1C_BANDSEL                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        rd_RX2B_BANDSEL                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        rd_RX2C_BANDSEL                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        rd_TX_ENABLE1A                    :   OUT   std_logic;  -- ufix1
        rd_TX_ENABLE2A                    :   OUT   std_logic;  -- ufix1
        rd_TX_ENABLE1B                    :   OUT   std_logic;  -- ufix1
        rd_TX_ENABLE2B                    :   OUT   std_logic;  -- ufix1
        rd_VCTXRX1_V1                     :   OUT   std_logic;  -- ufix1
        rd_VCTXRX1_V2                     :   OUT   std_logic;  -- ufix1
        rd_VCTXRX2_V1                     :   OUT   std_logic;  -- ufix1
        rd_VCTXRX2_V2                     :   OUT   std_logic;  -- ufix1
        rd_VCRX1_V1                       :   OUT   std_logic;  -- ufix1
        rd_VCRX1_V2                       :   OUT   std_logic;  -- ufix1
        rd_VCRX2_V1                       :   OUT   std_logic;  -- ufix1
        rd_VCRX2_V2                       :   OUT   std_logic  -- ufix1
        );
END axi_lite_filterbank_antselect_ip_dut;


ARCHITECTURE rtl OF axi_lite_filterbank_antselect_ip_dut IS

  -- Component Declarations
  COMPONENT axi_lite_filterbank_antselect_ip_src_filterbank_antselect
    PORT( wr_TX_BANDSEL                   :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          wr_RX1_BANDSEL                  :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          wr_RX2_BANDSEL                  :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          wr_RX1B_BANDSEL                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          wr_RX1C_BANDSEL                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          wr_RX2B_BANDSEL                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          wr_RX2C_BANDSEL                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          wr_TX_ENABLE1A                  :   IN    std_logic;  -- ufix1
          wr_TX_ENABLE2A                  :   IN    std_logic;  -- ufix1
          wr_TX_ENABLE1B                  :   IN    std_logic;  -- ufix1
          wr_TX_ENABLE2B                  :   IN    std_logic;  -- ufix1
          wr_VCTXRX1_V1                   :   IN    std_logic;  -- ufix1
          wr_VCTXRX1_V2                   :   IN    std_logic;  -- ufix1
          wr_VCTXRX2_V1                   :   IN    std_logic;  -- ufix1
          wr_VCTXRX2_V2                   :   IN    std_logic;  -- ufix1
          wr_VCRX1_V1                     :   IN    std_logic;  -- ufix1
          wr_VCRX1_V2                     :   IN    std_logic;  -- ufix1
          wr_VCRX2_V1                     :   IN    std_logic;  -- ufix1
          wr_VCRX2_V2                     :   IN    std_logic;  -- ufix1
          TX_BANDSEL                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          RX1_BANDSEL                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          RX2_BANDSEL                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          RX1B_BANDSEL                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          RX1C_BANDSEL                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          RX2B_BANDSEL                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          RX2C_BANDSEL                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          TX_ENABLE1A                     :   OUT   std_logic;  -- ufix1
          TX_ENABLE2A                     :   OUT   std_logic;  -- ufix1
          TX_ENABLE1B                     :   OUT   std_logic;  -- ufix1
          TX_ENABLE2B                     :   OUT   std_logic;  -- ufix1
          VCTXRX1_V1                      :   OUT   std_logic;  -- ufix1
          VCTXRX1_V2                      :   OUT   std_logic;  -- ufix1
          VCTXRX2_V1                      :   OUT   std_logic;  -- ufix1
          VCTXRX2_V2                      :   OUT   std_logic;  -- ufix1
          VCRX1_V1                        :   OUT   std_logic;  -- ufix1
          VCRX1_V2                        :   OUT   std_logic;  -- ufix1
          VCRX2_V1                        :   OUT   std_logic;  -- ufix1
          VCRX2_V2                        :   OUT   std_logic;  -- ufix1
          rd_TX_BANDSEL                   :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_RX1_BANDSEL                  :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_RX2_BANDSEL                  :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_RX1B_BANDSEL                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_RX1C_BANDSEL                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_RX2B_BANDSEL                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_RX2C_BANDSEL                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_TX_ENABLE1A                  :   OUT   std_logic;  -- ufix1
          rd_TX_ENABLE2A                  :   OUT   std_logic;  -- ufix1
          rd_TX_ENABLE1B                  :   OUT   std_logic;  -- ufix1
          rd_TX_ENABLE2B                  :   OUT   std_logic;  -- ufix1
          rd_VCTXRX1_V1                   :   OUT   std_logic;  -- ufix1
          rd_VCTXRX1_V2                   :   OUT   std_logic;  -- ufix1
          rd_VCTXRX2_V1                   :   OUT   std_logic;  -- ufix1
          rd_VCTXRX2_V2                   :   OUT   std_logic;  -- ufix1
          rd_VCRX1_V1                     :   OUT   std_logic;  -- ufix1
          rd_VCRX1_V2                     :   OUT   std_logic;  -- ufix1
          rd_VCRX2_V1                     :   OUT   std_logic;  -- ufix1
          rd_VCRX2_V2                     :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi_lite_filterbank_antselect_ip_src_filterbank_antselect
    USE ENTITY work.axi_lite_filterbank_antselect_ip_src_filterbank_antselect(rtl);

  -- Signals
  SIGNAL wr_TX_ENABLE1A_sig               : std_logic;  -- ufix1
  SIGNAL wr_TX_ENABLE2A_sig               : std_logic;  -- ufix1
  SIGNAL wr_TX_ENABLE1B_sig               : std_logic;  -- ufix1
  SIGNAL wr_TX_ENABLE2B_sig               : std_logic;  -- ufix1
  SIGNAL wr_VCTXRX1_V1_sig                : std_logic;  -- ufix1
  SIGNAL wr_VCTXRX1_V2_sig                : std_logic;  -- ufix1
  SIGNAL wr_VCTXRX2_V1_sig                : std_logic;  -- ufix1
  SIGNAL wr_VCTXRX2_V2_sig                : std_logic;  -- ufix1
  SIGNAL wr_VCRX1_V1_sig                  : std_logic;  -- ufix1
  SIGNAL wr_VCRX1_V2_sig                  : std_logic;  -- ufix1
  SIGNAL wr_VCRX2_V1_sig                  : std_logic;  -- ufix1
  SIGNAL wr_VCRX2_V2_sig                  : std_logic;  -- ufix1
  SIGNAL TX_BANDSEL_sig                   : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL RX1_BANDSEL_sig                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL RX2_BANDSEL_sig                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL RX1B_BANDSEL_sig                 : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL RX1C_BANDSEL_sig                 : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL RX2B_BANDSEL_sig                 : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL RX2C_BANDSEL_sig                 : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL TX_ENABLE1A_sig                  : std_logic;  -- ufix1
  SIGNAL TX_ENABLE2A_sig                  : std_logic;  -- ufix1
  SIGNAL TX_ENABLE1B_sig                  : std_logic;  -- ufix1
  SIGNAL TX_ENABLE2B_sig                  : std_logic;  -- ufix1
  SIGNAL VCTXRX1_V1_sig                   : std_logic;  -- ufix1
  SIGNAL VCTXRX1_V2_sig                   : std_logic;  -- ufix1
  SIGNAL VCTXRX2_V1_sig                   : std_logic;  -- ufix1
  SIGNAL VCTXRX2_V2_sig                   : std_logic;  -- ufix1
  SIGNAL VCRX1_V1_sig                     : std_logic;  -- ufix1
  SIGNAL VCRX1_V2_sig                     : std_logic;  -- ufix1
  SIGNAL VCRX2_V1_sig                     : std_logic;  -- ufix1
  SIGNAL VCRX2_V2_sig                     : std_logic;  -- ufix1
  SIGNAL rd_TX_BANDSEL_sig                : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_RX1_BANDSEL_sig               : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_RX2_BANDSEL_sig               : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_RX1B_BANDSEL_sig              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_RX1C_BANDSEL_sig              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_RX2B_BANDSEL_sig              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_RX2C_BANDSEL_sig              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_TX_ENABLE1A_sig               : std_logic;  -- ufix1
  SIGNAL rd_TX_ENABLE2A_sig               : std_logic;  -- ufix1
  SIGNAL rd_TX_ENABLE1B_sig               : std_logic;  -- ufix1
  SIGNAL rd_TX_ENABLE2B_sig               : std_logic;  -- ufix1
  SIGNAL rd_VCTXRX1_V1_sig                : std_logic;  -- ufix1
  SIGNAL rd_VCTXRX1_V2_sig                : std_logic;  -- ufix1
  SIGNAL rd_VCTXRX2_V1_sig                : std_logic;  -- ufix1
  SIGNAL rd_VCTXRX2_V2_sig                : std_logic;  -- ufix1
  SIGNAL rd_VCRX1_V1_sig                  : std_logic;  -- ufix1
  SIGNAL rd_VCRX1_V2_sig                  : std_logic;  -- ufix1
  SIGNAL rd_VCRX2_V1_sig                  : std_logic;  -- ufix1
  SIGNAL rd_VCRX2_V2_sig                  : std_logic;  -- ufix1

BEGIN
  u_axi_lite_filterbank_antselect_ip_src_filterbank_antselect : axi_lite_filterbank_antselect_ip_src_filterbank_antselect
    PORT MAP( wr_TX_BANDSEL => wr_TX_BANDSEL,  -- ufix3
              wr_RX1_BANDSEL => wr_RX1_BANDSEL,  -- ufix3
              wr_RX2_BANDSEL => wr_RX2_BANDSEL,  -- ufix3
              wr_RX1B_BANDSEL => wr_RX1B_BANDSEL,  -- ufix2
              wr_RX1C_BANDSEL => wr_RX1C_BANDSEL,  -- ufix2
              wr_RX2B_BANDSEL => wr_RX2B_BANDSEL,  -- ufix2
              wr_RX2C_BANDSEL => wr_RX2C_BANDSEL,  -- ufix2
              wr_TX_ENABLE1A => wr_TX_ENABLE1A_sig,  -- ufix1
              wr_TX_ENABLE2A => wr_TX_ENABLE2A_sig,  -- ufix1
              wr_TX_ENABLE1B => wr_TX_ENABLE1B_sig,  -- ufix1
              wr_TX_ENABLE2B => wr_TX_ENABLE2B_sig,  -- ufix1
              wr_VCTXRX1_V1 => wr_VCTXRX1_V1_sig,  -- ufix1
              wr_VCTXRX1_V2 => wr_VCTXRX1_V2_sig,  -- ufix1
              wr_VCTXRX2_V1 => wr_VCTXRX2_V1_sig,  -- ufix1
              wr_VCTXRX2_V2 => wr_VCTXRX2_V2_sig,  -- ufix1
              wr_VCRX1_V1 => wr_VCRX1_V1_sig,  -- ufix1
              wr_VCRX1_V2 => wr_VCRX1_V2_sig,  -- ufix1
              wr_VCRX2_V1 => wr_VCRX2_V1_sig,  -- ufix1
              wr_VCRX2_V2 => wr_VCRX2_V2_sig,  -- ufix1
              TX_BANDSEL => TX_BANDSEL_sig,  -- ufix3
              RX1_BANDSEL => RX1_BANDSEL_sig,  -- ufix3
              RX2_BANDSEL => RX2_BANDSEL_sig,  -- ufix3
              RX1B_BANDSEL => RX1B_BANDSEL_sig,  -- ufix2
              RX1C_BANDSEL => RX1C_BANDSEL_sig,  -- ufix2
              RX2B_BANDSEL => RX2B_BANDSEL_sig,  -- ufix2
              RX2C_BANDSEL => RX2C_BANDSEL_sig,  -- ufix2
              TX_ENABLE1A => TX_ENABLE1A_sig,  -- ufix1
              TX_ENABLE2A => TX_ENABLE2A_sig,  -- ufix1
              TX_ENABLE1B => TX_ENABLE1B_sig,  -- ufix1
              TX_ENABLE2B => TX_ENABLE2B_sig,  -- ufix1
              VCTXRX1_V1 => VCTXRX1_V1_sig,  -- ufix1
              VCTXRX1_V2 => VCTXRX1_V2_sig,  -- ufix1
              VCTXRX2_V1 => VCTXRX2_V1_sig,  -- ufix1
              VCTXRX2_V2 => VCTXRX2_V2_sig,  -- ufix1
              VCRX1_V1 => VCRX1_V1_sig,  -- ufix1
              VCRX1_V2 => VCRX1_V2_sig,  -- ufix1
              VCRX2_V1 => VCRX2_V1_sig,  -- ufix1
              VCRX2_V2 => VCRX2_V2_sig,  -- ufix1
              rd_TX_BANDSEL => rd_TX_BANDSEL_sig,  -- ufix3
              rd_RX1_BANDSEL => rd_RX1_BANDSEL_sig,  -- ufix3
              rd_RX2_BANDSEL => rd_RX2_BANDSEL_sig,  -- ufix3
              rd_RX1B_BANDSEL => rd_RX1B_BANDSEL_sig,  -- ufix2
              rd_RX1C_BANDSEL => rd_RX1C_BANDSEL_sig,  -- ufix2
              rd_RX2B_BANDSEL => rd_RX2B_BANDSEL_sig,  -- ufix2
              rd_RX2C_BANDSEL => rd_RX2C_BANDSEL_sig,  -- ufix2
              rd_TX_ENABLE1A => rd_TX_ENABLE1A_sig,  -- ufix1
              rd_TX_ENABLE2A => rd_TX_ENABLE2A_sig,  -- ufix1
              rd_TX_ENABLE1B => rd_TX_ENABLE1B_sig,  -- ufix1
              rd_TX_ENABLE2B => rd_TX_ENABLE2B_sig,  -- ufix1
              rd_VCTXRX1_V1 => rd_VCTXRX1_V1_sig,  -- ufix1
              rd_VCTXRX1_V2 => rd_VCTXRX1_V2_sig,  -- ufix1
              rd_VCTXRX2_V1 => rd_VCTXRX2_V1_sig,  -- ufix1
              rd_VCTXRX2_V2 => rd_VCTXRX2_V2_sig,  -- ufix1
              rd_VCRX1_V1 => rd_VCRX1_V1_sig,  -- ufix1
              rd_VCRX1_V2 => rd_VCRX1_V2_sig,  -- ufix1
              rd_VCRX2_V1 => rd_VCRX2_V1_sig,  -- ufix1
              rd_VCRX2_V2 => rd_VCRX2_V2_sig  -- ufix1
              );

  wr_TX_ENABLE1A_sig <= wr_TX_ENABLE1A;

  wr_TX_ENABLE2A_sig <= wr_TX_ENABLE2A;

  wr_TX_ENABLE1B_sig <= wr_TX_ENABLE1B;

  wr_TX_ENABLE2B_sig <= wr_TX_ENABLE2B;

  wr_VCTXRX1_V1_sig <= wr_VCTXRX1_V1;

  wr_VCTXRX1_V2_sig <= wr_VCTXRX1_V2;

  wr_VCTXRX2_V1_sig <= wr_VCTXRX2_V1;

  wr_VCTXRX2_V2_sig <= wr_VCTXRX2_V2;

  wr_VCRX1_V1_sig <= wr_VCRX1_V1;

  wr_VCRX1_V2_sig <= wr_VCRX1_V2;

  wr_VCRX2_V1_sig <= wr_VCRX2_V1;

  wr_VCRX2_V2_sig <= wr_VCRX2_V2;

  TX_BANDSEL <= TX_BANDSEL_sig;

  RX1_BANDSEL <= RX1_BANDSEL_sig;

  RX2_BANDSEL <= RX2_BANDSEL_sig;

  RX1B_BANDSEL <= RX1B_BANDSEL_sig;

  RX1C_BANDSEL <= RX1C_BANDSEL_sig;

  RX2B_BANDSEL <= RX2B_BANDSEL_sig;

  RX2C_BANDSEL <= RX2C_BANDSEL_sig;

  TX_ENABLE1A <= TX_ENABLE1A_sig;

  TX_ENABLE2A <= TX_ENABLE2A_sig;

  TX_ENABLE1B <= TX_ENABLE1B_sig;

  TX_ENABLE2B <= TX_ENABLE2B_sig;

  VCTXRX1_V1 <= VCTXRX1_V1_sig;

  VCTXRX1_V2 <= VCTXRX1_V2_sig;

  VCTXRX2_V1 <= VCTXRX2_V1_sig;

  VCTXRX2_V2 <= VCTXRX2_V2_sig;

  VCRX1_V1 <= VCRX1_V1_sig;

  VCRX1_V2 <= VCRX1_V2_sig;

  VCRX2_V1 <= VCRX2_V1_sig;

  VCRX2_V2 <= VCRX2_V2_sig;

  rd_TX_BANDSEL <= rd_TX_BANDSEL_sig;

  rd_RX1_BANDSEL <= rd_RX1_BANDSEL_sig;

  rd_RX2_BANDSEL <= rd_RX2_BANDSEL_sig;

  rd_RX1B_BANDSEL <= rd_RX1B_BANDSEL_sig;

  rd_RX1C_BANDSEL <= rd_RX1C_BANDSEL_sig;

  rd_RX2B_BANDSEL <= rd_RX2B_BANDSEL_sig;

  rd_RX2C_BANDSEL <= rd_RX2C_BANDSEL_sig;

  rd_TX_ENABLE1A <= rd_TX_ENABLE1A_sig;

  rd_TX_ENABLE2A <= rd_TX_ENABLE2A_sig;

  rd_TX_ENABLE1B <= rd_TX_ENABLE1B_sig;

  rd_TX_ENABLE2B <= rd_TX_ENABLE2B_sig;

  rd_VCTXRX1_V1 <= rd_VCTXRX1_V1_sig;

  rd_VCTXRX1_V2 <= rd_VCTXRX1_V2_sig;

  rd_VCTXRX2_V1 <= rd_VCTXRX2_V1_sig;

  rd_VCTXRX2_V2 <= rd_VCTXRX2_V2_sig;

  rd_VCRX1_V1 <= rd_VCRX1_V1_sig;

  rd_VCRX1_V2 <= rd_VCRX1_V2_sig;

  rd_VCRX2_V1 <= rd_VCRX2_V1_sig;

  rd_VCRX2_V2 <= rd_VCRX2_V2_sig;

END rtl;

