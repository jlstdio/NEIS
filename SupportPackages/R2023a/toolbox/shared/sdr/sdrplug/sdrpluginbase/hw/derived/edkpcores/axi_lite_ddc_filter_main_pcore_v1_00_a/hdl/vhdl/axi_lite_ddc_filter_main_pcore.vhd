-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\axi_lite_ddc_filter_main\axi_lite_ddc_filter_main_pcore.vhd
-- Created: 2013-07-31 17:17:07
-- 
-- Generated by MATLAB 8.2 and HDL Coder 3.3
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_ddc_filter_main_pcore
-- Source Path: axi_lite_ddc_filter_main_pcore
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_ddc_filter_main_pcore IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        clk                               :   IN    std_logic;  -- ufix1
        clk_enable                        :   IN    std_logic;  -- ufix1
        reset                             :   IN    std_logic;  -- ufix1
        filter_in                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix16 & ufix16
        AXI_Lite_ACLK                     :   IN    std_logic;  -- ufix1
        AXI_Lite_ARESETN                  :   IN    std_logic;  -- ufix1
        AXI_Lite_AWADDR                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI_Lite_AWVALID                  :   IN    std_logic;  -- ufix1
        AXI_Lite_WDATA                    :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI_Lite_WSTRB                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI_Lite_WVALID                   :   IN    std_logic;  -- ufix1
        AXI_Lite_BREADY                   :   IN    std_logic;  -- ufix1
        AXI_Lite_ARADDR                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI_Lite_ARVALID                  :   IN    std_logic;  -- ufix1
        AXI_Lite_RREADY                   :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        filter_out                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix16 & ufix16
        AXI_Lite_AWREADY                  :   OUT   std_logic;  -- ufix1
        AXI_Lite_WREADY                   :   OUT   std_logic;  -- ufix1
        AXI_Lite_BRESP                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI_Lite_BVALID                   :   OUT   std_logic;  -- ufix1
        AXI_Lite_ARREADY                  :   OUT   std_logic;  -- ufix1
        AXI_Lite_RDATA                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI_Lite_RRESP                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI_Lite_RVALID                   :   OUT   std_logic  -- ufix1
        );
END axi_lite_ddc_filter_main_pcore;


ARCHITECTURE rtl OF axi_lite_ddc_filter_main_pcore IS

  -- Component Declarations
  COMPONENT axi_lite_ddc_filter_main_pcore_axi_lite
    PORT( reset_in                        :   IN    std_logic;
          AXI_Lite_ACLK                   :   IN    std_logic;  -- ufix1
          AXI_Lite_ARESETN                :   IN    std_logic;  -- ufix1
          AXI_Lite_AWADDR                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_Lite_AWVALID                :   IN    std_logic;  -- ufix1
          AXI_Lite_WDATA                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_Lite_WSTRB                  :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI_Lite_WVALID                 :   IN    std_logic;  -- ufix1
          AXI_Lite_BREADY                 :   IN    std_logic;  -- ufix1
          AXI_Lite_ARADDR                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_Lite_ARVALID                :   IN    std_logic;  -- ufix1
          AXI_Lite_RREADY                 :   IN    std_logic;  -- ufix1
          read_rd_control_reg             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_Lite_AWREADY                :   OUT   std_logic;  -- ufix1
          AXI_Lite_WREADY                 :   OUT   std_logic;  -- ufix1
          AXI_Lite_BRESP                  :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI_Lite_BVALID                 :   OUT   std_logic;  -- ufix1
          AXI_Lite_ARREADY                :   OUT   std_logic;  -- ufix1
          AXI_Lite_RDATA                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_Lite_RRESP                  :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI_Lite_RVALID                 :   OUT   std_logic;  -- ufix1
          write_wr_control_reg            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT axi_lite_ddc_filter_main_pcore_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          clk_enable                      :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;  -- ufix1
          wr_control_reg                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          filter_in_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix14
          filter_in_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix14
          ce_out                          :   OUT   std_logic;  -- ufix1
          filter_out_re                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          filter_out_im                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          rd_control_reg                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi_lite_ddc_filter_main_pcore_axi_lite
    USE ENTITY work.axi_lite_ddc_filter_main_pcore_axi_lite(rtl);

  FOR ALL : axi_lite_ddc_filter_main_pcore_dut
    USE ENTITY work.axi_lite_ddc_filter_main_pcore_dut(rtl);

  -- Signals
  SIGNAL reset_in                         : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL rd_control_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI_Lite_BRESP_tmp               : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI_Lite_RDATA_tmp               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI_Lite_RRESP_tmp               : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL wr_control_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL filter_out_re_sig                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter_out_im_sig                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter_in_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter_in_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_axi_lite_ddc_filter_main_pcore_axi_lite_inst : axi_lite_ddc_filter_main_pcore_axi_lite
    PORT MAP( reset_in => reset_in,
              AXI_Lite_ACLK => AXI_Lite_ACLK,  -- ufix1
              AXI_Lite_ARESETN => AXI_Lite_ARESETN,  -- ufix1
              AXI_Lite_AWADDR => AXI_Lite_AWADDR,  -- ufix32
              AXI_Lite_AWVALID => AXI_Lite_AWVALID,  -- ufix1
              AXI_Lite_WDATA => AXI_Lite_WDATA,  -- ufix32
              AXI_Lite_WSTRB => AXI_Lite_WSTRB,  -- ufix4
              AXI_Lite_WVALID => AXI_Lite_WVALID,  -- ufix1
              AXI_Lite_BREADY => AXI_Lite_BREADY,  -- ufix1
              AXI_Lite_ARADDR => AXI_Lite_ARADDR,  -- ufix32
              AXI_Lite_ARVALID => AXI_Lite_ARVALID,  -- ufix1
              AXI_Lite_RREADY => AXI_Lite_RREADY,  -- ufix1
              read_rd_control_reg => rd_control_reg_sig,  -- ufix32
              AXI_Lite_AWREADY => AXI_Lite_AWREADY,  -- ufix1
              AXI_Lite_WREADY => AXI_Lite_WREADY,  -- ufix1
              AXI_Lite_BRESP => AXI_Lite_BRESP_tmp,  -- ufix2
              AXI_Lite_BVALID => AXI_Lite_BVALID,  -- ufix1
              AXI_Lite_ARREADY => AXI_Lite_ARREADY,  -- ufix1
              AXI_Lite_RDATA => AXI_Lite_RDATA_tmp,  -- ufix32
              AXI_Lite_RRESP => AXI_Lite_RRESP_tmp,  -- ufix2
              AXI_Lite_RVALID => AXI_Lite_RVALID,  -- ufix1
              write_wr_control_reg => wr_control_reg_sig,  -- ufix32
              reset_internal => reset_internal  -- ufix1
              );

  u_axi_lite_ddc_filter_main_pcore_dut_inst : axi_lite_ddc_filter_main_pcore_dut
    PORT MAP( clk => clk,  -- ufix1
              clk_enable => clk_enable,  -- ufix1
              reset => reset,  -- ufix1
              wr_control_reg => wr_control_reg_sig,  -- ufix32
              filter_in_re => filter_in_re,  -- ufix14
              filter_in_im => filter_in_im,  -- ufix14
              ce_out => ce_out_sig,  -- ufix1
              filter_out_re => filter_out_re_sig,  -- ufix16
              filter_out_im => filter_out_im_sig,  -- ufix16
              rd_control_reg => rd_control_reg_sig  -- ufix32
              );

  reset_cm <=  NOT IPCORE_RESETN;

  reset_in <= reset_cm OR reset_internal;

  ce_out <= ce_out_sig;

  filter_out    <= filter_out_im_sig & filter_out_re_sig;

  AXI_Lite_BRESP <= AXI_Lite_BRESP_tmp;

  AXI_Lite_RDATA <= AXI_Lite_RDATA_tmp;

  AXI_Lite_RRESP <= AXI_Lite_RRESP_tmp;
  
  filter_in_re <= filter_in(15 downto 0);
  filter_in_im <= filter_in(31 downto 16);

END rtl;

