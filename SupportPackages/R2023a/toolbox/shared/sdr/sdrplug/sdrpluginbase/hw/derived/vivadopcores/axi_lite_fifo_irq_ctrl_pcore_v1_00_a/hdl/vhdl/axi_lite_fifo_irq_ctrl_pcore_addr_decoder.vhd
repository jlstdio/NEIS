-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\FIFOIRQCtrl\axi_lite_fifo_irq_ctrl_pcore_addr_decoder.vhd
-- Created: 2015-06-19 13:35:29
-- 
-- Generated by MATLAB 8.6 and HDL Coder 3.7
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_fifo_irq_ctrl_pcore_addr_decoder
-- Source Path: axi_lite_fifo_irq_ctrl_pcore/axi_lite_fifo_irq_ctrl_pcore_axi_lite/axi_lite_fifo_irq_ctrl_pcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_fifo_irq_ctrl_pcore_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_rd_STATUS                    :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_ISR                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_IER                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_OFCNT                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_UFCNT                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_FIFO_OCC_CNT              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_rd_FIFO_SAMP_CNT             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_CTRL                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_ISR                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_IER                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32
        );
END axi_lite_fifo_irq_ctrl_pcore_addr_decoder;


ARCHITECTURE rtl OF axi_lite_fifo_irq_ctrl_pcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_rd_STATUS             : std_logic;  -- ufix1
  SIGNAL read_rd_STATUS_unsigned          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_rd_ISR_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_IER_unsigned            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_OFCNT_unsigned           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_UFCNT_unsigned           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_FIFO_OCC_CNT_unsigned    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_rd_FIFO_SAMP_CNT_unsigned   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_rd_FIFO_SAMP_CNT      : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_FIFO_OCC_CNT       : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_UFCNT              : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_OFCNT              : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_IER               : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_ISR                : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_STATUS               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_STATUS              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_ISR                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_ISR                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_IER                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_IER                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_OFCNT                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_OFCNT               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_UFCNT                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_UFCNT               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_FIFO_OCC_CNT         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_FIFO_OCC_CNT        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_FIFO_SAMP_CNT        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_FIFO_SAMP_CNT       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_wr_CTRL               : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_CTRL                  : std_logic;  -- ufix1
  SIGNAL write_reg_wr_CTRL                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_wr_ISR                : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_ISR                   : std_logic;  -- ufix1
  SIGNAL write_reg_wr_ISR                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_wr_IER                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_wr_IER               : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_IER                  : std_logic;  -- ufix1
  SIGNAL write_reg_wr_IER                : signed(31 DOWNTO 0);  -- sfix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_rd_STATUS <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  read_rd_STATUS_unsigned <= unsigned(read_rd_STATUS);

  const_1 <= '1';

  enb <= const_1;

  read_rd_ISR_unsigned <= unsigned(read_rd_ISR);

  read_rd_IER_unsigned <= unsigned(read_rd_IER);

  read_rd_OFCNT_unsigned <= unsigned(read_rd_OFCNT);

  read_rd_UFCNT_unsigned <= unsigned(read_rd_UFCNT);

  read_rd_FIFO_OCC_CNT_unsigned <= unsigned(read_rd_FIFO_OCC_CNT);

  read_rd_FIFO_SAMP_CNT_unsigned <= unsigned(read_rd_FIFO_SAMP_CNT);

  
  decode_sel_rd_FIFO_SAMP_CNT <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  
  decode_sel_rd_FIFO_OCC_CNT <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  
  decode_sel_rd_UFCNT <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  
  decode_sel_rd_OFCNT <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  
  decode_sel_rd_IER <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  
  decode_sel_rd_ISR <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_rd_STATUS_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_STATUS <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_STATUS <= read_rd_STATUS_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_STATUS_process;


  
  decode_rd_rd_STATUS <= const_0 WHEN decode_sel_rd_STATUS = '0' ELSE
      read_reg_rd_STATUS;

  reg_rd_ISR_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_ISR <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_ISR <= read_rd_ISR_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_ISR_process;


  
  decode_rd_rd_ISR <= decode_rd_rd_STATUS WHEN decode_sel_rd_ISR = '0' ELSE
      read_reg_rd_ISR;

  reg_rd_IER_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_IER <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_IER <= read_rd_IER_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_IER_process;


  
  decode_rd_rd_IER <= decode_rd_rd_ISR WHEN decode_sel_rd_IER = '0' ELSE
      read_reg_rd_IER;

  reg_rd_OFCNT_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_OFCNT <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_OFCNT <= read_rd_OFCNT_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_OFCNT_process;


  
  decode_rd_rd_OFCNT <= decode_rd_rd_IER WHEN decode_sel_rd_OFCNT = '0' ELSE
      read_reg_rd_OFCNT;

  reg_rd_UFCNT_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_UFCNT <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_UFCNT <= read_rd_UFCNT_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_UFCNT_process;


  
  decode_rd_rd_UFCNT <= decode_rd_rd_OFCNT WHEN decode_sel_rd_UFCNT = '0' ELSE
      read_reg_rd_UFCNT;

  reg_rd_FIFO_OCC_CNT_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_FIFO_OCC_CNT <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_FIFO_OCC_CNT <= read_rd_FIFO_OCC_CNT_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_FIFO_OCC_CNT_process;


  
  decode_rd_rd_FIFO_OCC_CNT <= decode_rd_rd_UFCNT WHEN decode_sel_rd_FIFO_OCC_CNT = '0' ELSE
      read_reg_rd_FIFO_OCC_CNT;

  reg_rd_FIFO_SAMP_CNT_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_rd_FIFO_SAMP_CNT <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_FIFO_SAMP_CNT <= read_rd_FIFO_SAMP_CNT_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_FIFO_SAMP_CNT_process;


  
  decode_rd_rd_FIFO_SAMP_CNT <= decode_rd_rd_FIFO_OCC_CNT WHEN decode_sel_rd_FIFO_SAMP_CNT = '0' ELSE
      read_reg_rd_FIFO_SAMP_CNT;

  data_read <= std_logic_vector(decode_rd_rd_FIFO_SAMP_CNT);

  data_write_unsigned <= unsigned(data_write);

  
  decode_sel_wr_CTRL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_wr_CTRL <= decode_sel_wr_CTRL AND wr_enb;

  reg_wr_CTRL_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_wr_CTRL <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_CTRL = '1' THEN
        write_reg_wr_CTRL <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_wr_CTRL_process;


  write_wr_CTRL <= std_logic_vector(write_reg_wr_CTRL);

  
  decode_sel_wr_ISR <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_wr_ISR <= decode_sel_wr_ISR AND wr_enb;

  reg_wr_ISR_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_wr_ISR <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_ISR = '1' THEN
        write_reg_wr_ISR <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_wr_ISR_process;


  write_wr_ISR <= std_logic_vector(write_reg_wr_ISR);

  data_in_wr_IER <= signed(data_write_unsigned);

  
  decode_sel_wr_IER <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_wr_IER <= decode_sel_wr_IER AND wr_enb;

  reg_wr_IER_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_wr_IER <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_wr_IER = '1' THEN
        write_reg_wr_IER <= data_in_wr_IER;
      END IF;
    END IF;
  END PROCESS reg_wr_IER_process;


  write_wr_IER <= std_logic_vector(write_reg_wr_IER);

END rtl;

