-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/axi_lite_sdrramp_src/axi_lite_sdrramp_src_pcore.vhd
-- Created: 2014-07-16 08:51:28
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_sdrramp_src_pcore
-- Source Path: axi_lite_sdrramp_src__pcore
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_sdrramp_src_pcore IS
  GENERIC(
        bit_width : integer := 64
    );
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        clk                               :   IN    std_logic;  -- ufix1
        reset                             :   IN    std_logic;  -- ufix1
        stream_en                         :   IN    std_logic;  -- ufix1
        data_in                           :   IN    std_logic_vector(bit_width - 1 DOWNTO 0);  -- ufix64
        data_vld                          :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        src_strobe                        :   OUT   std_logic;  -- ufix1
        src_out                           :   OUT   std_logic_vector(bit_width - 1 DOWNTO 0);  -- ufix64
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END axi_lite_sdrramp_src_pcore;


ARCHITECTURE rtl OF axi_lite_sdrramp_src_pcore IS

  -- Component Declarations
  COMPONENT axi_lite_sdrramp_src_pcore_axi_lite
    PORT( reset_in                        :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_rd_src_sel                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_rd_cnt_max                 :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_wr_src_sel                :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          write_wr_cnt_max                :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT axi_lite_sdrramp_src_pcore_dut
    GENERIC (
        bit_width : integer := 64
    );
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;  -- ufix1
          stream_en                       :   IN    std_logic;  -- ufix1
          wr_src_sel                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          wr_cnt_max                      :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          data_in                         :   IN    std_logic_vector(bit_width - 1 DOWNTO 0);  -- ufix64
          data_vld                        :   IN    std_logic;  -- ufix1
          src_strobe                      :   OUT   std_logic;  -- ufix1
          src_out                         :   OUT   std_logic_vector(bit_width - 1 DOWNTO 0);  -- ufix64
          rd_src_sel                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_cnt_max                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi_lite_sdrramp_src_pcore_axi_lite
    USE ENTITY work.axi_lite_sdrramp_src_pcore_axi_lite(rtl);

  FOR ALL : axi_lite_sdrramp_src_pcore_dut
    USE ENTITY work.axi_lite_sdrramp_src_pcore_dut(rtl);

  -- Signals
  SIGNAL reset_in                         : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL rd_src_sel_sig                   : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_cnt_max_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL wr_src_sel_sig                   : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL wr_cnt_max_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL src_strobe_sig                   : std_logic;  -- ufix1
  SIGNAL src_out_sig                      : std_logic_vector(bit_width - 1 DOWNTO 0);  -- ufix64

BEGIN
  u_axi_lite_sdrramp_src_pcore_axi_lite_inst : axi_lite_sdrramp_src_pcore_axi_lite
    PORT MAP( reset_in => reset_in,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_rd_src_sel => rd_src_sel_sig,  -- ufix2
              read_rd_cnt_max => rd_cnt_max_sig,  -- ufix16
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_wr_src_sel => wr_src_sel_sig,  -- ufix2
              write_wr_cnt_max => wr_cnt_max_sig,  -- ufix16
              reset_internal => reset_internal  -- ufix1
              );

  u_axi_lite_sdrramp_src_pcore_dut_inst : axi_lite_sdrramp_src_pcore_dut
    GENERIC MAP(
        bit_width => bit_width
    )
    PORT MAP( clk => clk,  -- ufix1
              reset => reset,  -- ufix1
              stream_en => stream_en,  -- ufix1
              wr_src_sel => wr_src_sel_sig,  -- ufix2
              wr_cnt_max => wr_cnt_max_sig,  -- ufix16
              data_in => data_in,  -- ufix64
              data_vld => data_vld,  -- ufix1
              src_strobe => src_strobe_sig,  -- ufix1
              src_out => src_out_sig,  -- ufix64
              rd_src_sel => rd_src_sel_sig,  -- ufix2
              rd_cnt_max => rd_cnt_max_sig  -- ufix16
              );

  reset_cm <=  NOT IPCORE_RESETN;

  reset_in <= reset_cm OR reset_internal;

  src_strobe <= src_strobe_sig;

  src_out <= src_out_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

