-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/axi_lite_data_verifier_if/axi_lite_data_verifier_if_pcore_dut.vhd
-- Created: 2015-02-10 12:42:51
-- 
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_data_verifier_if_pcore_dut
-- Source Path: axi_lite_data_verifier_if_pcore/axi_lite_data_verifier_if_pcore_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_data_verifier_if_pcore_dut IS
  PORT( axi_clk                           :   IN    std_logic;
        axi_rst                           :   IN    std_logic;
        wr_rst_reg                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        axi_awaddr                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        axi_wvalid                        :   IN    std_logic;  -- ufix1
        axi_awvalid                       :   IN    std_logic;  -- ufix1
        clk                               :   IN    std_logic;  -- ufix1
        dvld                              :   IN    std_logic;  -- ufix1
        ch_sel                            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        data                              :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        wr_cntmax                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        rd_count_reg                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_status_reg                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        err_irq                           :   OUT   std_logic;  -- ufix1
        ch1_0                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        ch1_1                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        ch1_2                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        ch1_3                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        ch1_4                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        ch2_0                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        ch2_1                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        ch2_2                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        ch2_3                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        ch2_4                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_cntmax                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16
        );
END axi_lite_data_verifier_if_pcore_dut;


ARCHITECTURE rtl OF axi_lite_data_verifier_if_pcore_dut IS

  -- Component Declarations
  COMPONENT axi_lite_data_verifier
    PORT( axi_clk                         :   IN    std_logic;
          axi_rst                         :   IN    std_logic;
          wr_rst_reg                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          axi_awaddr                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          axi_wvalid                      :   IN    std_logic;  -- ufix1
          axi_awvalid                     :   IN    std_logic;  -- ufix1
          clk                             :   IN    std_logic;  -- ufix1
          dvld                            :   IN    std_logic;  -- ufix1
          ch_sel                          :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          data                            :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          wr_cntmax                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          rd_count_reg                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_status_reg                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          err_irq                         :   OUT   std_logic;  -- ufix1
          ch1_0                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          ch1_1                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          ch1_2                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          ch1_3                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          ch1_4                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          ch2_0                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          ch2_1                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          ch2_2                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          ch2_3                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          ch2_4                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_cntmax                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi_lite_data_verifier
    USE ENTITY work.axi_lite_data_verifier(rtl);

  -- Signals
  SIGNAL axi_wvalid_sig                   : std_logic;  -- ufix1
  SIGNAL axi_awvalid_sig                  : std_logic;  -- ufix1
  SIGNAL clk_sig                          : std_logic;  -- ufix1
  SIGNAL dvld_sig                         : std_logic;  -- ufix1
  SIGNAL rd_count_reg_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_status_reg_sig                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL err_irq_sig                      : std_logic;  -- ufix1
  SIGNAL ch1_0_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ch1_1_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ch1_2_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ch1_3_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ch1_4_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ch2_0_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ch2_1_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ch2_2_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ch2_3_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ch2_4_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_cntmax_sig                    : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_axi_lite_data_verifier : axi_lite_data_verifier
    PORT MAP( axi_clk => axi_clk,
              axi_rst => axi_rst,
              wr_rst_reg => wr_rst_reg,  -- ufix32
              axi_awaddr => axi_awaddr,  -- ufix32
              axi_wvalid => axi_wvalid_sig,  -- ufix1
              axi_awvalid => axi_awvalid_sig,  -- ufix1
              clk => clk_sig,  -- ufix1
              dvld => dvld_sig,  -- ufix1
              ch_sel => ch_sel,  -- ufix2
              data => data,  -- ufix64
              wr_cntmax => wr_cntmax,  -- ufix16
              rd_count_reg => rd_count_reg_sig,  -- ufix32
              rd_status_reg => rd_status_reg_sig,  -- ufix32
              err_irq => err_irq_sig,  -- ufix1
              ch1_0 => ch1_0_sig,  -- ufix32
              ch1_1 => ch1_1_sig,  -- ufix32
              ch1_2 => ch1_2_sig,  -- ufix32
              ch1_3 => ch1_3_sig,  -- ufix32
              ch1_4 => ch1_4_sig,  -- ufix32
              ch2_0 => ch2_0_sig,  -- ufix32
              ch2_1 => ch2_1_sig,  -- ufix32
              ch2_2 => ch2_2_sig,  -- ufix32
              ch2_3 => ch2_3_sig,  -- ufix32
              ch2_4 => ch2_4_sig,  -- ufix32
              rd_cntmax => rd_cntmax_sig  -- ufix16
              );

  axi_wvalid_sig <= axi_wvalid;

  axi_awvalid_sig <= axi_awvalid;

  clk_sig <= clk;

  dvld_sig <= dvld;

  rd_count_reg <= rd_count_reg_sig;

  rd_status_reg <= rd_status_reg_sig;

  err_irq <= err_irq_sig;

  ch1_0 <= ch1_0_sig;

  ch1_1 <= ch1_1_sig;

  ch1_2 <= ch1_2_sig;

  ch1_3 <= ch1_3_sig;

  ch1_4 <= ch1_4_sig;

  ch2_0 <= ch2_0_sig;

  ch2_1 <= ch2_1_sig;

  ch2_2 <= ch2_2_sig;

  ch2_3 <= ch2_3_sig;

  ch2_4 <= ch2_4_sig;

  rd_cntmax <= rd_cntmax_sig;

END rtl;

