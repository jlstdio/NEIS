-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\filterbank_antselect_io\axi_lite_filterbank_antselect_ip_axi_lite.vhd
-- Created: 2016-05-02 18:40:52
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_filterbank_antselect_ip_axi_lite
-- Source Path: axi_lite_filterbank_antselect_ip/axi_lite_filterbank_antselect_ip_axi_lite
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_filterbank_antselect_ip_axi_lite IS
  PORT( reset                             :   IN    std_logic;
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        read_rd_TX_BANDSEL                :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        read_rd_RX1_BANDSEL               :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        read_rd_RX2_BANDSEL               :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        read_rd_RX1B_BANDSEL              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_RX1C_BANDSEL              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_RX2B_BANDSEL              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_RX2C_BANDSEL              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_TX_ENABLE1A               :   IN    std_logic;  -- ufix1
        read_rd_TX_ENABLE2A               :   IN    std_logic;  -- ufix1
        read_rd_TX_ENABLE1B               :   IN    std_logic;  -- ufix1
        read_rd_TX_ENABLE2B               :   IN    std_logic;  -- ufix1
        read_rd_VCTXRX1_V1                :   IN    std_logic;  -- ufix1
        read_rd_VCTXRX1_V2                :   IN    std_logic;  -- ufix1
        read_rd_VCTXRX2_V1                :   IN    std_logic;  -- ufix1
        read_rd_VCTXRX2_V2                :   IN    std_logic;  -- ufix1
        read_rd_VCRX1_V1                  :   IN    std_logic;  -- ufix1
        read_rd_VCRX1_V2                  :   IN    std_logic;  -- ufix1
        read_rd_VCRX2_V1                  :   IN    std_logic;  -- ufix1
        read_rd_VCRX2_V2                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic;  -- ufix1
        write_wr_TX_BANDSEL               :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        write_wr_RX1_BANDSEL              :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        write_wr_RX2_BANDSEL              :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        write_wr_RX1B_BANDSEL             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_RX1C_BANDSEL             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_RX2B_BANDSEL             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_RX2C_BANDSEL             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_TX_ENABLE1A              :   OUT   std_logic;  -- ufix1
        write_wr_TX_ENABLE2A              :   OUT   std_logic;  -- ufix1
        write_wr_TX_ENABLE1B              :   OUT   std_logic;  -- ufix1
        write_wr_TX_ENABLE2B              :   OUT   std_logic;  -- ufix1
        write_wr_VCTXRX1_V1               :   OUT   std_logic;  -- ufix1
        write_wr_VCTXRX1_V2               :   OUT   std_logic;  -- ufix1
        write_wr_VCTXRX2_V1               :   OUT   std_logic;  -- ufix1
        write_wr_VCTXRX2_V2               :   OUT   std_logic;  -- ufix1
        write_wr_VCRX1_V1                 :   OUT   std_logic;  -- ufix1
        write_wr_VCRX1_V2                 :   OUT   std_logic;  -- ufix1
        write_wr_VCRX2_V1                 :   OUT   std_logic;  -- ufix1
        write_wr_VCRX2_V2                 :   OUT   std_logic;  -- ufix1
        reset_internal                    :   OUT   std_logic  -- ufix1
        );
END axi_lite_filterbank_antselect_ip_axi_lite;


ARCHITECTURE rtl OF axi_lite_filterbank_antselect_ip_axi_lite IS

  -- Component Declarations
  COMPONENT axi_lite_filterbank_antselect_ip_addr_decoder
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          data_write                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          addr_sel                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_enb                          :   IN    std_logic;  -- ufix1
          rd_enb                          :   IN    std_logic;  -- ufix1
          read_rd_TX_BANDSEL              :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          read_rd_RX1_BANDSEL             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          read_rd_RX2_BANDSEL             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          read_rd_RX1B_BANDSEL            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_rd_RX1C_BANDSEL            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_rd_RX2B_BANDSEL            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_rd_RX2C_BANDSEL            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_rd_TX_ENABLE1A             :   IN    std_logic;  -- ufix1
          read_rd_TX_ENABLE2A             :   IN    std_logic;  -- ufix1
          read_rd_TX_ENABLE1B             :   IN    std_logic;  -- ufix1
          read_rd_TX_ENABLE2B             :   IN    std_logic;  -- ufix1
          read_rd_VCTXRX1_V1              :   IN    std_logic;  -- ufix1
          read_rd_VCTXRX1_V2              :   IN    std_logic;  -- ufix1
          read_rd_VCTXRX2_V1              :   IN    std_logic;  -- ufix1
          read_rd_VCTXRX2_V2              :   IN    std_logic;  -- ufix1
          read_rd_VCRX1_V1                :   IN    std_logic;  -- ufix1
          read_rd_VCRX1_V2                :   IN    std_logic;  -- ufix1
          read_rd_VCRX2_V1                :   IN    std_logic;  -- ufix1
          read_rd_VCRX2_V2                :   IN    std_logic;  -- ufix1
          data_read                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_wr_TX_BANDSEL             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          write_wr_RX1_BANDSEL            :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          write_wr_RX2_BANDSEL            :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          write_wr_RX1B_BANDSEL           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          write_wr_RX1C_BANDSEL           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          write_wr_RX2B_BANDSEL           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          write_wr_RX2C_BANDSEL           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          write_wr_TX_ENABLE1A            :   OUT   std_logic;  -- ufix1
          write_wr_TX_ENABLE2A            :   OUT   std_logic;  -- ufix1
          write_wr_TX_ENABLE1B            :   OUT   std_logic;  -- ufix1
          write_wr_TX_ENABLE2B            :   OUT   std_logic;  -- ufix1
          write_wr_VCTXRX1_V1             :   OUT   std_logic;  -- ufix1
          write_wr_VCTXRX1_V2             :   OUT   std_logic;  -- ufix1
          write_wr_VCTXRX2_V1             :   OUT   std_logic;  -- ufix1
          write_wr_VCTXRX2_V2             :   OUT   std_logic;  -- ufix1
          write_wr_VCRX1_V1               :   OUT   std_logic;  -- ufix1
          write_wr_VCRX1_V2               :   OUT   std_logic;  -- ufix1
          write_wr_VCRX2_V1               :   OUT   std_logic;  -- ufix1
          write_wr_VCRX2_V2               :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT axi_lite_filterbank_antselect_ip_axi_lite_module
    PORT( clk                             :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          data_read                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          data_write                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          addr_sel                        :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_enb                          :   OUT   std_logic;  -- ufix1
          rd_enb                          :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi_lite_filterbank_antselect_ip_addr_decoder
    USE ENTITY work.axi_lite_filterbank_antselect_ip_addr_decoder(rtl);

  FOR ALL : axi_lite_filterbank_antselect_ip_axi_lite_module
    USE ENTITY work.axi_lite_filterbank_antselect_ip_axi_lite_module(rtl);

  -- Signals
  SIGNAL top_data_write                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_addr_sel                     : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL top_wr_enb                       : std_logic;  -- ufix1
  SIGNAL top_rd_enb                       : std_logic;  -- ufix1
  SIGNAL top_data_read                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_wr_TX_BANDSEL_tmp          : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL write_wr_RX1_BANDSEL_tmp         : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL write_wr_RX2_BANDSEL_tmp         : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL write_wr_RX1B_BANDSEL_tmp        : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_wr_RX1C_BANDSEL_tmp        : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_wr_RX2B_BANDSEL_tmp        : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_wr_RX2C_BANDSEL_tmp        : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL top_reset_internal               : std_logic;  -- ufix1

BEGIN
  u_axi_lite_filterbank_antselect_ip_addr_decoder_inst : axi_lite_filterbank_antselect_ip_addr_decoder
    PORT MAP( clk => AXI4_Lite_ACLK,  -- ufix1
              reset => reset,
              data_write => top_data_write,  -- ufix32
              addr_sel => top_addr_sel,  -- ufix14
              wr_enb => top_wr_enb,  -- ufix1
              rd_enb => top_rd_enb,  -- ufix1
              read_rd_TX_BANDSEL => read_rd_TX_BANDSEL,  -- ufix3
              read_rd_RX1_BANDSEL => read_rd_RX1_BANDSEL,  -- ufix3
              read_rd_RX2_BANDSEL => read_rd_RX2_BANDSEL,  -- ufix3
              read_rd_RX1B_BANDSEL => read_rd_RX1B_BANDSEL,  -- ufix2
              read_rd_RX1C_BANDSEL => read_rd_RX1C_BANDSEL,  -- ufix2
              read_rd_RX2B_BANDSEL => read_rd_RX2B_BANDSEL,  -- ufix2
              read_rd_RX2C_BANDSEL => read_rd_RX2C_BANDSEL,  -- ufix2
              read_rd_TX_ENABLE1A => read_rd_TX_ENABLE1A,  -- ufix1
              read_rd_TX_ENABLE2A => read_rd_TX_ENABLE2A,  -- ufix1
              read_rd_TX_ENABLE1B => read_rd_TX_ENABLE1B,  -- ufix1
              read_rd_TX_ENABLE2B => read_rd_TX_ENABLE2B,  -- ufix1
              read_rd_VCTXRX1_V1 => read_rd_VCTXRX1_V1,  -- ufix1
              read_rd_VCTXRX1_V2 => read_rd_VCTXRX1_V2,  -- ufix1
              read_rd_VCTXRX2_V1 => read_rd_VCTXRX2_V1,  -- ufix1
              read_rd_VCTXRX2_V2 => read_rd_VCTXRX2_V2,  -- ufix1
              read_rd_VCRX1_V1 => read_rd_VCRX1_V1,  -- ufix1
              read_rd_VCRX1_V2 => read_rd_VCRX1_V2,  -- ufix1
              read_rd_VCRX2_V1 => read_rd_VCRX2_V1,  -- ufix1
              read_rd_VCRX2_V2 => read_rd_VCRX2_V2,  -- ufix1
              data_read => top_data_read,  -- ufix32
              write_wr_TX_BANDSEL => write_wr_TX_BANDSEL_tmp,  -- ufix3
              write_wr_RX1_BANDSEL => write_wr_RX1_BANDSEL_tmp,  -- ufix3
              write_wr_RX2_BANDSEL => write_wr_RX2_BANDSEL_tmp,  -- ufix3
              write_wr_RX1B_BANDSEL => write_wr_RX1B_BANDSEL_tmp,  -- ufix2
              write_wr_RX1C_BANDSEL => write_wr_RX1C_BANDSEL_tmp,  -- ufix2
              write_wr_RX2B_BANDSEL => write_wr_RX2B_BANDSEL_tmp,  -- ufix2
              write_wr_RX2C_BANDSEL => write_wr_RX2C_BANDSEL_tmp,  -- ufix2
              write_wr_TX_ENABLE1A => write_wr_TX_ENABLE1A,  -- ufix1
              write_wr_TX_ENABLE2A => write_wr_TX_ENABLE2A,  -- ufix1
              write_wr_TX_ENABLE1B => write_wr_TX_ENABLE1B,  -- ufix1
              write_wr_TX_ENABLE2B => write_wr_TX_ENABLE2B,  -- ufix1
              write_wr_VCTXRX1_V1 => write_wr_VCTXRX1_V1,  -- ufix1
              write_wr_VCTXRX1_V2 => write_wr_VCTXRX1_V2,  -- ufix1
              write_wr_VCTXRX2_V1 => write_wr_VCTXRX2_V1,  -- ufix1
              write_wr_VCTXRX2_V2 => write_wr_VCTXRX2_V2,  -- ufix1
              write_wr_VCRX1_V1 => write_wr_VCRX1_V1,  -- ufix1
              write_wr_VCRX1_V2 => write_wr_VCRX1_V2,  -- ufix1
              write_wr_VCRX2_V1 => write_wr_VCRX2_V1,  -- ufix1
              write_wr_VCRX2_V2 => write_wr_VCRX2_V2  -- ufix1
              );

  u_axi_lite_filterbank_antselect_ip_axi_lite_module_inst : axi_lite_filterbank_antselect_ip_axi_lite_module
    PORT MAP( clk => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              data_read => top_data_read,  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              data_write => top_data_write,  -- ufix32
              addr_sel => top_addr_sel,  -- ufix14
              wr_enb => top_wr_enb,  -- ufix1
              rd_enb => top_rd_enb,  -- ufix1
              reset_internal => top_reset_internal  -- ufix1
              );

  reset_internal <= top_reset_internal;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

  write_wr_TX_BANDSEL <= write_wr_TX_BANDSEL_tmp;

  write_wr_RX1_BANDSEL <= write_wr_RX1_BANDSEL_tmp;

  write_wr_RX2_BANDSEL <= write_wr_RX2_BANDSEL_tmp;

  write_wr_RX1B_BANDSEL <= write_wr_RX1B_BANDSEL_tmp;

  write_wr_RX1C_BANDSEL <= write_wr_RX1C_BANDSEL_tmp;

  write_wr_RX2B_BANDSEL <= write_wr_RX2B_BANDSEL_tmp;

  write_wr_RX2C_BANDSEL <= write_wr_RX2C_BANDSEL_tmp;

END rtl;

