-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\axi_lite_sample_counter\axi_lite_sample_counter_pcore.vhd
-- Created: 2014-07-29 08:51:09
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_sample_counter_pcore
-- Source Path: axi_lite_sample_counter_pcore
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_sample_counter_pcore IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        ps7_fclk0                         :   IN    std_logic;  -- ufix1
        data_path_rst_n                   :   IN    std_logic;  -- ufix1
        s_axis_tvalid                     :   IN    std_logic;  -- ufix1
        m_axis_tready                     :   IN    std_logic;  -- ufix1
        s_axis_tdata                      :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix32
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        m_axis_tdata                      :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix32
        debug_out                         :   OUT   std_logic_vector(34 DOWNTO 0);  -- ufix35
        s_axis_tready                     :   OUT   std_logic;  -- ufix1
        m_axis_tvalid                     :   OUT   std_logic;  -- ufix1
        m_axis_tlast                      :   OUT   std_logic;  -- ufix1
        rst_out                           :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END axi_lite_sample_counter_pcore;


ARCHITECTURE rtl OF axi_lite_sample_counter_pcore IS

  -- Component Declarations
  COMPONENT axi_lite_sample_counter_pcore_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_rd_samples_per_ring        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_rd_rst_reg                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_wr_samples_per_ring       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_wr_rst_reg                :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT axi_lite_sample_counter_pcore_dut
    PORT( 
          -- axi lite interface
          aclk                      : in std_logic;
          aresetn                   : in std_logic;
          axi_awaddr                : in std_logic_vector(31 downto 0);
          axi_wvalid                : in std_logic;
          axi_awvalid               : in std_logic;
          axi_wdata                 : in std_logic_vector(31 downto 0);
          
          wr_samples_per_ring       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          wr_rst_reg                :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          ps7_fclk0                 :   IN    std_logic;  -- ufix1
          data_path_rst_n           :   IN    std_logic;  -- ufix1
          s_axis_tvalid             :   IN    std_logic;  -- ufix1
          m_axis_tready             :   IN    std_logic;  -- ufix1
          s_axis_tdata              :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix32
          rd_samples_per_ring       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_rst_reg                :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          m_axis_tdata              :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix32
          debug_out                 :   OUT   std_logic_vector(34 DOWNTO 0);  -- ufix35
          s_axis_tready             :   OUT   std_logic;  -- ufix1
          m_axis_tvalid             :   OUT   std_logic;  -- ufix1
          m_axis_tlast              :   OUT   std_logic;  -- ufix1
          rst_out                   :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi_lite_sample_counter_pcore_axi_lite
    USE ENTITY work.axi_lite_sample_counter_pcore_axi_lite(rtl);

  FOR ALL : axi_lite_sample_counter_pcore_dut
    USE ENTITY work.axi_lite_sample_counter_pcore_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL rd_samples_per_ring_sig          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_rst_reg_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL wr_samples_per_ring_sig          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wr_rst_reg_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL m_axis_tdata_sig                 : std_logic_vector(63 DOWNTO 0);  -- ufix32
  SIGNAL debug_out_sig                    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL s_axis_tready_sig                : std_logic;  -- ufix1
  SIGNAL m_axis_tvalid_sig                : std_logic;  -- ufix1
  SIGNAL m_axis_tlast_sig                 : std_logic;  -- ufix1
  SIGNAL rst_out_sig                      : std_logic;  -- ufix1

  SIGNAL AXI4_Lite_AWADDR_tmp              : std_logic_vector(15 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_ARADDR_tmp              : std_logic_vector(15 DOWNTO 0);  -- ufix32
  
  

BEGIN

  AXI4_Lite_AWADDR_tmp <= AXI4_Lite_AWADDR(15 downto 0);
  AXI4_Lite_ARADDR_tmp <= AXI4_Lite_ARADDR(15 downto 0);

    
  u_axi_lite_sample_counter_pcore_axi_lite_inst : axi_lite_sample_counter_pcore_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR_tmp,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR_tmp,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_rd_samples_per_ring => rd_samples_per_ring_sig,  -- ufix32
              read_rd_rst_reg => rd_rst_reg_sig,  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_wr_samples_per_ring => wr_samples_per_ring_sig,  -- ufix32
              write_wr_rst_reg => wr_rst_reg_sig,  -- ufix32
              reset_internal => reset_internal  -- ufix1
              );

  u_axi_lite_sample_counter_pcore_dut_inst : axi_lite_sample_counter_pcore_dut
    PORT MAP( 
              -- axi lite interface
              aclk        => AXI4_Lite_ACLK,
              aresetn     => AXI4_Lite_ARESETN,
              axi_awaddr  => AXI4_Lite_AWADDR,
              axi_wvalid  => AXI4_Lite_WVALID,
              axi_awvalid => AXI4_Lite_AWVALID,
              axi_wdata   => AXI4_Lite_WDATA,

              wr_samples_per_ring => wr_samples_per_ring_sig,  -- ufix32
              wr_rst_reg => wr_rst_reg_sig,  -- ufix32
              ps7_fclk0 => ps7_fclk0,  -- ufix1
              data_path_rst_n => data_path_rst_n,  -- ufix1
              s_axis_tvalid => s_axis_tvalid,  -- ufix1
              m_axis_tready => m_axis_tready,  -- ufix1
              s_axis_tdata => s_axis_tdata,  -- ufix32
              rd_samples_per_ring => rd_samples_per_ring_sig,  -- ufix32
              rd_rst_reg => rd_rst_reg_sig,  -- ufix32
              m_axis_tdata => m_axis_tdata_sig,  -- ufix32
              debug_out => debug_out_sig,  -- ufix35
              s_axis_tready => s_axis_tready_sig,  -- ufix1
              m_axis_tvalid => m_axis_tvalid_sig,  -- ufix1
              m_axis_tlast => m_axis_tlast_sig,  -- ufix1
              rst_out => rst_out_sig  -- ufix1
              );

  reset_cm <=  NOT IPCORE_RESETN;

  reset <= reset_cm OR reset_internal;

  s_axis_tready <= s_axis_tready_sig;

  m_axis_tvalid <= m_axis_tvalid_sig;

  m_axis_tlast <= m_axis_tlast_sig;

  m_axis_tdata <= m_axis_tdata_sig;

  rst_out <= rst_out_sig; 

  debug_out <= debug_out_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

