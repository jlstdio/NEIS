-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/axi_lite_sdrramp_src/axi_lite_sdrramp_src.vhd
-- Created: 2014-07-16 08:51:21
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_sdrramp_src
-- Source Path: axi_lite_sdrramp_src/axi_lite_sdrramp_src
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_sdrramp_src IS
    GENERIC (
        bit_width : integer := 64
    );
    PORT( clk                             :   IN    std_logic;  -- ufix1
        reset                             :   IN    std_logic;  -- ufix1
        stream_en                         :   IN    std_logic;  -- ufix1
        wr_src_sel                        :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        wr_cnt_max                        :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        data_in                           :   IN    std_logic_vector(bit_width - 1 DOWNTO 0);  -- ufix64
        data_vld                          :   IN    std_logic;  -- ufix1
        src_strobe                        :   OUT   std_logic;  -- ufix1
        src_out                           :   OUT   std_logic_vector(bit_width - 1 DOWNTO 0);  -- ufix64
        rd_src_sel                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        rd_cnt_max                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END axi_lite_sdrramp_src;


ARCHITECTURE rtl OF axi_lite_sdrramp_src IS

  -- Component Declarations
  COMPONENT SDRRampSrc
    GENERIC (
        bit_width : integer := 64
    );
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;  -- ufix1
          stream_en                       :   IN    std_logic;  -- ufix1
          src_sel                         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          cnt_max                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          data_in                         :   IN    std_logic_vector(bit_width - 1 DOWNTO 0);  -- ufix64
          data_vld                        :   IN    std_logic;  -- ufix1
          src_strobe                      :   OUT   std_logic;  -- ufix1
          src_out                         :   OUT   std_logic_vector(bit_width - 1 DOWNTO 0)  -- ufix64
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SDRRampSrc
    USE ENTITY work.SDRRampSrc(rtl);

  -- Signals
  SIGNAL SDRRampSrc_out1                  : std_logic;  -- ufix1
  SIGNAL SDRRampSrc_out2                  : std_logic_vector(bit_width - 1 DOWNTO 0);  -- ufix64

BEGIN
  u_SDRRampSrc : SDRRampSrc
    GENERIC MAP (
        bit_width => bit_width
    )
    PORT MAP( clk => clk,  -- ufix1
              reset => reset,  -- ufix1
              stream_en => stream_en,  -- ufix1
              src_sel => wr_src_sel,  -- ufix2
              cnt_max => wr_cnt_max,  -- uint16
              data_in => data_in,  -- ufix64
              data_vld => data_vld,  -- ufix1
              src_strobe => SDRRampSrc_out1,  -- ufix1
              src_out => SDRRampSrc_out2  -- ufix64
              );

  src_strobe <= SDRRampSrc_out1;

  src_out <= SDRRampSrc_out2;

  rd_src_sel <= wr_src_sel;

  rd_cnt_max <= wr_cnt_max;

END rtl;

