-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\axi_lite_system_config\axi_lite_system_config_pcore_dut.vhd
-- Created: 2014-03-09 13:27:11
-- 
-- Generated by MATLAB 8.3 and HDL Coder 3.4
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_system_config_pcore_dut
-- Source Path: axi_lite_system_config_pcore/axi_lite_system_config_pcore_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_system_config_pcore_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        wr_rst_reg                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        wr_rxstrmenb_reg                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        rx_clk                            :   IN    std_logic;  -- ufix1
        g_reset                           :   IN    std_logic;  -- ufix1
        wr_rx_data_src_path               :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        wr_sysrst_reg                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        tx_clk                            :   IN    std_logic;  -- ufix1
        wr_tx_data_src_path               :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        wr_txstrmenb_reg                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        axi_awaddr                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        axi_wvalid                        :   IN    std_logic;  -- ufix1
        axi_awvalid                       :   IN    std_logic;  -- ufix1
        axi_wdata                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_ver_reg                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_hwinfo1_reg                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_hwinfo2_reg                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_hwinfo3_reg                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_hwinfo4_reg                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_hwinfo5_reg                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_hwinfo6_reg                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_hwinfo7_reg                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_hwinfo8_reg                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        i2c_reset                         :   OUT   std_logic;  -- ufix1
        rx_data_path_rst                  :   OUT   std_logic;  -- ufix1
        stream_enable_rx                  :   OUT   std_logic;  -- ufix1
        rd_rxstrmenb_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_rx_data_src_path               :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        dec_select                        :   OUT   std_logic;  -- ufix1
        dec_by_pass                       :   OUT   std_logic;  -- ufix1
        dut_rx_by_pass                    :   OUT   std_logic;  -- ufix1
        int_select                        :   OUT   std_logic;  -- ufix1
        int_by_pass                       :   OUT   std_logic;  -- ufix1
        dut_tx_by_pass                    :   OUT   std_logic;  -- ufix1
        tx_data_path_rst                  :   OUT   std_logic;  -- ufix1
        rd_tx_data_src_path               :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        rd_txstrmenb_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        stream_enable_tx                  :   OUT   std_logic  -- ufix1
        );
END axi_lite_system_config_pcore_dut;


ARCHITECTURE rtl OF axi_lite_system_config_pcore_dut IS

  -- Component Declarations
  COMPONENT axi_lite_system_config
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          wr_rst_reg                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          wr_rxstrmenb_reg                :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          rx_clk                          :   IN    std_logic;  -- ufix1
          g_reset                         :   IN    std_logic;  -- ufix1
          wr_rx_data_src_path             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          wr_sysrst_reg                   :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          tx_clk                          :   IN    std_logic;  -- ufix1
          wr_tx_data_src_path             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          wr_txstrmenb_reg                :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          axi_awaddr                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          axi_wvalid                      :   IN    std_logic;  -- ufix1
          axi_awvalid                     :   IN    std_logic;  -- ufix1
          axi_wdata                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_ver_reg                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_hwinfo1_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_hwinfo2_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_hwinfo3_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_hwinfo4_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_hwinfo5_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_hwinfo6_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_hwinfo7_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_hwinfo8_reg                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          i2c_reset                       :   OUT   std_logic;  -- ufix1
          rx_data_path_rst                :   OUT   std_logic;  -- ufix1
          stream_enable_rx                :   OUT   std_logic;  -- ufix1
          rd_rxstrmenb_reg                :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_rx_data_src_path             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          dec_select                      :   OUT   std_logic;  -- ufix1
          dec_by_pass                     :   OUT   std_logic;  -- ufix1
          dut_rx_by_pass                  :   OUT   std_logic;  -- ufix1
          int_select                      :   OUT   std_logic;  -- ufix1
          int_by_pass                     :   OUT   std_logic;  -- ufix1
          dut_tx_by_pass                  :   OUT   std_logic;  -- ufix1
          tx_data_path_rst                :   OUT   std_logic;  -- ufix1
          rd_tx_data_src_path             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_txstrmenb_reg                :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          stream_enable_tx                :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi_lite_system_config
    USE ENTITY work.axi_lite_system_config(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL rx_clk_sig                       : std_logic;  -- ufix1
  SIGNAL g_reset_sig                      : std_logic;  -- ufix1
  SIGNAL tx_clk_sig                       : std_logic;  -- ufix1
  SIGNAL axi_wvalid_sig                   : std_logic;  -- ufix1
  SIGNAL axi_awvalid_sig                  : std_logic;  -- ufix1
  SIGNAL rd_ver_reg_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_hwinfo1_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_hwinfo2_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_hwinfo3_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_hwinfo4_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_hwinfo5_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_hwinfo6_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_hwinfo7_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_hwinfo8_reg_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL i2c_reset_sig                    : std_logic;  -- ufix1
  SIGNAL rx_data_path_rst_sig             : std_logic;  -- ufix1
  SIGNAL stream_enable_rx_sig             : std_logic;  -- ufix1
  SIGNAL rd_rxstrmenb_reg_sig             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rd_rx_data_src_path_sig          : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL dec_select_sig                   : std_logic;  -- ufix1
  SIGNAL dec_by_pass_sig                  : std_logic;  -- ufix1
  SIGNAL dut_rx_by_pass_sig               : std_logic;  -- ufix1
  SIGNAL int_select_sig                   : std_logic;  -- ufix1
  SIGNAL int_by_pass_sig                  : std_logic;  -- ufix1
  SIGNAL dut_tx_by_pass_sig               : std_logic;  -- ufix1
  SIGNAL tx_data_path_rst_sig             : std_logic;  -- ufix1
  SIGNAL rd_tx_data_src_path_sig          : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_txstrmenb_reg_sig             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL stream_enable_tx_sig             : std_logic;  -- ufix1

BEGIN
  u_axi_lite_system_config : axi_lite_system_config
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              wr_rst_reg => wr_rst_reg,  -- ufix32
              wr_rxstrmenb_reg => wr_rxstrmenb_reg,  -- ufix32
              rx_clk => rx_clk_sig,  -- ufix1
              g_reset => g_reset_sig,  -- ufix1
              wr_rx_data_src_path => wr_rx_data_src_path,  -- ufix3
              wr_sysrst_reg => wr_sysrst_reg,  -- ufix8
              tx_clk => tx_clk_sig,  -- ufix1
              wr_tx_data_src_path => wr_tx_data_src_path,  -- ufix3
              wr_txstrmenb_reg => wr_txstrmenb_reg,  -- ufix32
              axi_awaddr => axi_awaddr,  -- ufix32
              axi_wvalid => axi_wvalid_sig,  -- ufix1
              axi_awvalid => axi_awvalid_sig,  -- ufix1
              axi_wdata => axi_wdata,  -- ufix32
              rd_ver_reg => rd_ver_reg_sig,  -- ufix32
              rd_hwinfo1_reg => rd_hwinfo1_reg_sig,  -- ufix32
              rd_hwinfo2_reg => rd_hwinfo2_reg_sig,  -- ufix32
              rd_hwinfo3_reg => rd_hwinfo3_reg_sig,  -- ufix32
              rd_hwinfo4_reg => rd_hwinfo4_reg_sig,  -- ufix32
              rd_hwinfo5_reg => rd_hwinfo5_reg_sig,  -- ufix32
              rd_hwinfo6_reg => rd_hwinfo6_reg_sig,  -- ufix32
              rd_hwinfo7_reg => rd_hwinfo7_reg_sig,  -- ufix32
              rd_hwinfo8_reg => rd_hwinfo8_reg_sig,  -- ufix32
              i2c_reset => i2c_reset_sig,  -- ufix1
              rx_data_path_rst => rx_data_path_rst_sig,  -- ufix1
              stream_enable_rx => stream_enable_rx_sig,  -- ufix1
              rd_rxstrmenb_reg => rd_rxstrmenb_reg_sig,  -- ufix32
              rd_rx_data_src_path => rd_rx_data_src_path_sig,  -- ufix3
              dec_select => dec_select_sig,  -- ufix1
              dec_by_pass => dec_by_pass_sig,  -- ufix1
              dut_rx_by_pass => dut_rx_by_pass_sig,  -- ufix1
              int_select => int_select_sig,  -- ufix1
              int_by_pass => int_by_pass_sig,  -- ufix1
              dut_tx_by_pass => dut_tx_by_pass_sig,  -- ufix1
              tx_data_path_rst => tx_data_path_rst_sig,  -- ufix1
              rd_tx_data_src_path => rd_tx_data_src_path_sig,  -- ufix3
              rd_txstrmenb_reg => rd_txstrmenb_reg_sig,  -- ufix32
              stream_enable_tx => stream_enable_tx_sig  -- ufix1
              );

  rx_clk_sig <= rx_clk;

  g_reset_sig <= g_reset;

  tx_clk_sig <= tx_clk;

  axi_wvalid_sig <= axi_wvalid;

  axi_awvalid_sig <= axi_awvalid;

  enb <= dut_enable;

  rd_ver_reg <= rd_ver_reg_sig;

  rd_hwinfo1_reg <= rd_hwinfo1_reg_sig;

  rd_hwinfo2_reg <= rd_hwinfo2_reg_sig;

  rd_hwinfo3_reg <= rd_hwinfo3_reg_sig;

  rd_hwinfo4_reg <= rd_hwinfo4_reg_sig;

  rd_hwinfo5_reg <= rd_hwinfo5_reg_sig;

  rd_hwinfo6_reg <= rd_hwinfo6_reg_sig;

  rd_hwinfo7_reg <= rd_hwinfo7_reg_sig;

  rd_hwinfo8_reg <= rd_hwinfo8_reg_sig;

  i2c_reset <= i2c_reset_sig;

  rx_data_path_rst <= rx_data_path_rst_sig;

  stream_enable_rx <= stream_enable_rx_sig;

  rd_rxstrmenb_reg <= rd_rxstrmenb_reg_sig;

  rd_rx_data_src_path <= rd_rx_data_src_path_sig;

  dec_select <= dec_select_sig;

  dec_by_pass <= dec_by_pass_sig;

  dut_rx_by_pass <= dut_rx_by_pass_sig;

  int_select <= int_select_sig;

  int_by_pass <= int_by_pass_sig;

  dut_tx_by_pass <= dut_tx_by_pass_sig;

  tx_data_path_rst <= tx_data_path_rst_sig;

  rd_tx_data_src_path <= rd_tx_data_src_path_sig;

  rd_txstrmenb_reg <= rd_txstrmenb_reg_sig;

  stream_enable_tx <= stream_enable_tx_sig;

END rtl;

