-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/axi_lite_sdrramp_src/axi_lite_sdrramp_src_pcore_addr_decoder.vhd
-- Created: 2014-07-16 08:51:28
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_sdrramp_src_pcore_addr_decoder
-- Source Path: axi_lite_sdrramp_src__pcore/axi_lite_sdrramp_src__pcore_axi_lite/axi_lite_sdrramp_src__pcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_sdrramp_src_pcore_addr_decoder IS
  PORT( clk_in                            :   IN    std_logic;
        reset_in                          :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_rd_src_sel                   :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_cnt_max                   :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_src_sel                  :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_cnt_max                  :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16
        );
END axi_lite_sdrramp_src_pcore_addr_decoder;


ARCHITECTURE rtl OF axi_lite_sdrramp_src_pcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_rd_src_sel            : std_logic;  -- ufix1
  SIGNAL read_rd_src_sel_unsigned         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_rd_cnt_max_unsigned         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL decode_sel_rd_cnt_max            : std_logic;  -- ufix1
  SIGNAL const_z                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_src_sel              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_in_rd_src_sel               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_src_sel             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_cnt_max              : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_in_rd_cnt_max               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_cnt_max             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_wr_src_sel               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_wr_src_sel            : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_src_sel               : std_logic;  -- ufix1
  SIGNAL write_reg_wr_src_sel             : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_in_wr_cnt_max               : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL decode_sel_wr_cnt_max            : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_cnt_max               : std_logic;  -- ufix1
  SIGNAL write_reg_wr_cnt_max             : unsigned(15 DOWNTO 0);  -- ufix16

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_rd_src_sel <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000011#, 14) ELSE
      '0';

  read_rd_src_sel_unsigned <= unsigned(read_rd_src_sel);

  const_1 <= '1';

  enb <= const_1;

  read_rd_cnt_max_unsigned <= unsigned(read_rd_cnt_max);

  
  decode_sel_rd_cnt_max <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000100#, 14) ELSE
      '0';

  const_z <= (OTHERS => '0');


  reg_rd_src_sel_process : PROCESS (clk_in, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      read_reg_rd_src_sel <= to_unsigned(2#00#, 2);
    ELSIF clk_in'EVENT AND clk_in = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_src_sel <= read_rd_src_sel_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_src_sel_process;

  data_in_rd_src_sel <= resize(read_reg_rd_src_sel, 32);

  
  decode_rd_rd_src_sel <= const_z WHEN decode_sel_rd_src_sel = '0' ELSE
      data_in_rd_src_sel;

  reg_rd_cnt_max_process : PROCESS (clk_in, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      read_reg_rd_cnt_max <= to_unsigned(16#0000#, 16);
    ELSIF clk_in'EVENT AND clk_in = '1' THEN
      IF enb = '1' THEN
        read_reg_rd_cnt_max <= read_rd_cnt_max_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_cnt_max_process;

  data_in_rd_cnt_max <= resize(read_reg_rd_cnt_max, 32);

  
  decode_rd_rd_cnt_max <= decode_rd_rd_src_sel WHEN decode_sel_rd_cnt_max = '0' ELSE
      data_in_rd_cnt_max;

  data_read <= std_logic_vector(decode_rd_rd_cnt_max);

  data_write_unsigned <= unsigned(data_write);

  data_in_wr_src_sel <= data_write_unsigned(1 DOWNTO 0);

  
  decode_sel_wr_src_sel <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000000#, 14) ELSE
      '0';

  reg_enb_wr_src_sel <= decode_sel_wr_src_sel AND wr_enb;

  reg_wr_src_sel_process : PROCESS (clk_in, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      write_reg_wr_src_sel <= to_unsigned(2#00#, 2);
    ELSIF clk_in'EVENT AND clk_in = '1' THEN
      IF enb = '1' AND reg_enb_wr_src_sel = '1' THEN
        write_reg_wr_src_sel <= data_in_wr_src_sel;
      END IF;
    END IF;
  END PROCESS reg_wr_src_sel_process;

  write_wr_src_sel <= std_logic_vector(write_reg_wr_src_sel);

  data_in_wr_cnt_max <= data_write_unsigned(15 DOWNTO 0);

  
  decode_sel_wr_cnt_max <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000001#, 14) ELSE
      '0';

  reg_enb_wr_cnt_max <= decode_sel_wr_cnt_max AND wr_enb;

  reg_wr_cnt_max_process : PROCESS (clk_in, reset_in)
  BEGIN
    IF reset_in = '1' THEN
      write_reg_wr_cnt_max <= to_unsigned(16#0000#, 16);
    ELSIF clk_in'EVENT AND clk_in = '1' THEN
      IF enb = '1' AND reg_enb_wr_cnt_max = '1' THEN
        write_reg_wr_cnt_max <= data_in_wr_cnt_max;
      END IF;
    END IF;
  END PROCESS reg_wr_cnt_max_process;

  write_wr_cnt_max <= std_logic_vector(write_reg_wr_cnt_max);

END rtl;

