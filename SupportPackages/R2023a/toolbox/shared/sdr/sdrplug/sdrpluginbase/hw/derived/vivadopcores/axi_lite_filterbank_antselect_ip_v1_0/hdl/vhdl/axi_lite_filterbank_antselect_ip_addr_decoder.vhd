-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\filterbank_antselect_io\axi_lite_filterbank_antselect_ip_addr_decoder.vhd
-- Created: 2016-05-02 18:40:52
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi_lite_filterbank_antselect_ip_addr_decoder
-- Source Path: axi_lite_filterbank_antselect_ip/axi_lite_filterbank_antselect_ip_axi_lite/axi_lite_filterbank_antselect_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi_lite_filterbank_antselect_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_rd_TX_BANDSEL                :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        read_rd_RX1_BANDSEL               :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        read_rd_RX2_BANDSEL               :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        read_rd_RX1B_BANDSEL              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_RX1C_BANDSEL              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_RX2B_BANDSEL              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_RX2C_BANDSEL              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_rd_TX_ENABLE1A               :   IN    std_logic;  -- ufix1
        read_rd_TX_ENABLE2A               :   IN    std_logic;  -- ufix1
        read_rd_TX_ENABLE1B               :   IN    std_logic;  -- ufix1
        read_rd_TX_ENABLE2B               :   IN    std_logic;  -- ufix1
        read_rd_VCTXRX1_V1                :   IN    std_logic;  -- ufix1
        read_rd_VCTXRX1_V2                :   IN    std_logic;  -- ufix1
        read_rd_VCTXRX2_V1                :   IN    std_logic;  -- ufix1
        read_rd_VCTXRX2_V2                :   IN    std_logic;  -- ufix1
        read_rd_VCRX1_V1                  :   IN    std_logic;  -- ufix1
        read_rd_VCRX1_V2                  :   IN    std_logic;  -- ufix1
        read_rd_VCRX2_V1                  :   IN    std_logic;  -- ufix1
        read_rd_VCRX2_V2                  :   IN    std_logic;  -- ufix1
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_wr_TX_BANDSEL               :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        write_wr_RX1_BANDSEL              :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        write_wr_RX2_BANDSEL              :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        write_wr_RX1B_BANDSEL             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_RX1C_BANDSEL             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_RX2B_BANDSEL             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_RX2C_BANDSEL             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        write_wr_TX_ENABLE1A              :   OUT   std_logic;  -- ufix1
        write_wr_TX_ENABLE2A              :   OUT   std_logic;  -- ufix1
        write_wr_TX_ENABLE1B              :   OUT   std_logic;  -- ufix1
        write_wr_TX_ENABLE2B              :   OUT   std_logic;  -- ufix1
        write_wr_VCTXRX1_V1               :   OUT   std_logic;  -- ufix1
        write_wr_VCTXRX1_V2               :   OUT   std_logic;  -- ufix1
        write_wr_VCTXRX2_V1               :   OUT   std_logic;  -- ufix1
        write_wr_VCTXRX2_V2               :   OUT   std_logic;  -- ufix1
        write_wr_VCRX1_V1                 :   OUT   std_logic;  -- ufix1
        write_wr_VCRX1_V2                 :   OUT   std_logic;  -- ufix1
        write_wr_VCRX2_V1                 :   OUT   std_logic;  -- ufix1
        write_wr_VCRX2_V2                 :   OUT   std_logic  -- ufix1
        );
END axi_lite_filterbank_antselect_ip_addr_decoder;


ARCHITECTURE rtl OF axi_lite_filterbank_antselect_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_rd_TX_BANDSEL         : std_logic;  -- ufix1
  SIGNAL read_rd_TX_BANDSEL_unsigned      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_rd_RX1_BANDSEL_unsigned     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL read_rd_RX2_BANDSEL_unsigned     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL read_rd_RX1B_BANDSEL_unsigned    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL read_rd_RX1C_BANDSEL_unsigned    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL read_rd_RX2B_BANDSEL_unsigned    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL read_rd_RX2C_BANDSEL_unsigned    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_rd_VCRX2_V2           : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_VCRX2_V1           : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_VCRX1_V2           : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_VCRX1_V1           : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_VCTXRX2_V2         : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_VCTXRX2_V1         : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_VCTXRX1_V2         : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_VCTXRX1_V1         : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_TX_ENABLE2B        : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_TX_ENABLE1B        : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_TX_ENABLE2A        : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_TX_ENABLE1A        : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_RX2C_BANDSEL       : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_RX2B_BANDSEL       : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_RX1C_BANDSEL       : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_RX1B_BANDSEL       : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_RX2_BANDSEL        : std_logic;  -- ufix1
  SIGNAL decode_sel_rd_RX1_BANDSEL        : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_TX_BANDSEL           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL data_in_rd_TX_BANDSEL            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_TX_BANDSEL          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_RX1_BANDSEL          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL data_in_rd_RX1_BANDSEL           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_RX1_BANDSEL         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_RX2_BANDSEL          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL data_in_rd_RX2_BANDSEL           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_RX2_BANDSEL         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_RX1B_BANDSEL         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_in_rd_RX1B_BANDSEL          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_RX1B_BANDSEL        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_RX1C_BANDSEL         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_in_rd_RX1C_BANDSEL          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_RX1C_BANDSEL        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_RX2B_BANDSEL         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_in_rd_RX2B_BANDSEL          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_RX2B_BANDSEL        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_RX2C_BANDSEL         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_in_rd_RX2C_BANDSEL          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_RX2C_BANDSEL        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_TX_ENABLE1A          : std_logic;  -- ufix1
  SIGNAL data_in_rd_TX_ENABLE1A           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_TX_ENABLE1A         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_TX_ENABLE2A          : std_logic;  -- ufix1
  SIGNAL data_in_rd_TX_ENABLE2A           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_TX_ENABLE2A         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_TX_ENABLE1B          : std_logic;  -- ufix1
  SIGNAL data_in_rd_TX_ENABLE1B           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_TX_ENABLE1B         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_TX_ENABLE2B          : std_logic;  -- ufix1
  SIGNAL data_in_rd_TX_ENABLE2B           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_TX_ENABLE2B         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_VCTXRX1_V1           : std_logic;  -- ufix1
  SIGNAL data_in_rd_VCTXRX1_V1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_VCTXRX1_V1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_VCTXRX1_V2           : std_logic;  -- ufix1
  SIGNAL data_in_rd_VCTXRX1_V2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_VCTXRX1_V2          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_VCTXRX2_V1           : std_logic;  -- ufix1
  SIGNAL data_in_rd_VCTXRX2_V1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_VCTXRX2_V1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_VCTXRX2_V2           : std_logic;  -- ufix1
  SIGNAL data_in_rd_VCTXRX2_V2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_VCTXRX2_V2          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_VCRX1_V1             : std_logic;  -- ufix1
  SIGNAL data_in_rd_VCRX1_V1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_VCRX1_V1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_VCRX1_V2             : std_logic;  -- ufix1
  SIGNAL data_in_rd_VCRX1_V2              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_VCRX1_V2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_VCRX2_V1             : std_logic;  -- ufix1
  SIGNAL data_in_rd_VCRX2_V1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_VCRX2_V1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_rd_VCRX2_V2             : std_logic;  -- ufix1
  SIGNAL data_in_rd_VCRX2_V2              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_rd_VCRX2_V2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_wr_TX_BANDSEL         : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_TX_BANDSEL            : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_wr_TX_BANDSEL            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL write_reg_wr_TX_BANDSEL          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL decode_sel_wr_RX1_BANDSEL        : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_RX1_BANDSEL           : std_logic;  -- ufix1
  SIGNAL data_in_wr_RX1_BANDSEL           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL write_reg_wr_RX1_BANDSEL         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL decode_sel_wr_RX2_BANDSEL        : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_RX2_BANDSEL           : std_logic;  -- ufix1
  SIGNAL data_in_wr_RX2_BANDSEL           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL write_reg_wr_RX2_BANDSEL         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL decode_sel_wr_RX1B_BANDSEL       : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_RX1B_BANDSEL          : std_logic;  -- ufix1
  SIGNAL data_in_wr_RX1B_BANDSEL          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL write_reg_wr_RX1B_BANDSEL        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_wr_RX1C_BANDSEL       : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_RX1C_BANDSEL          : std_logic;  -- ufix1
  SIGNAL data_in_wr_RX1C_BANDSEL          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL write_reg_wr_RX1C_BANDSEL        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_wr_RX2B_BANDSEL       : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_RX2B_BANDSEL          : std_logic;  -- ufix1
  SIGNAL data_in_wr_RX2B_BANDSEL          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL write_reg_wr_RX2B_BANDSEL        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_wr_RX2C_BANDSEL       : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_RX2C_BANDSEL          : std_logic;  -- ufix1
  SIGNAL data_in_wr_RX2C_BANDSEL          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL write_reg_wr_RX2C_BANDSEL        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_wr_TX_ENABLE1A        : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_TX_ENABLE1A           : std_logic;  -- ufix1
  SIGNAL data_in_wr_TX_ENABLE1A           : std_logic;  -- ufix1
  SIGNAL write_reg_wr_TX_ENABLE1A         : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_TX_ENABLE2A        : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_TX_ENABLE2A           : std_logic;  -- ufix1
  SIGNAL data_in_wr_TX_ENABLE2A           : std_logic;  -- ufix1
  SIGNAL write_reg_wr_TX_ENABLE2A         : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_TX_ENABLE1B        : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_TX_ENABLE1B           : std_logic;  -- ufix1
  SIGNAL data_in_wr_TX_ENABLE1B           : std_logic;  -- ufix1
  SIGNAL write_reg_wr_TX_ENABLE1B         : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_TX_ENABLE2B        : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_TX_ENABLE2B           : std_logic;  -- ufix1
  SIGNAL data_in_wr_TX_ENABLE2B           : std_logic;  -- ufix1
  SIGNAL write_reg_wr_TX_ENABLE2B         : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_VCTXRX1_V1         : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_VCTXRX1_V1            : std_logic;  -- ufix1
  SIGNAL data_in_wr_VCTXRX1_V1            : std_logic;  -- ufix1
  SIGNAL write_reg_wr_VCTXRX1_V1          : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_VCTXRX1_V2         : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_VCTXRX1_V2            : std_logic;  -- ufix1
  SIGNAL data_in_wr_VCTXRX1_V2            : std_logic;  -- ufix1
  SIGNAL write_reg_wr_VCTXRX1_V2          : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_VCTXRX2_V1         : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_VCTXRX2_V1            : std_logic;  -- ufix1
  SIGNAL data_in_wr_VCTXRX2_V1            : std_logic;  -- ufix1
  SIGNAL write_reg_wr_VCTXRX2_V1          : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_VCTXRX2_V2         : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_VCTXRX2_V2            : std_logic;  -- ufix1
  SIGNAL data_in_wr_VCTXRX2_V2            : std_logic;  -- ufix1
  SIGNAL write_reg_wr_VCTXRX2_V2          : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_VCRX1_V1           : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_VCRX1_V1              : std_logic;  -- ufix1
  SIGNAL data_in_wr_VCRX1_V1              : std_logic;  -- ufix1
  SIGNAL write_reg_wr_VCRX1_V1            : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_VCRX1_V2           : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_VCRX1_V2              : std_logic;  -- ufix1
  SIGNAL data_in_wr_VCRX1_V2              : std_logic;  -- ufix1
  SIGNAL write_reg_wr_VCRX1_V2            : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_VCRX2_V1           : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_VCRX2_V1              : std_logic;  -- ufix1
  SIGNAL data_in_wr_VCRX2_V1              : std_logic;  -- ufix1
  SIGNAL write_reg_wr_VCRX2_V1            : std_logic;  -- ufix1
  SIGNAL decode_sel_wr_VCRX2_V2           : std_logic;  -- ufix1
  SIGNAL reg_enb_wr_VCRX2_V2              : std_logic;  -- ufix1
  SIGNAL data_in_wr_VCRX2_V2              : std_logic;  -- ufix1
  SIGNAL write_reg_wr_VCRX2_V2            : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_rd_TX_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0053#, 14) ELSE
      '0';

  read_rd_TX_BANDSEL_unsigned <= unsigned(read_rd_TX_BANDSEL);

  const_1 <= '1';

  enb <= const_1;

  read_rd_RX1_BANDSEL_unsigned <= unsigned(read_rd_RX1_BANDSEL);

  read_rd_RX2_BANDSEL_unsigned <= unsigned(read_rd_RX2_BANDSEL);

  read_rd_RX1B_BANDSEL_unsigned <= unsigned(read_rd_RX1B_BANDSEL);

  read_rd_RX1C_BANDSEL_unsigned <= unsigned(read_rd_RX1C_BANDSEL);

  read_rd_RX2B_BANDSEL_unsigned <= unsigned(read_rd_RX2B_BANDSEL);

  read_rd_RX2C_BANDSEL_unsigned <= unsigned(read_rd_RX2C_BANDSEL);

  
  decode_sel_rd_VCRX2_V2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0065#, 14) ELSE
      '0';

  
  decode_sel_rd_VCRX2_V1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0064#, 14) ELSE
      '0';

  
  decode_sel_rd_VCRX1_V2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0063#, 14) ELSE
      '0';

  
  decode_sel_rd_VCRX1_V1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0062#, 14) ELSE
      '0';

  
  decode_sel_rd_VCTXRX2_V2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0061#, 14) ELSE
      '0';

  
  decode_sel_rd_VCTXRX2_V1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0060#, 14) ELSE
      '0';

  
  decode_sel_rd_VCTXRX1_V2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005F#, 14) ELSE
      '0';

  
  decode_sel_rd_VCTXRX1_V1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005E#, 14) ELSE
      '0';

  
  decode_sel_rd_TX_ENABLE2B <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005D#, 14) ELSE
      '0';

  
  decode_sel_rd_TX_ENABLE1B <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005C#, 14) ELSE
      '0';

  
  decode_sel_rd_TX_ENABLE2A <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005B#, 14) ELSE
      '0';

  
  decode_sel_rd_TX_ENABLE1A <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005A#, 14) ELSE
      '0';

  
  decode_sel_rd_RX2C_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0059#, 14) ELSE
      '0';

  
  decode_sel_rd_RX2B_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0058#, 14) ELSE
      '0';

  
  decode_sel_rd_RX1C_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0057#, 14) ELSE
      '0';

  
  decode_sel_rd_RX1B_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0056#, 14) ELSE
      '0';

  
  decode_sel_rd_RX2_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0055#, 14) ELSE
      '0';

  
  decode_sel_rd_RX1_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0054#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_rd_TX_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_TX_BANDSEL <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        read_reg_rd_TX_BANDSEL <= read_rd_TX_BANDSEL_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_TX_BANDSEL_process;


  data_in_rd_TX_BANDSEL <= resize(read_reg_rd_TX_BANDSEL, 32);

  
  decode_rd_rd_TX_BANDSEL <= const_0 WHEN decode_sel_rd_TX_BANDSEL = '0' ELSE
      data_in_rd_TX_BANDSEL;

  reg_rd_RX1_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_RX1_BANDSEL <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        read_reg_rd_RX1_BANDSEL <= read_rd_RX1_BANDSEL_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_RX1_BANDSEL_process;


  data_in_rd_RX1_BANDSEL <= resize(read_reg_rd_RX1_BANDSEL, 32);

  
  decode_rd_rd_RX1_BANDSEL <= decode_rd_rd_TX_BANDSEL WHEN decode_sel_rd_RX1_BANDSEL = '0' ELSE
      data_in_rd_RX1_BANDSEL;

  reg_rd_RX2_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_RX2_BANDSEL <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        read_reg_rd_RX2_BANDSEL <= read_rd_RX2_BANDSEL_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_RX2_BANDSEL_process;


  data_in_rd_RX2_BANDSEL <= resize(read_reg_rd_RX2_BANDSEL, 32);

  
  decode_rd_rd_RX2_BANDSEL <= decode_rd_rd_RX1_BANDSEL WHEN decode_sel_rd_RX2_BANDSEL = '0' ELSE
      data_in_rd_RX2_BANDSEL;

  reg_rd_RX1B_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_RX1B_BANDSEL <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        read_reg_rd_RX1B_BANDSEL <= read_rd_RX1B_BANDSEL_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_RX1B_BANDSEL_process;


  data_in_rd_RX1B_BANDSEL <= resize(read_reg_rd_RX1B_BANDSEL, 32);

  
  decode_rd_rd_RX1B_BANDSEL <= decode_rd_rd_RX2_BANDSEL WHEN decode_sel_rd_RX1B_BANDSEL = '0' ELSE
      data_in_rd_RX1B_BANDSEL;

  reg_rd_RX1C_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_RX1C_BANDSEL <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        read_reg_rd_RX1C_BANDSEL <= read_rd_RX1C_BANDSEL_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_RX1C_BANDSEL_process;


  data_in_rd_RX1C_BANDSEL <= resize(read_reg_rd_RX1C_BANDSEL, 32);

  
  decode_rd_rd_RX1C_BANDSEL <= decode_rd_rd_RX1B_BANDSEL WHEN decode_sel_rd_RX1C_BANDSEL = '0' ELSE
      data_in_rd_RX1C_BANDSEL;

  reg_rd_RX2B_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_RX2B_BANDSEL <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        read_reg_rd_RX2B_BANDSEL <= read_rd_RX2B_BANDSEL_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_RX2B_BANDSEL_process;


  data_in_rd_RX2B_BANDSEL <= resize(read_reg_rd_RX2B_BANDSEL, 32);

  
  decode_rd_rd_RX2B_BANDSEL <= decode_rd_rd_RX1C_BANDSEL WHEN decode_sel_rd_RX2B_BANDSEL = '0' ELSE
      data_in_rd_RX2B_BANDSEL;

  reg_rd_RX2C_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_RX2C_BANDSEL <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        read_reg_rd_RX2C_BANDSEL <= read_rd_RX2C_BANDSEL_unsigned;
      END IF;
    END IF;
  END PROCESS reg_rd_RX2C_BANDSEL_process;


  data_in_rd_RX2C_BANDSEL <= resize(read_reg_rd_RX2C_BANDSEL, 32);

  
  decode_rd_rd_RX2C_BANDSEL <= decode_rd_rd_RX2B_BANDSEL WHEN decode_sel_rd_RX2C_BANDSEL = '0' ELSE
      data_in_rd_RX2C_BANDSEL;

  reg_rd_TX_ENABLE1A_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_TX_ENABLE1A <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_TX_ENABLE1A <= read_rd_TX_ENABLE1A;
      END IF;
    END IF;
  END PROCESS reg_rd_TX_ENABLE1A_process;


  data_in_rd_TX_ENABLE1A <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_TX_ENABLE1A;

  
  decode_rd_rd_TX_ENABLE1A <= decode_rd_rd_RX2C_BANDSEL WHEN decode_sel_rd_TX_ENABLE1A = '0' ELSE
      data_in_rd_TX_ENABLE1A;

  reg_rd_TX_ENABLE2A_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_TX_ENABLE2A <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_TX_ENABLE2A <= read_rd_TX_ENABLE2A;
      END IF;
    END IF;
  END PROCESS reg_rd_TX_ENABLE2A_process;


  data_in_rd_TX_ENABLE2A <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_TX_ENABLE2A;

  
  decode_rd_rd_TX_ENABLE2A <= decode_rd_rd_TX_ENABLE1A WHEN decode_sel_rd_TX_ENABLE2A = '0' ELSE
      data_in_rd_TX_ENABLE2A;

  reg_rd_TX_ENABLE1B_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_TX_ENABLE1B <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_TX_ENABLE1B <= read_rd_TX_ENABLE1B;
      END IF;
    END IF;
  END PROCESS reg_rd_TX_ENABLE1B_process;


  data_in_rd_TX_ENABLE1B <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_TX_ENABLE1B;

  
  decode_rd_rd_TX_ENABLE1B <= decode_rd_rd_TX_ENABLE2A WHEN decode_sel_rd_TX_ENABLE1B = '0' ELSE
      data_in_rd_TX_ENABLE1B;

  reg_rd_TX_ENABLE2B_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_TX_ENABLE2B <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_TX_ENABLE2B <= read_rd_TX_ENABLE2B;
      END IF;
    END IF;
  END PROCESS reg_rd_TX_ENABLE2B_process;


  data_in_rd_TX_ENABLE2B <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_TX_ENABLE2B;

  
  decode_rd_rd_TX_ENABLE2B <= decode_rd_rd_TX_ENABLE1B WHEN decode_sel_rd_TX_ENABLE2B = '0' ELSE
      data_in_rd_TX_ENABLE2B;

  reg_rd_VCTXRX1_V1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_VCTXRX1_V1 <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_VCTXRX1_V1 <= read_rd_VCTXRX1_V1;
      END IF;
    END IF;
  END PROCESS reg_rd_VCTXRX1_V1_process;


  data_in_rd_VCTXRX1_V1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_VCTXRX1_V1;

  
  decode_rd_rd_VCTXRX1_V1 <= decode_rd_rd_TX_ENABLE2B WHEN decode_sel_rd_VCTXRX1_V1 = '0' ELSE
      data_in_rd_VCTXRX1_V1;

  reg_rd_VCTXRX1_V2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_VCTXRX1_V2 <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_VCTXRX1_V2 <= read_rd_VCTXRX1_V2;
      END IF;
    END IF;
  END PROCESS reg_rd_VCTXRX1_V2_process;


  data_in_rd_VCTXRX1_V2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_VCTXRX1_V2;

  
  decode_rd_rd_VCTXRX1_V2 <= decode_rd_rd_VCTXRX1_V1 WHEN decode_sel_rd_VCTXRX1_V2 = '0' ELSE
      data_in_rd_VCTXRX1_V2;

  reg_rd_VCTXRX2_V1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_VCTXRX2_V1 <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_VCTXRX2_V1 <= read_rd_VCTXRX2_V1;
      END IF;
    END IF;
  END PROCESS reg_rd_VCTXRX2_V1_process;


  data_in_rd_VCTXRX2_V1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_VCTXRX2_V1;

  
  decode_rd_rd_VCTXRX2_V1 <= decode_rd_rd_VCTXRX1_V2 WHEN decode_sel_rd_VCTXRX2_V1 = '0' ELSE
      data_in_rd_VCTXRX2_V1;

  reg_rd_VCTXRX2_V2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_VCTXRX2_V2 <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_VCTXRX2_V2 <= read_rd_VCTXRX2_V2;
      END IF;
    END IF;
  END PROCESS reg_rd_VCTXRX2_V2_process;


  data_in_rd_VCTXRX2_V2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_VCTXRX2_V2;

  
  decode_rd_rd_VCTXRX2_V2 <= decode_rd_rd_VCTXRX2_V1 WHEN decode_sel_rd_VCTXRX2_V2 = '0' ELSE
      data_in_rd_VCTXRX2_V2;

  reg_rd_VCRX1_V1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_VCRX1_V1 <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_VCRX1_V1 <= read_rd_VCRX1_V1;
      END IF;
    END IF;
  END PROCESS reg_rd_VCRX1_V1_process;


  data_in_rd_VCRX1_V1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_VCRX1_V1;

  
  decode_rd_rd_VCRX1_V1 <= decode_rd_rd_VCTXRX2_V2 WHEN decode_sel_rd_VCRX1_V1 = '0' ELSE
      data_in_rd_VCRX1_V1;

  reg_rd_VCRX1_V2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_VCRX1_V2 <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_VCRX1_V2 <= read_rd_VCRX1_V2;
      END IF;
    END IF;
  END PROCESS reg_rd_VCRX1_V2_process;


  data_in_rd_VCRX1_V2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_VCRX1_V2;

  
  decode_rd_rd_VCRX1_V2 <= decode_rd_rd_VCRX1_V1 WHEN decode_sel_rd_VCRX1_V2 = '0' ELSE
      data_in_rd_VCRX1_V2;

  reg_rd_VCRX2_V1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_VCRX2_V1 <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_VCRX2_V1 <= read_rd_VCRX2_V1;
      END IF;
    END IF;
  END PROCESS reg_rd_VCRX2_V1_process;


  data_in_rd_VCRX2_V1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_VCRX2_V1;

  
  decode_rd_rd_VCRX2_V1 <= decode_rd_rd_VCRX1_V2 WHEN decode_sel_rd_VCRX2_V1 = '0' ELSE
      data_in_rd_VCRX2_V1;

  reg_rd_VCRX2_V2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_rd_VCRX2_V2 <= '0';
      ELSIF enb = '1' THEN
        read_reg_rd_VCRX2_V2 <= read_rd_VCRX2_V2;
      END IF;
    END IF;
  END PROCESS reg_rd_VCRX2_V2_process;


  data_in_rd_VCRX2_V2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_rd_VCRX2_V2;

  
  decode_rd_rd_VCRX2_V2 <= decode_rd_rd_VCRX2_V1 WHEN decode_sel_rd_VCRX2_V2 = '0' ELSE
      data_in_rd_VCRX2_V2;

  data_read <= std_logic_vector(decode_rd_rd_VCRX2_V2);

  
  decode_sel_wr_TX_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_wr_TX_BANDSEL <= decode_sel_wr_TX_BANDSEL AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_wr_TX_BANDSEL <= data_write_unsigned(2 DOWNTO 0);

  reg_wr_TX_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_TX_BANDSEL <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' AND reg_enb_wr_TX_BANDSEL = '1' THEN
        write_reg_wr_TX_BANDSEL <= data_in_wr_TX_BANDSEL;
      END IF;
    END IF;
  END PROCESS reg_wr_TX_BANDSEL_process;


  write_wr_TX_BANDSEL <= std_logic_vector(write_reg_wr_TX_BANDSEL);

  
  decode_sel_wr_RX1_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_wr_RX1_BANDSEL <= decode_sel_wr_RX1_BANDSEL AND wr_enb;

  data_in_wr_RX1_BANDSEL <= data_write_unsigned(2 DOWNTO 0);

  reg_wr_RX1_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_RX1_BANDSEL <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' AND reg_enb_wr_RX1_BANDSEL = '1' THEN
        write_reg_wr_RX1_BANDSEL <= data_in_wr_RX1_BANDSEL;
      END IF;
    END IF;
  END PROCESS reg_wr_RX1_BANDSEL_process;


  write_wr_RX1_BANDSEL <= std_logic_vector(write_reg_wr_RX1_BANDSEL);

  
  decode_sel_wr_RX2_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_wr_RX2_BANDSEL <= decode_sel_wr_RX2_BANDSEL AND wr_enb;

  data_in_wr_RX2_BANDSEL <= data_write_unsigned(2 DOWNTO 0);

  reg_wr_RX2_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_RX2_BANDSEL <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' AND reg_enb_wr_RX2_BANDSEL = '1' THEN
        write_reg_wr_RX2_BANDSEL <= data_in_wr_RX2_BANDSEL;
      END IF;
    END IF;
  END PROCESS reg_wr_RX2_BANDSEL_process;


  write_wr_RX2_BANDSEL <= std_logic_vector(write_reg_wr_RX2_BANDSEL);

  
  decode_sel_wr_RX1B_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_wr_RX1B_BANDSEL <= decode_sel_wr_RX1B_BANDSEL AND wr_enb;

  data_in_wr_RX1B_BANDSEL <= data_write_unsigned(1 DOWNTO 0);

  reg_wr_RX1B_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_RX1B_BANDSEL <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' AND reg_enb_wr_RX1B_BANDSEL = '1' THEN
        write_reg_wr_RX1B_BANDSEL <= data_in_wr_RX1B_BANDSEL;
      END IF;
    END IF;
  END PROCESS reg_wr_RX1B_BANDSEL_process;


  write_wr_RX1B_BANDSEL <= std_logic_vector(write_reg_wr_RX1B_BANDSEL);

  
  decode_sel_wr_RX1C_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_wr_RX1C_BANDSEL <= decode_sel_wr_RX1C_BANDSEL AND wr_enb;

  data_in_wr_RX1C_BANDSEL <= data_write_unsigned(1 DOWNTO 0);

  reg_wr_RX1C_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_RX1C_BANDSEL <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' AND reg_enb_wr_RX1C_BANDSEL = '1' THEN
        write_reg_wr_RX1C_BANDSEL <= data_in_wr_RX1C_BANDSEL;
      END IF;
    END IF;
  END PROCESS reg_wr_RX1C_BANDSEL_process;


  write_wr_RX1C_BANDSEL <= std_logic_vector(write_reg_wr_RX1C_BANDSEL);

  
  decode_sel_wr_RX2B_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_wr_RX2B_BANDSEL <= decode_sel_wr_RX2B_BANDSEL AND wr_enb;

  data_in_wr_RX2B_BANDSEL <= data_write_unsigned(1 DOWNTO 0);

  reg_wr_RX2B_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_RX2B_BANDSEL <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' AND reg_enb_wr_RX2B_BANDSEL = '1' THEN
        write_reg_wr_RX2B_BANDSEL <= data_in_wr_RX2B_BANDSEL;
      END IF;
    END IF;
  END PROCESS reg_wr_RX2B_BANDSEL_process;


  write_wr_RX2B_BANDSEL <= std_logic_vector(write_reg_wr_RX2B_BANDSEL);

  
  decode_sel_wr_RX2C_BANDSEL <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_wr_RX2C_BANDSEL <= decode_sel_wr_RX2C_BANDSEL AND wr_enb;

  data_in_wr_RX2C_BANDSEL <= data_write_unsigned(1 DOWNTO 0);

  reg_wr_RX2C_BANDSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_RX2C_BANDSEL <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' AND reg_enb_wr_RX2C_BANDSEL = '1' THEN
        write_reg_wr_RX2C_BANDSEL <= data_in_wr_RX2C_BANDSEL;
      END IF;
    END IF;
  END PROCESS reg_wr_RX2C_BANDSEL_process;


  write_wr_RX2C_BANDSEL <= std_logic_vector(write_reg_wr_RX2C_BANDSEL);

  
  decode_sel_wr_TX_ENABLE1A <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_wr_TX_ENABLE1A <= decode_sel_wr_TX_ENABLE1A AND wr_enb;

  data_in_wr_TX_ENABLE1A <= data_write_unsigned(0);

  reg_wr_TX_ENABLE1A_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_TX_ENABLE1A <= '0';
      ELSIF enb = '1' AND reg_enb_wr_TX_ENABLE1A = '1' THEN
        write_reg_wr_TX_ENABLE1A <= data_in_wr_TX_ENABLE1A;
      END IF;
    END IF;
  END PROCESS reg_wr_TX_ENABLE1A_process;


  write_wr_TX_ENABLE1A <= write_reg_wr_TX_ENABLE1A;

  
  decode_sel_wr_TX_ENABLE2A <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_wr_TX_ENABLE2A <= decode_sel_wr_TX_ENABLE2A AND wr_enb;

  data_in_wr_TX_ENABLE2A <= data_write_unsigned(0);

  reg_wr_TX_ENABLE2A_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_TX_ENABLE2A <= '0';
      ELSIF enb = '1' AND reg_enb_wr_TX_ENABLE2A = '1' THEN
        write_reg_wr_TX_ENABLE2A <= data_in_wr_TX_ENABLE2A;
      END IF;
    END IF;
  END PROCESS reg_wr_TX_ENABLE2A_process;


  write_wr_TX_ENABLE2A <= write_reg_wr_TX_ENABLE2A;

  
  decode_sel_wr_TX_ENABLE1B <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_wr_TX_ENABLE1B <= decode_sel_wr_TX_ENABLE1B AND wr_enb;

  data_in_wr_TX_ENABLE1B <= data_write_unsigned(0);

  reg_wr_TX_ENABLE1B_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_TX_ENABLE1B <= '0';
      ELSIF enb = '1' AND reg_enb_wr_TX_ENABLE1B = '1' THEN
        write_reg_wr_TX_ENABLE1B <= data_in_wr_TX_ENABLE1B;
      END IF;
    END IF;
  END PROCESS reg_wr_TX_ENABLE1B_process;


  write_wr_TX_ENABLE1B <= write_reg_wr_TX_ENABLE1B;

  
  decode_sel_wr_TX_ENABLE2B <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_wr_TX_ENABLE2B <= decode_sel_wr_TX_ENABLE2B AND wr_enb;

  data_in_wr_TX_ENABLE2B <= data_write_unsigned(0);

  reg_wr_TX_ENABLE2B_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_TX_ENABLE2B <= '0';
      ELSIF enb = '1' AND reg_enb_wr_TX_ENABLE2B = '1' THEN
        write_reg_wr_TX_ENABLE2B <= data_in_wr_TX_ENABLE2B;
      END IF;
    END IF;
  END PROCESS reg_wr_TX_ENABLE2B_process;


  write_wr_TX_ENABLE2B <= write_reg_wr_TX_ENABLE2B;

  
  decode_sel_wr_VCTXRX1_V1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  reg_enb_wr_VCTXRX1_V1 <= decode_sel_wr_VCTXRX1_V1 AND wr_enb;

  data_in_wr_VCTXRX1_V1 <= data_write_unsigned(0);

  reg_wr_VCTXRX1_V1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_VCTXRX1_V1 <= '0';
      ELSIF enb = '1' AND reg_enb_wr_VCTXRX1_V1 = '1' THEN
        write_reg_wr_VCTXRX1_V1 <= data_in_wr_VCTXRX1_V1;
      END IF;
    END IF;
  END PROCESS reg_wr_VCTXRX1_V1_process;


  write_wr_VCTXRX1_V1 <= write_reg_wr_VCTXRX1_V1;

  
  decode_sel_wr_VCTXRX1_V2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  reg_enb_wr_VCTXRX1_V2 <= decode_sel_wr_VCTXRX1_V2 AND wr_enb;

  data_in_wr_VCTXRX1_V2 <= data_write_unsigned(0);

  reg_wr_VCTXRX1_V2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_VCTXRX1_V2 <= '0';
      ELSIF enb = '1' AND reg_enb_wr_VCTXRX1_V2 = '1' THEN
        write_reg_wr_VCTXRX1_V2 <= data_in_wr_VCTXRX1_V2;
      END IF;
    END IF;
  END PROCESS reg_wr_VCTXRX1_V2_process;


  write_wr_VCTXRX1_V2 <= write_reg_wr_VCTXRX1_V2;

  
  decode_sel_wr_VCTXRX2_V1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  reg_enb_wr_VCTXRX2_V1 <= decode_sel_wr_VCTXRX2_V1 AND wr_enb;

  data_in_wr_VCTXRX2_V1 <= data_write_unsigned(0);

  reg_wr_VCTXRX2_V1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_VCTXRX2_V1 <= '0';
      ELSIF enb = '1' AND reg_enb_wr_VCTXRX2_V1 = '1' THEN
        write_reg_wr_VCTXRX2_V1 <= data_in_wr_VCTXRX2_V1;
      END IF;
    END IF;
  END PROCESS reg_wr_VCTXRX2_V1_process;


  write_wr_VCTXRX2_V1 <= write_reg_wr_VCTXRX2_V1;

  
  decode_sel_wr_VCTXRX2_V2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  reg_enb_wr_VCTXRX2_V2 <= decode_sel_wr_VCTXRX2_V2 AND wr_enb;

  data_in_wr_VCTXRX2_V2 <= data_write_unsigned(0);

  reg_wr_VCTXRX2_V2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_VCTXRX2_V2 <= '0';
      ELSIF enb = '1' AND reg_enb_wr_VCTXRX2_V2 = '1' THEN
        write_reg_wr_VCTXRX2_V2 <= data_in_wr_VCTXRX2_V2;
      END IF;
    END IF;
  END PROCESS reg_wr_VCTXRX2_V2_process;


  write_wr_VCTXRX2_V2 <= write_reg_wr_VCTXRX2_V2;

  
  decode_sel_wr_VCRX1_V1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  reg_enb_wr_VCRX1_V1 <= decode_sel_wr_VCRX1_V1 AND wr_enb;

  data_in_wr_VCRX1_V1 <= data_write_unsigned(0);

  reg_wr_VCRX1_V1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_VCRX1_V1 <= '0';
      ELSIF enb = '1' AND reg_enb_wr_VCRX1_V1 = '1' THEN
        write_reg_wr_VCRX1_V1 <= data_in_wr_VCRX1_V1;
      END IF;
    END IF;
  END PROCESS reg_wr_VCRX1_V1_process;


  write_wr_VCRX1_V1 <= write_reg_wr_VCRX1_V1;

  
  decode_sel_wr_VCRX1_V2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  reg_enb_wr_VCRX1_V2 <= decode_sel_wr_VCRX1_V2 AND wr_enb;

  data_in_wr_VCRX1_V2 <= data_write_unsigned(0);

  reg_wr_VCRX1_V2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_VCRX1_V2 <= '0';
      ELSIF enb = '1' AND reg_enb_wr_VCRX1_V2 = '1' THEN
        write_reg_wr_VCRX1_V2 <= data_in_wr_VCRX1_V2;
      END IF;
    END IF;
  END PROCESS reg_wr_VCRX1_V2_process;


  write_wr_VCRX1_V2 <= write_reg_wr_VCRX1_V2;

  
  decode_sel_wr_VCRX2_V1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0051#, 14) ELSE
      '0';

  reg_enb_wr_VCRX2_V1 <= decode_sel_wr_VCRX2_V1 AND wr_enb;

  data_in_wr_VCRX2_V1 <= data_write_unsigned(0);

  reg_wr_VCRX2_V1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_VCRX2_V1 <= '0';
      ELSIF enb = '1' AND reg_enb_wr_VCRX2_V1 = '1' THEN
        write_reg_wr_VCRX2_V1 <= data_in_wr_VCRX2_V1;
      END IF;
    END IF;
  END PROCESS reg_wr_VCRX2_V1_process;


  write_wr_VCRX2_V1 <= write_reg_wr_VCRX2_V1;

  
  decode_sel_wr_VCRX2_V2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0052#, 14) ELSE
      '0';

  reg_enb_wr_VCRX2_V2 <= decode_sel_wr_VCRX2_V2 AND wr_enb;

  data_in_wr_VCRX2_V2 <= data_write_unsigned(0);

  reg_wr_VCRX2_V2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_wr_VCRX2_V2 <= '0';
      ELSIF enb = '1' AND reg_enb_wr_VCRX2_V2 = '1' THEN
        write_reg_wr_VCRX2_V2 <= data_in_wr_VCRX2_V2;
      END IF;
    END IF;
  END PROCESS reg_wr_VCRX2_V2_process;


  write_wr_VCRX2_V2 <= write_reg_wr_VCRX2_V2;

END rtl;

